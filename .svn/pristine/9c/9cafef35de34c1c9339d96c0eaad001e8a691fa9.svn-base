/**
 * 
 */
package cn.sx.decentworld.adapter;

import java.util.List;

import android.content.Context;
import android.content.Intent;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.View.OnCreateContextMenuListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.SectionIndexer;
import android.widget.TextView;
import cn.sx.decentworld.R;
import cn.sx.decentworld.common.CommUtil;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.entity.db.ContactUser;
import cn.sx.decentworld.fragment.main.ContactFragment.ContactMenu;
import cn.sx.decentworld.logSystem.LogUtils;
import cn.sx.decentworld.utils.ImageLoaderHelper;
import cn.sx.decentworld.utils.ImageUtils;

/**
 * @ClassName: ContactAdapter.java
 * @Description:
 * @author: cj
 * @date: 2015年7月9日 上午9:59:54
 */
public class FragmentContactAdapter extends BaseAdapter implements SectionIndexer, android.view.View.OnClickListener {
	private static final String TAG = "FragmentContactAdapter";
	private List<ContactUser> list = null;
	private Context mContext;
	private int index = 0;
	private String type = "";

	public FragmentContactAdapter(Context mContext, List<ContactUser> list) {
		this.mContext = mContext;
		this.list = list;
	}

	/**
	 * 当ListView数据发生变化时,调用此方法来更新ListView
	 */
	public void updateListView(List<ContactUser> list) {
		this.list = list;
		notifyDataSetChanged();
	}

	public int getCount() {
		return list.size();
	}

	public ContactUser getItem(int position) {
		return list.get(position);
	}

	public long getItemId(int position) {
		return position;
	}

	public View getView(final int position, View view, ViewGroup arg2) {
		ViewHolder viewHolder = null;
		if (view == null) {
			viewHolder = new ViewHolder();
			view = LayoutInflater.from(mContext).inflate(R.layout.item_sort_listview, null);
			viewHolder.tvTitle = (TextView) view.findViewById(R.id.fragment_chat_contact_lv_item_name);
			viewHolder.tvTitle.setOnClickListener(this);
			viewHolder.tvLetter = (TextView) view.findViewById(R.id.catalog);
			viewHolder.icon = (ImageView) view.findViewById(R.id.fragment_chat_contact_lv_item_icon);
			viewHolder.icon.setOnClickListener(this);
			viewHolder.ivUserType = (ImageView) view.findViewById(R.id.fragment_chat_contact_lv_item_usertype);
			view.setTag(viewHolder);
		} else {
			viewHolder = (ViewHolder) view.getTag();
		}
		final ContactUser mContent = list.get(position);
		viewHolder.tvTitle.setTag(Constants.ITEM_POSITION, position);
		viewHolder.icon.setTag(Constants.ITEM_POSITION, position);
		// 根据position获取分类的首字母的Char ascii值
		int section = getSectionForPosition(position);
		int f = getPositionForSection(section);
		// 如果当前位置等于该分类首字母的Char的位置 ，则认为是第一次出现
		if (position == f) {
			viewHolder.tvLetter.setVisibility(View.VISIBLE);
			viewHolder.tvLetter.setText(mContent.getSortLetters());
		} else {
			viewHolder.tvLetter.setVisibility(View.INVISIBLE);
		}

		viewHolder.tvTitle.setOnCreateContextMenuListener(new OnCreateContextMenuListener() {
			@Override
			public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
				LogUtils.i(TAG, "onCreateContextMenu");
				menu.add(Menu.NONE, ContactMenu.MODIFY_REMARK.ordinal(), Menu.NONE, "修改备注").setIntent(new Intent().putExtra("position", position));
				menu.add(Menu.NONE, ContactMenu.DELETE_CONTACT.ordinal(), Menu.NONE, "删除好友").setIntent(new Intent().putExtra("position", position));
			}
		});

		// if (type.equals("pick"))
		// {
		// viewHolder.tvTitle.setOnClickListener(new OnClickListener()
		// {
		// @Override
		// public void onClick(View arg0)
		// {
		// UserExtraInfo userInfo =
		// UserExtraInfo.queryBy(DecentWorldApp.getInstance().getDwID());
		// if (userInfo != null)
		// {
		// String grId = mContent.getFriendID();
		// userInfo.setGrId(grId);
		// userInfo.save();
		// ((Activity) mContext).runOnUiThread(new Runnable()
		// {
		// @Override
		// public void run()
		// {
		// Toast.makeText(mContext, "选择" + mContent.getShowName() + "作为贵人",
		// Toast.LENGTH_SHORT).show();
		// }
		// });
		// LogUtils.i(TAG, "选择的dwID=" + grId + "的用户作为自己的贵人");
		// // 返回
		// ((Activity) mContext).setResult(Activity.RESULT_OK);
		// ((Activity) mContext).finish();
		// }
		// else
		// {
		// ((Activity) mContext).runOnUiThread(new Runnable()
		// {
		// @Override
		// public void run()
		// {
		// Toast.makeText(mContext, "数据库中用户信息为空", Toast.LENGTH_SHORT).show();
		// }
		// });
		// LogUtils.i(TAG, "数据库中用户信息为空");
		// }
		//
		// }
		// });
		//
		// }

		/**
		 * 设置联系人列表的显示信息
		 */
		ContactUser contactUser = list.get(position);
		viewHolder.tvTitle.setText(contactUser.getShowName());
		String icon = ImageUtils.getIconByDwID(contactUser.getFriendID(), ImageUtils.ICON_SMALL);
		if (CommUtil.isNotBlank(icon)) {
			ImageLoaderHelper.mImageLoader.displayImage(icon, viewHolder.icon, ImageLoaderHelper.mOptions);
		}

		for (int i = 0; i < index; i++) {
			if (position == i) {
				viewHolder.tvLetter.setVisibility(View.GONE);
			}
		}
		if (index != 0) {
			if (position == 0) {
				viewHolder.tvLetter.setVisibility(View.VISIBLE);
				viewHolder.tvLetter.setText("星标朋友");
			}
		}
		// 处理“疑”、“真”、“腕”
		if (contactUser.getUserType() == ContactUser.UserType.IMPEACH.getIndex()) {
			viewHolder.ivUserType.setVisibility(View.VISIBLE);
			viewHolder.ivUserType.setImageResource(R.drawable.stranger_doubt_shadow);
		} else if (contactUser.getUserType() == ContactUser.UserType.NORMAL.getIndex()) {
			viewHolder.ivUserType.setVisibility(View.GONE);
		} else if (contactUser.getUserType() == ContactUser.UserType.VIP.getIndex()) {
			viewHolder.ivUserType.setVisibility(View.VISIBLE);
			viewHolder.ivUserType.setImageResource(R.drawable.stranger_wan);
		}
		return view;
	}

	final static class ViewHolder {
		TextView tvLetter;
		TextView tvTitle;
		ImageView icon;
		ImageView ivUserType;
	}

	/**
	 * 根据ListView的当前位置获取分类的首字母的Char ascii值
	 */
	public int getSectionForPosition(int position) {
		return list.get(position).getSortLetters().charAt(0);
	}

	/**
	 * 根据分类的首字母的Char ascii值获取其第一次出现该首字母的位置
	 */
	public int getPositionForSection(int section) {
		for (int i = 0; i < getCount(); i++) {
			String sortStr = list.get(i).getSortLetters();
			char firstChar = sortStr.toUpperCase().charAt(0);
			if (firstChar == section) {
				return i/* +index */;
			}
		}
		return -1;
	}

	@Override
	public Object[] getSections() {
		return null;
	}

	/**
	 * 按点击监听
	 */
	public void setOnContactClickListener(OnContactClickListener onClickListener) {
		this.mOnContactClickListener = onClickListener;
	}

	private OnContactClickListener mOnContactClickListener;

	public interface OnContactClickListener {
		public void onClick(View view);
	}

	@Override
	public void onClick(View view) {
		if (null != mOnContactClickListener) {
			mOnContactClickListener.onClick(view);
		}
	}

}
