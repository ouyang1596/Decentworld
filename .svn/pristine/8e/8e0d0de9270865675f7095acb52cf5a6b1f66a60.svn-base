/**
 * 
 */
package cn.sx.decentworld.activity.discover;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import android.content.Intent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.R;
import cn.sx.decentworld.activity.BaseFragmentActivity;
import cn.sx.decentworld.activity.ChatSettingWhistleblowingActivity_;
import cn.sx.decentworld.adapter.MomentAdapter;
import cn.sx.decentworld.adapter.MomentAdapter.ClickChildItemCallback;
import cn.sx.decentworld.adapter.MomentAdapter.ViewHolder;
import cn.sx.decentworld.bean.DWMessage;
import cn.sx.decentworld.common.CommUtil;
import cn.sx.decentworld.component.ToastComponent;
import cn.sx.decentworld.dialog.InputNumberDialog;
import cn.sx.decentworld.dialog.InputNumberDialog.InputNumberListener;
import cn.sx.decentworld.dialog.ReminderDialog;
import cn.sx.decentworld.dialog.ReminderDialog.ReminderListener;
import cn.sx.decentworld.engine.MomentEngine;
import cn.sx.decentworld.engine.UserInfoEngine;
import cn.sx.decentworld.entity.db.MomentEntity;
import cn.sx.decentworld.fragment.PublishFragment;
import cn.sx.decentworld.fragment.PublishFragment.OnPublishChangeListener;
import cn.sx.decentworld.listener.GetMomentEntityListener;
import cn.sx.decentworld.listener.PublishMomentCallback;
import cn.sx.decentworld.logSystem.LogUtils;

import com.googlecode.androidannotations.annotations.AfterViews;
import com.googlecode.androidannotations.annotations.Bean;
import com.googlecode.androidannotations.annotations.EActivity;
import com.googlecode.androidannotations.annotations.ViewById;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.nui.multiphotopicker.model.ImageItem;

/**
 * @ClassName: WorksCircleActivity.java
 * @Description: 朋友圈界面
 * @author: cj
 * @date: 2016年2月22日 下午3:42:08
 */
@EActivity(R.layout.activity_moment)
public class MomentActivity extends BaseFragmentActivity implements OnRefreshListener2, OnPublishChangeListener, OnClickListener
{
    /**
     * 常量
     */
    private static final String TAG = "MomentActivity";

    /** 请求码 **/
    public enum REQUEST_CODE
    {
        DOWN_REFRESH(1), UP_REFRESH(2), PUBLISH(3),REPORT(4);
        private int index;
        private REQUEST_CODE(int index)
        {
            this.index = index;
        }
        public int getIndex()
        {
            return index;
        }
    };

    /** 控件对应的级别 **/
    public enum WIDGET_LEVEL
    {
        FAMILY("亲友",3),FRIEND("朋友",2),SPECIAL("特",1),ALL("所有人",0);
        private String name;
        private int index;
        /**
         * 
         */
        private WIDGET_LEVEL(String name,int index)
        {
            this.name = name;
            this.index = index;
        }
        /**
         * @return the name
         */
        public String getName()
        {
            return name;
        }
        /**
         * @param name the name to set
         */
        public void setName(String name)
        {
            this.name = name;
        }
        /**
         * @return the index
         */
        public int getIndex()
        {
            return index;
        }
        /**
         * @param index the index to set
         */
        public void setIndex(int index)
        {
            this.index = index;
        }
    };

    /**
     * 工具类
     */

    @Bean
    ToastComponent toast;

    /**
     * 界面资源
     */
    // 返回
    @ViewById(R.id.iv_moment_back)
    ImageView mIvBack;
    // 标题栏
    @ViewById(R.id.tv_moment_title)
    TextView mTvTitle;
    // 是否处于发布状态
    @ViewById(R.id.tv_moment_publish)
    TextView mTvIsPublish;
    // 朋友圈列表
    @ViewById(R.id.plv_moment)
    PullToRefreshListView mPlvMomentList;
    // 发布容器
    @ViewById(R.id.fl_moment_public_container)
    FrameLayout mFlPublicContainer;

    /**
     * 变量
     */
    // 用户ID
    private String userID;
    // 朋友圈业务控制类
    private MomentEngine mMomentEngine;
    // 朋友圈列表数据和
    private List<MomentEntity> mMomentListData;
    // 朋友圈显示的适配器
    private MomentAdapter mMomentAdapter;
    // 发布朋友圈控件
    private PublishFragment mPublishFragment;
    //
    private int height;
    // 保存最新一条作品圈远程ID
    private long remoteID = 0;
    // 不给谁看的列表
    private ArrayList<String> blocklist = new ArrayList<String>();
    // 只给谁看的列表
    private ArrayList<String> onlyshowtolist = new ArrayList<String>();
    // 将要发布的朋友圈实例
    private MomentEntity entity;

    /**
     * 入口
     */
    @AfterViews
    void init()
    {
        initVariables();
        initViews();
        initDatas();
    }

    /**
     * 初始化变量
     */
    private void initVariables()
    {
        // 获取屏幕的宽度
        WindowManager wm = getWindowManager();
        height = wm.getDefaultDisplay().getHeight();
        mIvBack.setOnClickListener(this);
        mTvTitle.setOnClickListener(this);
        mTvIsPublish.setOnClickListener(this);
        userID = DecentWorldApp.getInstance().getDwID();
        mMomentListData = new ArrayList<MomentEntity>();
        mMomentAdapter = new MomentAdapter(this , mMomentListData,new ImpClickChildItemCallback());
    }

    /**
     * 初始化界面
     */
    private void initViews()
    {
        View headerView = View.inflate(this, R.layout.header_moment, null);
        mPlvMomentList.getRefreshableView().addHeaderView(headerView);
        mPlvMomentList.setAdapter(mMomentAdapter);
        mPlvMomentList.setMode(Mode.BOTH);
        mPlvMomentList.setOnRefreshListener(this);
        mPublishFragment = new PublishFragment();
        mPublishFragment.setOnPublishChangeListener(this);
        getSupportFragmentManager().beginTransaction().add(R.id.fl_moment_public_container, mPublishFragment).commit();
    }

    /**
     * 初始化数据
     */
    private void initDatas()
    {
        mMomentEngine = new MomentEngine();
        // 初始化数据
        mMomentEngine.initData(new GetMomentEntityListener()
        {
            @Override
            public void onSuccess(List<MomentEntity> list)
            {
                if (list.size() > 0)
                {
                    mMomentListData.addAll(list);
                    Collections.sort(mMomentListData);
                    mMomentAdapter.notifyDataSetChanged();
                    remoteID = mMomentListData.get(0).getRemoteID();
                }
            }

            @Override
            public void onFailure(String cause)
            {
                toast.show(cause);
            }
        });
    }

    /**
     * 点击事件
     */
    @Override
    public void onClick(View v)
    {
        switch (v.getId())
        {
        // 显示或隐藏发布界面
            case R.id.tv_moment_publish:
                if (mTvIsPublish.getText().equals("发布"))
                {
                    getSupportFragmentManager().beginTransaction().show(mPublishFragment).commit();
                    mTvIsPublish.setText("隐藏");
                }
                else
                {
                    getSupportFragmentManager().beginTransaction().hide(mPublishFragment).commit();
                    mTvIsPublish.setText("发布");
                }
                break;
            case R.id.tv_moment_title:
                new MomentEngine().clearCacheData();
                mMomentListData.clear();
                mMomentAdapter.notifyDataSetChanged();
                break;
            case R.id.iv_moment_back:
                finish();
                break;
            default:
                break;
        }
    }

    // ////////////////////////////////////默认...begin/////////////////////////////////
    /**
     * 高度变化
     */
    @Override
    public void onHeightChnage(int height)
    {
        LogUtils.i("bm", "height--" + height);
        LayoutParams layoutParams = mPlvMomentList.getLayoutParams();
        layoutParams.height = this.height - height - 50;
        mPlvMomentList.setLayoutParams(layoutParams);
    }

    /**
     * 获取屏幕高度
     * */
    public int getHeight()
    {
        return height;
    }

    // ////////////////////////////////////默认...end/////////////////////////////////

    /**
     * 下拉刷新
     */
    @Override
    public void onPullDownToRefresh(PullToRefreshBase refreshView)
    {
        LogUtils.i(TAG, "下拉刷新开始");
        mMomentEngine.downRefresh(remoteID, 0, new GetMomentEntityListener()
        {
            @Override
            public void onSuccess(List<MomentEntity> list)
            {
                if (list.size() > 0)
                {
                    // 将解析得到的数据添加到内存中
                    mMomentListData.addAll(0, list);
                    // 排序
                    Collections.sort(mMomentListData);
                    // 刷新界面
                    mMomentAdapter.notifyDataSetChanged();
                }
                else
                {
                    toast.show("已经是最新数据");
                }
                mPlvMomentList.onRefreshComplete();
            }

            @Override
            public void onFailure(String cause)
            {
                toast.show(cause);
                mPlvMomentList.onRefreshComplete();
            }
        });
    }

    /**
     * 上拉刷新
     */
    @Override
    public void onPullUpToRefresh(PullToRefreshBase refreshView)
    {
        LogUtils.i(TAG, "上拉刷新开始");
        mMomentEngine.upRefresh(remoteID, "");
    }

    /**
     * 发布朋友圈
     */
    @Override
    public void onPublishChange(final int choose)
    {
        LogUtils.i(TAG, "发布到：" + choose);
        if (choose == WIDGET_LEVEL.ALL.getIndex())
        {
            // 需要缴费
            InputNumberDialog dialog = new InputNumberDialog();
            dialog.setTitle("发布作品圈，需要缴费");
            dialog.setHint("请输入金额(不小于5大洋)");
            dialog.setMinNum(5);
            dialog.setListener(new InputNumberListener()
            {
                @Override
                public void confirm(float info)
                {
                    publish(choose, info);
                }
            });
            dialog.show(getSupportFragmentManager(), "publish");
            //
        }
        else if (choose == WIDGET_LEVEL.SPECIAL.getIndex())
        {
            // 选取联系人
            ReminderDialog dialog = new ReminderDialog();
            dialog.setInfo("选择联系人");
            dialog.setListener(new ReminderListener()
            {
                @Override
                public void confirm()
                {
                    publish(choose, 0);
                }
            });
            dialog.show(getSupportFragmentManager(), "selectContact");
        }
        else
        {
            publish(choose, 0);
        }

    }

    private void publish(int choose, float money)
    {
        entity = new MomentEntity();
        entity.setPublisherID(DecentWorldApp.getInstance().getDwID());
        // 发送时间
        long time = System.currentTimeMillis();
        entity.setPublishTime(time);
        // 判断发送级别
        if (choose == WIDGET_LEVEL.ALL.getIndex())
            entity.setLevel(MomentEntity.MomentLevel.ALL.getIndex());
        else if (choose == WIDGET_LEVEL.SPECIAL.getIndex())
            entity.setLevel(MomentEntity.MomentLevel.FRIEND.getIndex());
        else if (choose == WIDGET_LEVEL.FRIEND.getIndex())
            entity.setLevel(MomentEntity.MomentLevel.FRIEND.getIndex());
        else if(choose == WIDGET_LEVEL.FAMILY.getIndex())
            entity.setLevel(MomentEntity.MomentLevel.FAMILY.getIndex());
        // 判断消息类型
        // 语音

        String voiceFilePath = mPublishFragment.getVoiceFilePath();
        if (CommUtil.isNotBlank(voiceFilePath))
        {
            entity.setContentType(DWMessage.VOICE);
            entity.setLocalUrl(voiceFilePath);
        }

        // 图片
        List<ImageItem> imageItems = mPublishFragment.getImageItems();
        if (imageItems != null && imageItems.size() > 0)
        {
            entity.setContentType(DWMessage.IMAGE);
            String imagePath = "";
            for (int i = 0; i < imageItems.size(); i++)
            {
                if (!imageItems.get(i).equals("0"))
                    imagePath += imageItems.get(i).sourcePath + ";";
            }
            entity.setLocalUrl(imagePath);
        }

        // 文字
        String txtContent = mPublishFragment.getText();
        if (CommUtil.isNotBlank(txtContent))
        {
            entity.setContent(txtContent);
        }
        entity.setMoney(money);
        entity.setMomentState(MomentEntity.MomentStatus.UNFINISHED.getIndex());
        // 获取发布者的名字
        // 根据权限获取要显示的名字
        String publisherName = UserInfoEngine.getInstance().getShowName();
        entity.setPublisherName(publisherName);
        // 发布到网上
        mMomentEngine.publish(entity, blocklist, onlyshowtolist, new PublishMomentCallback()
        {
            @Override
            public void onSuccess(String msg, long remoteID)
            {
                toast.show(msg);
                MomentActivity.this.remoteID = remoteID;
                Collections.sort(mMomentListData);
                mMomentAdapter.notifyDataSetChanged();
            }

            @Override
            public void onFailure(String cause)
            {
                toast.show(cause);
                mMomentAdapter.notifyDataSetChanged();
            }
        });

        // 将数据添加到内存并刷新
        mMomentListData.add(entity);
        mMomentAdapter.notifyDataSetChanged();
        mPublishFragment.clearText();
    }

    @Override
    public void comment(String content)
    {

    }
    
    /**
     * 
     * @Description: 点击举报、赞、踩、评论、删除
     */
    class ImpClickChildItemCallback implements ClickChildItemCallback
    {
        @Override
        public void onReport()
        {

            toast.show("举报");
        }


        @Override
        public void onDisLike()
        {
            toast.show("不喜欢");
        }

        @Override
        public void onComment()
        {
            toast.show("评论");
            if(mPublishFragment.relPublish.getVisibility() == View.VISIBLE)
            {
                mPublishFragment.relComment.setVisibility(View.VISIBLE);
                mPublishFragment.relPublish.setVisibility(View.GONE);
            }
            else
            {
                mPublishFragment.relComment.setVisibility(View.GONE);
                mPublishFragment.relPublish.setVisibility(View.VISIBLE);
            }
        }

        @Override
        public void onDelete()
        {
            toast.show("删除");
        }

        @Override
        public void onLike(int position, MomentEntity entity, ViewHolder holder)
        {
            toast.show("喜欢position="+position);
            LogUtils.i(TAG, entity.toString());
        }
    }
    

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);
        LogUtils.i(TAG, "onActivityResult");
        if(resultCode == RESULT_OK)
        {
           if(requestCode == REQUEST_CODE.REPORT.getIndex())
           {
               //举报
               String info = data.getStringExtra("info");
               int position = data.getIntExtra("positino", -1);
               if(mMomentAdapter!=null && position != -1)
               {
                   mMomentAdapter.report(position,info);
               }
           }
        }
    }
    
    

}
