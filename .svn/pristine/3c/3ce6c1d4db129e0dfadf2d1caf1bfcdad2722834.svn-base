/**
 * 
 */
package cn.sx.decentworld.task;

import org.jivesoftware.smack.packet.Message;
import org.simple.eventbus.EventBus;

import android.content.Context;
import cn.sx.decentworld.bean.DWMessage;
import cn.sx.decentworld.common.NotifyByEventBus;
import cn.sx.decentworld.engine.ConversationEngine;
import cn.sx.decentworld.engine.UserInfoEngine;
import cn.sx.decentworld.entity.MsgAndInfo;
import cn.sx.decentworld.entity.UserSessionInfo;
import cn.sx.decentworld.logSystem.LogUtils;
import cn.sx.decentworld.manager.MsgNotifyManager;
import cn.sx.decentworld.network.utils.JsonUtils;
import cn.sx.decentworld.utils.TimeUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

/**
 * @ClassName: ProcessMessageThread.java
 * @Description:
 * @author: cj
 * @date: 2015年11月28日 上午11:48:00
 */
public class ProcessMessageThread extends DWPacketHandler
{
    public static final String TAG = "ProcessMessageThread";

    public ProcessMessageThread(Message msg, Context context)
    {
        super(msg, context);
    }

    public ProcessMessageThread()
    {

    }

    @Override
    public void run()
    {
        /** subject ="chat" **/
        Message message = (Message) packet;
        try
        {
            LogUtils.v(TAG, "run() 收到一条文字消息subject = chat：" + message.toString());
            JSONObject jsonObject = JSON.parseObject(message.getBody());
            String s_msg = jsonObject.getString("msg");
            String s_userSessionInfo = jsonObject.getString("userSessionInfo");
            // 构造UserSessionInfo
            UserSessionInfo userSessionInfo = (UserSessionInfo) JsonUtils.json2Bean(s_userSessionInfo, UserSessionInfo.class);
            JSONObject jsonObject2 = JSONObject.parseObject(s_userSessionInfo);
            userSessionInfo.setFriendID(jsonObject2.getString("id"));
            // 构造DWMessage
            DWMessage dwMessage = DWMessage.toDWMessage(s_msg);
            dwMessage.setSendSuccess(1);// 接收成功
            dwMessage.setMessageType(DWMessage.TXT);
            dwMessage.setDirect(DWMessage.Direct.RECEIVE.getIndex());
            // test...begin
            float wealth = UserInfoEngine.getInstance().getUserInfo().getWealth();
            dwMessage.setBody(dwMessage.getBody() + 
                    "\n" + "接收之前身家：" + wealth + "[" + TimeUtils.getCurrentTime(TimeUtils.HH11mm11ss) + "]" + 
                    "\n" + "接收之后身家：" + dwMessage.getWealth() + "["+ TimeUtils.getCurrentTime(TimeUtils.HH11mm11ss) + "]"+
                    "\n"+"maxID="+dwMessage.getMid());
            // test...end
            dwMessage.save();
            LogUtils.d(TAG, "接收到一条文字消息，解析完之后得到待显示的消息为："+dwMessage.toString());
            processMsg(new MsgAndInfo(dwMessage , userSessionInfo));
            ComfirmSystem.getInstance().recMsgAck(dwMessage.getMid());
        }
        catch (Exception e)
        {
            LogUtils.e(TAG, "解析单聊文字消息["+message.toString()+"]异常,cause by:" + e.toString(), true);
        }
    }

    /**
     * 处理接收到的消息
     * 
     * @param dwMessage
     */
    private void processMsg(MsgAndInfo msgAndInfo)
    {
        DWMessage dwMessage = msgAndInfo.getDwMessage();
        // 确保为非聊天室信息
        if (dwMessage.getChatType() != DWMessage.CHAT_TYPE_MULTI)
        {
            // 通知聊天界面更新
            EventBus.getDefault().post(dwMessage, NotifyByEventBus.NT_UPDATE_CHAT_LISTVIEW_RECEIVE_MSG);
            // 显示消息通知
            MsgNotifyManager.getInstance().SingleNotify(msgAndInfo);
            ConversationEngine.getInstance().refreshConversation(msgAndInfo, "【单聊文字,发送更新会话列表的通知】");
        }
    }

}
