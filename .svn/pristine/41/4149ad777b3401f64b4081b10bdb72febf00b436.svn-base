/**
 * 
 */
package cn.sx.decentworld.network.request;

import java.io.File;
import java.util.HashMap;

import android.app.Activity;
import android.content.Context;
import android.os.Handler;
import android.os.Message;
import cn.sx.decentworld.common.ConstantNet;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.component.ToastComponent;
import cn.sx.decentworld.network.SendUrl;
import cn.sx.decentworld.network.SendUrl.HttpCallBack;
import cn.sx.decentworld.network.entity.ResultBean;
import cn.sx.decentworld.utils.LogUtils;
import cn.sx.decentworld.utils.ToastUtil;

import com.android.volley.Request.Method;
import com.googlecode.androidannotations.annotations.AfterViews;
import com.googlecode.androidannotations.annotations.Bean;
import com.googlecode.androidannotations.annotations.EBean;
import com.googlecode.androidannotations.annotations.RootContext;

/**
 * @ClassName: SetUserInfo.java
 * @Description:上传用户修改和设置的信息 1.设置用户身家 2.设置用户身价 3.设置用户的绑定的支付宝或微信账号
 * @author: cj
 * @date: 2015年9月25日 上午10:28:22
 */
@EBean
public class SetUserInfo
{
    public static String TAG = "SetUserInfo";
    @RootContext
    Context context;
    @RootContext
    Activity activity;
    @Bean
    ToastComponent toast;
    private SendUrl sendUrl;

    @AfterViews
    void init()
    {
        sendUrl = new SendUrl(context);
    }

    /**
     * 弹出提示信息
     * 
     * @param data
     */
    private void showToastInfo(final String data)
    {
        activity.runOnUiThread(new Runnable()
        {
            @Override
            public void run()
            {
                ToastUtil.showToast(data);
            }
        });
    }

    /**
     * 设置用户身价
     */
    // public void setWorth(String dwID, final String worth)
    // {
    // HashMap<String, String> map = new HashMap<String, String>();
    // map.put("dwID ", dwID);
    // map.put("worth", worth);
    // LogUtils.i(TAG, "setWorth...begin，dwID=" + dwID + ",worth=" + worth);
    // sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH +
    // ConstantNet.API_SET_WORTH, Method.GET, new HttpCallBack()
    // {
    // @Override
    // public void onFailure(String error)
    // {
    // LogUtils.e(TAG, "setWorth...onFailure,cause by:" + error);
    // }
    //
    // @Override
    // public void onSuccess(String response, ResultBean bean)
    // {
    // LogUtils.i(TAG, "setWorth...msg.getResultCode=" + bean.getResultCode() +
    // ",msg.getMsg=" + bean.getMsg());
    // if (bean.getResultCode() == 2222)
    // {
    // Message message = new Message();
    // message.obj = worth;
    // LogUtils.i(TAG, "setWorth...success");
    // }
    // if (bean.getResultCode() == 3333)
    // {
    // LogUtils.i(TAG, "setWorth...failure");
    // }
    // }
    // });
    // }

    /**
     * 上传用户的三张图片
     * 
     * @param dwID
     * @param icon
     * @param count
     *            代表第几张图片 count取值为 1/2/3
     * @param mHandler
     */
    public void setUserIcon(String dwID, File[] icon, final int count)
    {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("count", String.valueOf(count));
        LogUtils.i(TAG, "setUserIcon...begin,dwID=" + dwID);
        sendUrl.httpRequestWithImage(map, icon, Constants.CONTEXTPATH + ConstantNet.API_UPDATE_IMAGE, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "setUserIcon...msg.getResultCode=" + msg.getResultCode());
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "setUserIcon...success,第 " + count + "张");
                    showToastInfo("上传成功");
                }
                if (msg.getResultCode() == 3333)
                {
                    LogUtils.i(TAG, "setUserIcon...failure caused by:" + msg.getMsg());
                    showToastInfo(msg.getMsg());
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "setUserIcon...onFailure caused by:" + e);
                showToastInfo(Constants.NET_WRONG);
            }
        });
    }

    /**
     * 上传用户的信息
     */
    public void setUserInfo(String json, final Handler handler, final int requestCode)
    {
        // 正常情况下，将传入的要修改的个性签名内容保存，如果服务器返回成功结果码，在同步更新本地信息；
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("allUserInfo", json);
        LogUtils.i(TAG, "setUserInfo...begin,json = " + json);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_UPDATE_USER_INFO, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "setUserInfo...success");// 成功
                    Message message = Message.obtain();
                    message.what = requestCode;
                    message.arg1 = 1;
                    handler.sendMessage(message);
                }
                if (msg.getResultCode() == 3333)
                {
                    LogUtils.i(TAG, "setUserInfo...failure，cause by:" + msg.getMsg());// 失败
                    showToastInfo(msg.getMsg());
                    Message message = Message.obtain();
                    message.what = requestCode;
                    message.arg1 = 0;
                    handler.sendMessage(message);
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "setUserInfo...failure,causer by:" + e);
                showToastInfo(Constants.NET_WRONG);
                Message message = Message.obtain();
                message.what = requestCode;
                message.arg1 = 0;
                handler.sendMessage(message);
            }
        });
    }

    /**
     * 设置用户的权限信息
     * 
     * @param json
     */
    public void setUserAuthority(String dwID, String json)
    {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("authority", json);
        LogUtils.i(TAG, "setUserAuthority...begin,json = " + json);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_UPDATE_USER_AUTH, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                if (msg.getResultCode() == 3000)
                {
                    LogUtils.i(TAG, "setUserAuthority...success");// 成功
                }
                if (msg.getResultCode() == 3001)
                {
                    LogUtils.i(TAG, "setUserAuthority...failure,cause by:" + msg.getMsg());// 失败
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "setUserAuthority...onFailure,causer by:" + e);
            }
        });
    }

    /**
     * 设置谁是我的贵人 可以实现 1.设置一个新的贵人 2.修改贵人 3.删除贵人
     * 
     * @param json
     */
    public void setUserGr(String dwID, final String grID, final Handler handler, final int requestCode)
    {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("grID", grID);
        LogUtils.i(TAG, "setUserGr...begin,dwID = " + dwID + ",grID=" + grID);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_SET_GR_TO_ME, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "setUserGr...msg.getResultCode=" + msg.getResultCode() + ",msg.getMsg=" + msg.getMsg());// 成功
                if (msg.getResultCode() == 2222)
                {
                    Message message = Message.obtain();
                    message.what = requestCode;
                    message.obj = grID;
                    handler.sendMessage(message);
                    LogUtils.i(TAG, "setUserGr...success");// 成功
                }
                if (msg.getResultCode() == 3333)
                {
                    showToastInfo(msg.getMsg());
                    LogUtils.i(TAG, "setUserGr...failure,causer by:" + msg.getMsg());// 失败
                }
            }

            @Override
            public void onFailure(String e)
            {
                showToastInfo(Constants.NET_WRONG);
                LogUtils.i(TAG, "setUserGr...onFailure,causer by:" + e);
            }
        });
    }

    /**
     * 上传高级设置的开关权限
     */
    public void uploadAdvanceAuth(String auth, final Handler handler, final int requestCode)
    {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("auth", auth);
        LogUtils.i(TAG, "uploadAdvanceAuth...begin,auth=" + auth);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + Constants.AUTH_SETTING, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "uploadAdvanceAuth...begin,msg.getResultCode=" + msg.getResultCode() + ",msg.getMsg=" + msg.getMsg() + ",msg.getData=" + msg.getData());
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "updateAuthtoServer...success");
                    Message message = Message.obtain();
                    message.what = requestCode;
                    message.arg1 = 1;
                    handler.sendMessage(message);
                }
                if (msg.getResultCode() == 3333)
                {
                    LogUtils.i(TAG, "updateAuthtoServer...failure,cause by:" + msg.getMsg());
                    Message message = Message.obtain();
                    message.what = requestCode;
                    message.arg1 = 0;
                    handler.sendMessage(message);
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "updateAuthtoServer...onFailure,cause by:" + e);
                Message message = Message.obtain();
                message.what = requestCode;
                message.arg1 = 0;
                handler.sendMessage(message);
            }
        });
    }

    /**
     * 设置是否自动转账
     * 
     * @param userID
     *            用户ID
     * @param auto
     * @param handler
     * @param requestCode
     */
    public void setAutoTransfer(String userID, boolean auto)
    {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", userID);
        if (auto)
            map.put("auto", "true");
        else
            map.put("auto", "false");
        LogUtils.i(TAG, "setAutoTransfer...begin,userID=" + userID + ",auto= " + auto);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_SET_AUTO_TRANSFER, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "setAutoTransfer...begin,msg.getResultCode=" + msg.getResultCode() + ",msg.getMsg=" + msg.getMsg() + ",msg.getData=" + msg.getData());
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "setAutoTransfer...success");
                    showToastInfo("设置成功");
                }
                if (msg.getResultCode() == 3333)
                {
                    LogUtils.i(TAG, "setAutoTransfer...failure,cause by:" + msg.getMsg());
                    showToastInfo("设置失败");
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "setAutoTransfer...onFailure,cause by:" + e);
                showToastInfo(Constants.NET_WRONG);
            }
        });
    }

    /**
     * 设置虚拟币提现的银行账号
     * 
     * @param dwID
     *            用户ID
     * @param bankCard
     *            银行卡号
     * @param handler
     *            回调
     * @param requestCode
     *            请求码
     */
    public void setDrawCashAccount(String dwID, String bankCard, final Handler handler, final int requestCode)
    {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("bankCard", bankCard);
        LogUtils.i(TAG, "setDrawCashAccount...begin,dwID=" + dwID + ",bankCard=" + bankCard);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_DRAW_CASH_SET_ACCOUNT, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String resultJSON, ResultBean resultBean)
            {
                LogUtils.i(TAG, "setDrawCashAccount...onSuccess,resultBean.getResultCode=" + resultBean.getResultCode() + ",resultBean.getMsg=" + resultBean.getMsg() + ",resultBean.getData="
                        + resultBean.getData());
                if (resultBean.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "setDrawCashAccount...success");
                    Message message = Message.obtain();
                    //用于判断请求类型
                    message.what = requestCode;
                    //用于判断请求结果
                    message.arg1 = ConstantNet.NET_REQUEST_SUCCESS;
                    //用于提示用户请求的结果
                    message.obj = resultBean.getMsg();
                    handler.sendMessage(message);
                }
                else if (resultBean.getResultCode() == 3333)
                {
                    LogUtils.i(TAG, "setDrawCashAccount...failure");
                    Message message = Message.obtain();
                    message.what = requestCode;
                    message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
                    message.obj = resultBean.getMsg();
                    handler.sendMessage(message);
                }
                else
                {
                    LogUtils.i(TAG, "setDrawCashAccount...未知返回码");
                    Message message = Message.obtain();
                    message.what = requestCode;
                    message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
                    message.obj = resultBean.getMsg();
                    handler.sendMessage(message);
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "setDrawCashAccount...onFailure");
                Message message = Message.obtain();
                message.what = requestCode;
                message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
                message.obj = Constants.NET_WRONG;
                handler.sendMessage(message);
            }
        });

    }

    /**
     * 设置虚拟币提现的提取密码
     * 
     * @param dwID
     *            用户ID
     * @param password
     *            密码
     * @param handler
     *            回调
     * @param requestCode
     *            请求码
     */
    public void setDrawCashPwd(String dwID, String password, final Handler handler, final int requestCode)
    {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("password", password);
        LogUtils.i(TAG, "setDrawCashPwd...begin,dwID=" + dwID + ",password=" + password);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_DRAW_CASH_SET_PWD, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String resultJSON, ResultBean resultBean)
            {
                LogUtils.i(TAG, "setDrawCashPwd...onSuccess,resultBean.getResultCode=" + resultBean.getResultCode() + ",resultBean.getMsg=" + resultBean.getMsg() + ",resultBean.getData="
                        + resultBean.getData());
                if (resultBean.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "setDrawCashPwd...success");
                    Message message = Message.obtain();
                    //用于判断请求类型
                    message.what = requestCode;
                    //用于判断请求结果
                    message.arg1 = ConstantNet.NET_REQUEST_SUCCESS;
                    //用于提示用户请求的结果
                    message.obj = resultBean.getMsg();
                    handler.sendMessage(message);
                }
                else if (resultBean.getResultCode() == 3333)
                {
                    LogUtils.i(TAG, "setDrawCashPwd...failure");
                    Message message = Message.obtain();
                    message.what = requestCode;
                    message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
                    message.obj = resultBean.getMsg();
                    handler.sendMessage(message);
                }
                else
                {
                    LogUtils.i(TAG, "setDrawCashPwd...未知返回码");
                    Message message = Message.obtain();
                    message.what = requestCode;
                    message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
                    message.obj = resultBean.getMsg();
                    handler.sendMessage(message);
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "setDrawCashPwd...onFailure");
                Message message = Message.obtain();
                message.what = requestCode;
                message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
                message.obj = Constants.NET_WRONG;
                handler.sendMessage(message);
            }
        });
    }

    /**
     * 虚拟币提现
     * 
     * @param dwID
     *            用户ID
     * @param pwd
     *            提现密码
     * @param amount
     *            提现金额
     * @param handler
     *            会
     * @param requestCode
     */
    public void withDrawWealth(String dwID, String pwd, String amount, final Handler handler,final  int requestCode)
    {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("pwd", pwd);
        map.put("amount", amount);
        LogUtils.i(TAG, "withDrawWealth...begin,dwID=" + dwID + ",pwd=" + pwd + ",amount=" + amount);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_DRAW_CASH, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String resultJSON, ResultBean resultBean)
            {
                LogUtils.i(TAG, "withDrawWealth...onSuccess,resultBean.getResultCode=" + resultBean.getResultCode() + ",resultBean.getMsg=" + resultBean.getMsg() + ",resultBean.getData="
                        + resultBean.getData());
                if (resultBean.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "withDrawWealth...success");
                    Message message = Message.obtain();
                    //用于判断请求类型
                    message.what = requestCode;
                    //用于判断请求结果
                    message.arg1 = ConstantNet.NET_REQUEST_SUCCESS;
                    //用于提示用户请求的结果
                    message.obj = resultBean.getMsg();
                    handler.sendMessage(message);
                }
                else if (resultBean.getResultCode() == 3333)
                {
                    //您尚未设置取现密码，请设置后操作
                    LogUtils.i(TAG, "withDrawWealth...failure");
                    Message message = Message.obtain();
                    message.what = requestCode;
                    message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
                    message.obj = resultBean.getMsg();
                    handler.sendMessage(message);
                }
                else
                {
                    LogUtils.i(TAG, "withDrawWealth...未知返回码");
                    Message message = Message.obtain();
                    message.what = requestCode;
                    message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
                    message.obj = resultBean.getMsg();
                    handler.sendMessage(message);
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "withDrawWealth...onFailure");
                Message message = Message.obtain();
                message.what = requestCode;
                message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
                message.obj = Constants.NET_WRONG;
                handler.sendMessage(message);
            }
        });
    }
}
