package cn.sx.decentworld.network;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.apache.http.Header;
import org.apache.http.protocol.HTTP;

import android.content.Context;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.common.CommUtil;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.network.entity.ResultBean;
import cn.sx.decentworld.network.utils.JsonUtils;
import cn.sx.decentworld.utils.AES;
import cn.sx.decentworld.utils.SPUtils;

import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.RequestParams;
import com.loopj.android.http.TextHttpResponseHandler;

/**
 * 
 * @ClassName: SendUrl.java
 * @Description:
 * @author: cj
 * @date: 2016年1月29日 下午11:41:28
 */
public class SendUrl {
	private Context context;

	/**
	 * 无参构造函数
	 */
	public SendUrl() {
		this.context = DecentWorldApp.getGlobalContext();
	}

	public SendUrl(Context context) {
		this.context = context;
	}

	/**
	 * 带参数的http请求，若无参请求，将hashmap设置为null即可
	 * 
	 * @param requestMap
	 *            参数hashmap
	 * @param url
	 *            请求url
	 * @param method
	 *            请求方式 Method.POST or Method.GET(Volley)
	 * @param httpCallBack
	 *            回调接口
	 */
	public void httpRequestWithParams(final HashMap<String, String> requestMap, String url, int method,
			final HttpCallBack httpCallBack) {
		// 增强接口的安全性
		String randomStr = (String) SPUtils.get(context, SPUtils.randomStr, "");
		if (CommUtil.isBlank(randomStr)) {
			requestMap.put("randomStr", "");
			requestMap.put("token", "");
			requestMap.put("id", "");
		} else {
			String time = String.valueOf(System.currentTimeMillis());
			requestMap.put("randomStr", time);
			String token = AES.encode(time, randomStr);
			requestMap.put("token", token);
			requestMap.put("id", DecentWorldApp.getInstance().getDwID());
		}
		// 请求参数
		RequestParams requestparams = null;
		requestparams = IteratorMap(requestMap);
		requestparams.setContentEncoding(HTTP.UTF_8);
		// HttpClient
		AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
		asyncHttpClient.setTimeout(Constants.timeOut);
		asyncHttpClient.addHeader("http-equiv", "content-type");
		asyncHttpClient.addHeader("content", "text/html");
		asyncHttpClient.addHeader("charset", "utf-8");
		// saveCookie(asyncHttpClient);
		// 发送请求
		asyncHttpClient.get(url, requestparams, new TextHttpResponseHandler() {
			@Override
			public void onSuccess(int arg0, Header[] arg1, final String response) {
				// CookieUtils.setCookies(getCookie());
				try {
					new Thread() {
						public void run() {
							ResultBean resultBean = JsonUtils.getResultMsgFromJson(response);
							httpCallBack.onSuccess(response, resultBean);
						};

					}.start();
				} catch (Exception e) {
				}
			}

			@Override
			public void onFailure(int arg0, Header[] arg1, String arg2, Throwable arg3) {
				httpCallBack.onFailure(arg2);
			}
		});

	}

	/**
	 * 带参数上传图片 POST
	 * 
	 * @param params
	 *            requestMap 参数params
	 * @param images
	 * @param url
	 * @param httpCallBack
	 */
	public void httpRequestWithImage(HashMap<String, String> params, File[] images, String url, final HttpCallBack httpCallBack) {
		/** 增强接口的安全性 **/
		url = extracted(params, url);
		AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
		asyncHttpClient.setTimeout(Constants.timeOut);
		// saveCookie(asyncHttpClient);
		RequestParams requestparams = null;
		if (params != null) {
			requestparams = IteratorMap(params);
		}
		try {
			if (images != null) {
				for (int i = 0; i < images.length; i++) {
					if (i == 0) {
						requestparams.put("file", images[i]);
					} else {
						requestparams.put("file" + i, images[i]);
					}
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		asyncHttpClient.post(url, requestparams, new TextHttpResponseHandler() {

			ResultBean resultBean = new ResultBean();

			@Override
			public void onSuccess(int arg0, Header[] arg1, final String response) {
				// CookieUtils.setCookies(getCookie());
				try {

					new Thread() {
						public void run() {
							resultBean = JsonUtils.getResultMsgFromJson(response);
							httpCallBack.onSuccess(response, resultBean);
						};

					}.start();

				} catch (Exception e) {
				}
			}

			@Override
			public void onFailure(int arg0, Header[] arg1, String arg2, Throwable arg3) {
				httpCallBack.onFailure(arg0 + arg2 + arg3.getMessage());
			}
		});
	}

	/**
	 * 增强接口安全性（带文件的接口）
	 * 
	 * @param params
	 * @param url
	 * @return
	 */
	private String extracted(HashMap<String, String> params, String url) {
		String randomStr = (String) SPUtils.get(context, SPUtils.randomStr, "");
		if (CommUtil.isBlank(randomStr)) {
			params.put("randomStr", "");
			params.put("token", "");
			params.put("id", "");
		} else {
			String time = String.valueOf(System.currentTimeMillis());
			String token = AES.encode(time, randomStr);
			StringBuffer sb = new StringBuffer();
			sb.append("?randomStr=").append(time).append("&token=").append(token).append("&id=")
					.append(DecentWorldApp.getInstance().getDwID());
			url = url + sb.toString();
		}
		return url;
	}

	/**
	 * 遍历haspmap
	 * 
	 * @param params
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	private RequestParams IteratorMap(HashMap<String, String> params) {
		RequestParams requestparams = new RequestParams();
		Iterator iter = params.entrySet().iterator();
		while (iter.hasNext()) {
			Map.Entry entry = (Map.Entry) iter.next();
			String key = (String) entry.getKey();
			String values = (String) entry.getValue();
			requestparams.put(key, values);
		}

		return requestparams;

	}

	@SuppressWarnings("rawtypes")
	private RequestParams IteratorMapDouble(HashMap<String, Double> params) {
		RequestParams requestparams = new RequestParams();
		Iterator iter = params.entrySet().iterator();
		while (iter.hasNext()) {
			Map.Entry entry = (Map.Entry) iter.next();
			String key = (String) entry.getKey();
			String values = (String) entry.getValue();
			requestparams.put(key, values);
		}
		return requestparams;
	}

	public interface HttpCallBack {
		/**
		 * 网络回调函数,此函数调用,说明网络请求失败
		 * 
		 * @param String
		 */
		public void onFailure(String e);

		/**
		 * 网络回调函数,此函数调用,说明网络请求成功
		 * 
		 * @param response
		 */
		public void onSuccess(String resultJSON, ResultBean resultBean);

	}

	// protected void saveCookie(AsyncHttpClient client) {
	// if (null != client) {
	// PersistentCookieStore cookieStore = new PersistentCookieStore(context);
	// client.setCookieStore(cookieStore);
	// }
	// }
	//
	// protected List<Cookie> getCookie() {
	// PersistentCookieStore cookieStore = new PersistentCookieStore(context);
	// List<Cookie> cookies = cookieStore.getCookies();
	// return cookies;
	// }
	//
	// public void clearCookie() {
	// PersistentCookieStore cookieStore = new PersistentCookieStore(context);
	// cookieStore.clear();
	// }

	/**
	 * 带参数上传图片 POST
	 * 
	 * @param params
	 *            requestMap 参数params
	 * @param images
	 * @param url
	 * @param httpCallBack
	 */
	public void httpRequestWithPublish(HashMap<String, String> params, File[] files, ArrayList<String> blocklist,
			ArrayList<String> onlyshowtolist, String url, final HttpCallBack httpCallBack) {
		/** 增强接口的安全性 **/
		url = extracted(params, url);
		AsyncHttpClient asyncHttpClient = new AsyncHttpClient();
		asyncHttpClient.setTimeout(Constants.timeOut);
		// saveCookie(asyncHttpClient);
		RequestParams requestparams = null;
		// 普通参数
		if (params != null) {
			requestparams = IteratorMap(params);
		}
		// 文件
		try {
			if (files != null && files.length > 0) {
				for (int i = 0; i < files.length; i++) {
					if (CommUtil.isNotBlank(files[i])) {
						if (i == 0) {
							requestparams.put("file", files[i]);
						} else {
							requestparams.put("file" + i, files[i]);
						}
					}
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		// 不给谁看
		if (blocklist != null) {
			requestparams.put("blocklist", blocklist);
		} else {
			requestparams.put("blocklist", new ArrayList<String>().toString());
		}
		// 只给谁看
		if (blocklist != null) {
			requestparams.put("onlyshowtolist", onlyshowtolist);
		} else {
			requestparams.put("onlyshowtolist", new ArrayList<String>().toString());
		}
		// 请求
		asyncHttpClient.post(url, requestparams, new TextHttpResponseHandler() {

			ResultBean resultBean = new ResultBean();

			@Override
			public void onSuccess(int arg0, Header[] arg1, final String response) {
				// CookieUtils.setCookies(getCookie());
				try {

					new Thread() {
						public void run() {
							resultBean = JsonUtils.getResultMsgFromJson(response);
							httpCallBack.onSuccess(response, resultBean);
						};

					}.start();

				} catch (Exception e) {
				}
			}

			@Override
			public void onFailure(int resultCode, Header[] header, String errorInfo, Throwable arg3) {
				httpCallBack.onFailure(resultCode + errorInfo + arg3.getMessage());
			}
		});
	}
}
