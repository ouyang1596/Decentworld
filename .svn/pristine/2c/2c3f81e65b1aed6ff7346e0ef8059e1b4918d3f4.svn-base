package cn.sx.decentworld.activity;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.simple.eventbus.EventBus;
import org.simple.eventbus.Subscriber;
import org.simple.eventbus.ThreadMode;

import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.util.DisplayMetrics;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.R;
import cn.sx.decentworld.adapter.ViewPagerAdapter;
import cn.sx.decentworld.bean.ContactUser;
import cn.sx.decentworld.bean.DWMessage;
import cn.sx.decentworld.bean.DisplayAuthority;
import cn.sx.decentworld.bean.NotifyByEventBus;
import cn.sx.decentworld.bean.UserInfo;
import cn.sx.decentworld.bean.manager.UserInfoManager;
import cn.sx.decentworld.broadcast.NetStateReceiver;
import cn.sx.decentworld.broadcast.OnNetChangeListener;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.common.DWViewPager;
import cn.sx.decentworld.common.LocationProvider;
import cn.sx.decentworld.component.ToastComponent;
import cn.sx.decentworld.component.ui.MainFragmentComponent;
import cn.sx.decentworld.fragment.ChatFragment;
import cn.sx.decentworld.fragment.ChatFragment_;
import cn.sx.decentworld.fragment.NewsFragment;
import cn.sx.decentworld.fragment.NewsFragment_;
import cn.sx.decentworld.fragment.StrangerFragment;
import cn.sx.decentworld.fragment.StrangerFragment_;
import cn.sx.decentworld.inter.NotifyCallback;
import cn.sx.decentworld.listener.onConnectOpenFireListener;
import cn.sx.decentworld.network.SendUrl;
import cn.sx.decentworld.network.entity.ResultBean;
import cn.sx.decentworld.network.request.GetFriendInfo;
import cn.sx.decentworld.network.request.GetUserInfo;
import cn.sx.decentworld.network.utils.JsonUtils;
import cn.sx.decentworld.service.PacketListenerService;
import cn.sx.decentworld.task.ConnectOpenFireTask;
import cn.sx.decentworld.utils.ExitAppUtils;
import cn.sx.decentworld.utils.ImageLoaderHelper;
import cn.sx.decentworld.utils.LogUtils;
import cn.sx.decentworld.utils.NetworkUtils;
import cn.sx.decentworld.utils.SettingSp;
import cn.sx.decentworld.utils.SoundPoolUtils;
import cn.sx.decentworld.utils.UpgradeVersion;
import cn.sx.decentworld.utils.XmppHelper;
import cn.sx.decentworld.widget.CubeTransformer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.amap.api.location.AMapLocation;
import com.android.volley.Request;
import com.googlecode.androidannotations.annotations.AfterViews;
import com.googlecode.androidannotations.annotations.Bean;
import com.googlecode.androidannotations.annotations.EActivity;
import com.googlecode.androidannotations.annotations.ViewById;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;

/**
 * @author yj
 * @ClassName: MainActivity
 * @Description: 主界面
 * @date 2015年6月29日12:34:03
 */
@EActivity(R.layout.activity_main)
public class MainActivity extends BaseFragmentActivity implements OnNetChangeListener, onConnectOpenFireListener{
	private static final String TAG = "MainActivity";
	public static final int STRANGER_INDEX = 0;
	public static final int CHAT_INDEX = 1;
	public static final int NEWS_INDEX = 2;
	// public static String jsonUserInfo = null;
	@ViewById(R.id.main_viewpager)
	public static DWViewPager main_viewpager;
	@Bean
	ToastComponent toast;
	private List<Fragment> fragmentsList;
	/**聊天室的Fragment*/
	private NewsFragment news;
	/**陌生人的Fragment*/
	private StrangerFragment stranger;
	/**含有主界面四个模块的MainFragment*/
	private ChatFragment chat;
	private ViewPagerAdapter fragmentAdapter;
	private boolean isLogin = false;
	private Boolean newUser;
	private boolean isFirst = true;
	@Bean
	GetUserInfo getUserInfo;

	public String dwID = DecentWorldApp.getInstance().getDwID();

	@Bean
	MainFragmentComponent mainComponent;
	
	private android.app.AlertDialog.Builder conflictBuilder;

	@Bean
	GetFriendInfo getFriendInfo;
	// 首次按返回按钮的时间
	private long firstTiem = 0;
	private static UserInfo userInfo = null;
	private static final int HANDLER_GET_USER_INFO = 1;// 获取用户的信息并返回
	private static final int HANDLER_GET_USER_INFO_AUTH = 2;// 获取用户的信息对外显示权限并返回
	private static final int HANDLER_LOGIN_COMPLETE = 3;// 获取用户的信息并返回
	Handler handler = new Handler() {
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case HANDLER_GET_USER_INFO:
				LogUtils.i(
						TAG,
						"从网络请求等到个人信息，解析保存到数据库和内存中，网络获取的数据为："
								+ msg.obj.toString());
				JSONObject json = JSON.parseObject(msg.obj.toString());
				JSONObject info = json.getJSONObject("userInfo");
				userInfo = UserInfo.queryByDwID(dwID);
				if (userInfo != null) {
					userInfo.delete();
				}
				userInfo = JsonUtils.json2Bean(info.toString(), UserInfo.class);
				userInfo.setDwID(dwID);
				// 将个人信息保存到数据库中
				userInfo.save();
				// 将个人信息保存到内存中
				UserInfoManager.initUserInfo(userInfo);
				//
				// jsonUserInfo = info.toString();
				break;
			case HANDLER_GET_USER_INFO_AUTH: {
				LogUtils.i(TAG, "获取用户信息权限成功");
				JSONObject jsonAuth = JSON.parseObject(msg.obj.toString());
				JSONObject authInfo = jsonAuth.getJSONObject("displayAuth");
				DisplayAuthority displayAuth = DisplayAuthority
						.queryByDwID(dwID);
				LogUtils.i(TAG, "用户信息权限为："
						+ (authInfo == null ? null : authInfo.toString()));
				if (displayAuth != null) {
					displayAuth.delete();
				}
				if (authInfo == null) {
					LogUtils.e(TAG, "用户验证权限为null");
					return;
				}
				DisplayAuthority displayAuthority = JsonUtils.json2Bean(
						authInfo.toString(), DisplayAuthority.class);
				displayAuthority.save();
			}
				break;
			case HANDLER_LOGIN_COMPLETE:
				loginCompleted();
				break;
			}
		}
	};

	/**
	 * 网络状态广播
	 */
	private NetStateReceiver netStateReceiver;

	/**
	 * 初始化
	 */
	@AfterViews
	public void init() {
		EventBus.getDefault().register(this);// 注册订阅事件
		loginCompleted();
		submitUserLocation();
		checkVersion();
		registerDateTransReceiver();
	}

	/**
	 * 注册网络变化的监听
	 */
	private void registerDateTransReceiver() {
		if (netStateReceiver == null){
		    netStateReceiver = new NetStateReceiver();
		}
		//为网络变化加入回调监听
		netStateReceiver.setOnNetChangeListener(this);
		IntentFilter filter = new IntentFilter();
		filter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
		filter.setPriority(1000);
		registerReceiver(netStateReceiver, filter);
	}

	/**
	 * 检查是否有新的版本
	 */
	private void checkVersion() {
		/** 如果有网，则进行网络升级检查 **/
		if (NetworkUtils.isNetWorkConnected(MainActivity.this)) {
			/**
			 * 检查是否满足更新的条件
			 */
			if (SettingSp.isUpdate(MainActivity.this)) {
				new UpgradeVersion(MainActivity.this);
			}
		}
	}

	/**
	 * 提交地理坐标到服务器
	 */
	private void submitUserLocation() {
		LocationProvider provider = LocationProvider.getInstance(this);
		provider.setNotify("SCHEDULE_LOCATION", new NotifyCallback() {
			@Override
			public void execute(AMapLocation location) {
				if (location == null) {
					return;
				}
				LocationProvider.latitude = location.getLatitude();
				LocationProvider.longitude = location.getLongitude();
				LogUtils.i(
						"bm",
						"获取到定位信息" + "\n" + "locationAddress="
								+ location.getAddress() + "\n" + "laititude="
								+ location.getLatitude() + "\nlongtitude="
								+ location.getLongitude() + "\n");
				uploadLocation(DecentWorldApp.getInstance().getDwID(),
						location.getLatitude(), location.getLongitude());
			}
		});
		provider.startLocation(false);
	}

	/**
	 * 上传用户所在位置的经纬度
	 *
	 * @param latitude
	 *            纬度
	 * @param longitude
	 *            经度
	 */
	public void uploadLocation(String dwID, double latitude, double longitude) {
		LogUtils.e(Constants.TAG_BM, "location_request");
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("dwID", dwID);
		map.put("user_lt", String.valueOf(latitude));
		map.put("user_ln", String.valueOf(longitude));
		// 实时上传用户坐标接口
		SendUrl sendUrl = new SendUrl(mContext);
		sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH
				+ "/user/updateLocation", Request.Method.GET,
				new SendUrl.HttpCallBack() {
					@Override
					public void onSuccess(String response, ResultBean msg) {
						if (msg.getResultCode() == 3000) {
							LogUtils.i("bm", "uploadLocation...end");
						}
						if (msg.getResultCode() == 3001) {
							LogUtils.i("bm", "uploadLocation...failure");
						}
					}

					@Override
					public void onFailure(String e) {
						LogUtils.e("bm", "failure--" + e);
					}
				});
	}

	/**
	 * 登录完成后执行
	 */
	private void loginCompleted() {
		//TODO 注释掉的代码，我移到下面去了。从服务器获取好友列表，
		//getFriendInfo.getContactUsersList(dwID);
		Constants.screenWidth = getDisplayWidth();// 保存屏幕宽度
		// 初始化三个旋转页面
		initFragment();
		//TODO 注释掉的代码，我移到下面去了。 获取用户详细信息并保存到数据库中
		//getUserInfo.getUserInfo(dwID, handler, HANDLER_GET_USER_INFO);
		//TODO 注释掉的代码，我移到下面去了。 获取用户详细信息权限并保存到数据库中
		//getUserInfo.getUserInfoAuth(dwID, handler, HANDLER_GET_USER_INFO_AUTH);
		/**
		 * 开启消息监听服务
		 */
		restartListenerService("");
	}

	/**
	 * 开启服务
	 */
	@Subscriber(tag = NotifyByEventBus.NT_START_SERVICE)
	public void startListenerService() {
		startService(new Intent(MainActivity.this, PacketListenerService.class));
		LogUtils.i(TAG, "开启服务");
	}

	/**
	 * 接收貌推送
	 */
	@Subscriber(tag = NotifyByEventBus.NT_CHECK_BEAUTIFY)
	public void receiveCheckBeautify(String data) {
		try {
			org.json.JSONObject object = new org.json.JSONObject(data);
			Intent intent = new Intent(this, ExamineActivity_.class);
			intent.putExtra("sex", object.getString("sex"));
			intent.putExtra("dwID", object.getString("dwID"));
			intent.putExtra("name", object.getString("name"));
			intent.putExtra("amount", object.getString("amount"));
			startActivity(intent);
		} catch (org.json.JSONException e) {
			toast.show("解析失败");
		}
	}

	/**
	 * 关闭服务
	 */
	@Subscriber(tag = NotifyByEventBus.NT_STOP_SERVICE)
	public void stopListenerService(String tag) {
		stopService(new Intent(MainActivity.this, PacketListenerService.class));
		LogUtils.i(TAG, "关闭服务");
	}

	/**
	 * 重启服务
	 */
	@Subscriber(tag = NotifyByEventBus.NT_RESTART_SERVICE)
	public void restartListenerService(String tag) {
		stopService(new Intent(MainActivity.this, PacketListenerService.class));
		startService(new Intent(MainActivity.this, PacketListenerService.class));
		LogUtils.i(TAG, "重启服务");
	}

	/**
	 * 获取手机屏幕的参数
	 *
	 * @return
	 */
	private int getDisplayWidth() {
		DisplayMetrics metric = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(metric);
		int width = metric.widthPixels; // 屏幕宽度（像素）
		int height = metric.heightPixels;
		// LogUtils.i(TAG,
		// "width="+width+",height="+height+",density="+metric.density+",densityDpi="+metric.densityDpi);
		// toast.show("width="+width+",height="+height+"\ndensity="+metric.density+",densityDpi="+metric.densityDpi);
		return width;
	}

	/**
	 * 初始化主页各个fragment
	 */
	private void initFragment() {
		// 初始化主页的3个Tab界面
		news = new NewsFragment_();
		chat = new ChatFragment_();
		stranger = new StrangerFragment_();

		fragmentsList = new ArrayList<Fragment>();
		fragmentsList.add(stranger);
		fragmentsList.add(chat);
		fragmentsList.add(news);
		fragmentAdapter = new ViewPagerAdapter(getSupportFragmentManager(),
				fragmentsList);
		// 三维切换动画
		main_viewpager.setPageTransformer(true, new CubeTransformer());
		// 填充viewPager
		main_viewpager.setAdapter(fragmentAdapter);
		// 设置当前显示的界面
		main_viewpager.setCurrentItem(1);
		// 设置viewpager预加载的界面个数
		main_viewpager.setOffscreenPageLimit(1);
		// 监听viewpager当前切换到哪个fragment
		main_viewpager.setOnPageChangeListener(new OnPageChangeListener() {
			@Override
			public void onPageSelected(int arg0) {
				LogUtils.i(TAG, "onPageSelected...选择的page=" + arg0);
				if (arg0 == 0) {
					// StrangerFragment fragment = (StrangerFragment)
					// fragmentsList
					// .get(0);
					// fragment.initRequest();
				} else if (arg0 == 1) {
					if (DecentWorldApp.ifFromAppOwner) {
						chat.chat_scrollLayout.setToScreen(2);
					}
				} else if (arg0 == 2) {
					if (DecentWorldApp.ifFixed) {
						news.adapter
								.requestEnterChatRoom(DecentWorldApp.chatRoomInfo);
					}
				}
			}

			@Override
			public void onPageScrolled(int arg0, float arg1, int arg2) {
				// 当页面滑动过程中会一直调用
				// arg0 :当前页面，即你点击滑动的页面
				// arg1 :当前页面偏移的百分比
				// arg2 :当前页面偏移的像素
				// LogUtils.i(TAG, "onPageScrolled...arg0=" + arg0 + ",arg1="
				// + arg1 + ",arg2=" + arg2);
			}

			@Override
			public void onPageScrollStateChanged(int arg0) {
				if (arg0 == 0) {
					// LogUtils.i(TAG, "onPageScrollStateChanged...什么都没有做");
				} else if (arg0 == 1) {
					// LogUtils.i(TAG, "onPageScrollStateChanged...正在滑动");
				} else if (arg0 == 2) {
					// LogUtils.i(TAG, "onPageScrollStateChanged...滑动完毕");
				}
			}
		});
	}

	@Override
	protected void onCreate(Bundle arg0) {
		super.onCreate(arg0);
		LogUtils.i(TAG, "onCreate");
	}

	@Override
	protected void onStart() {
		super.onStart();
		LogUtils.i(TAG, "onStart");

	}

	@Override
	protected void onResume() {
		super.onResume();
		LogUtils.i(TAG, "onResume");
		//*********************TODO：个人感觉：这个代码弯曲完全没有什么意义***************************
		// 首先从服务器获取好友列表，如果请求
		if (ContactUser.queryAllList() == null) {
			if (NetworkUtils.isNetWorkConnected(MainActivity.this)
					&& (DecentWorldApp.getInstance().getConnectionImpl()
							.isConnected())) {
				LogUtils.i(TAG,
						"有网且连接到了服务器，从服务器上获取联系人列表,并缓存在Application中,dwID=" + dwID);
				getFriendInfo.getContactUsersList(dwID);
			} else {
				LogUtils.i(TAG, "联系人列表为空，但连接已断开，无法从数据获取");
			}
		}
		//*********************TODO：个人感觉：这个代码弯曲完全没有什么意义  end***************************
		
		// 当创建聊天室成功之后，进入到聊天室列表的界面后刷新界面
		if (getIntent().getIntExtra("creatRoomSuccess", -1) == ChatRoomBuildActivity.CREATE_ROOM_SUCCESS) {
			LogUtils.i(TAG, "创建聊天室成功");
			news.turnToTab(getIntent().getIntExtra("creatRoomSuccess", -1));
		}
	}

	@Override
	protected void onPause() {
		super.onPause();
		LogUtils.i(TAG, "onPause");
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		LogUtils.i(TAG, "onSaveInstanceState");
	}

	@Override
	protected void onStop() {
		super.onStop();
		LogUtils.i(TAG, "onStop");
	}

	@Override
	protected void onDestroy() {
		LogUtils.i(TAG, "onDestroy");
		EventBus.getDefault().unregister(this);
		LocationProvider.getInstance(this).stop();
		ImageLoaderHelper.clearCache();
		SoundPoolUtils.release();
		unregisterReceiver(netStateReceiver);
		super.onDestroy();
	}

	@Override
	public void onBackPressed() {
		if ((System.currentTimeMillis() - firstTiem) > 2000) {
			toast.show("再按一次退出");
			firstTiem = System.currentTimeMillis();
		} else {
			LogUtils.i(TAG, "退出软件");
			super.onBackPressed();
		}
	}

	/**
	 * 返回保存在MainActivity中的UserInfo实例
	 *
	 * @return
	 */
	public static UserInfo getUserInfoInstance() {
		return userInfo;
	}

	@Override
	protected void onNewIntent(Intent intent) {
		super.onNewIntent(intent);
		setIntent(intent);
	}

	/**
	 * 接收冲突通知并处理
	 *
	 * @param str
	 */
	@Subscriber(tag = NotifyByEventBus.NT_CRUSH_OFF_LINE, mode = ThreadMode.MAIN)
	public void conflictEvent(String str) {
		ExitAppUtils.getInstance().toMainActivity(getLocalClassName());
		if (!MainActivity.this.isFinishing()) {
			// clear up global variables
			try {
				if (conflictBuilder == null)
					conflictBuilder = new android.app.AlertDialog.Builder(
							MainActivity.this);
				conflictBuilder.setTitle("被挤下线");
				conflictBuilder.setMessage("内容：被挤下线");
				conflictBuilder.setPositiveButton("确定",
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
								conflictBuilder = null;
								mainComponent.loginout();
							}
						});
				conflictBuilder.setCancelable(false);
				conflictBuilder.create().show();
			} catch (Exception e) {

			}
		}
	}

	private HttpUtils httpUtils = new HttpUtils();

	@Subscriber(tag = NotifyByEventBus.NT_RECEIVE_SINGLE_AUDIO)
	public void receiveSingleAudio(final DWMessage dwMessage) {
		String fileName = System.currentTimeMillis() + ".mp3";
		LogUtils.i("bm", fileName);
		httpUtils.download(dwMessage.getUri(), Constants.HomePath
				+ Constants.AUDIO_PATH + fileName, new RequestCallBack<File>() {

			@Override
			public void onSuccess(ResponseInfo<File> responseInfo) {
				LogUtils.e("bm",
						"fileName--" + responseInfo.result.getAbsolutePath());
				dwMessage.ifFromNet = 1;
				dwMessage.setLocalUrl(responseInfo.result.getAbsolutePath());
				dwMessage.save();
				if (dwMessage.getChatType() != DWMessage.CHAT_TYPE_MULTI) {
					// 朋友间单聊
					if (dwMessage.getChatRelationship() == DWMessage.CHAT_RELATIONSHIP_FRIEND) {
						LogUtils.i(TAG, "消息类型为单聊,发送更新消息列表的通知");
						EventBus.getDefault().post(dwMessage,
								NotifyByEventBus.NT_REFRESH_CONVERSATION);
					}
					if (dwMessage.getChatRelationship() == DWMessage.CHAT_RELATIONSHIP_STRANGER) {
						EventBus.getDefault().post(dwMessage,
								NotifyByEventBus.NT_NOTIFY_STRANGER_UPDATA);
					}
					EventBus.getDefault()
							.post(dwMessage,
									NotifyByEventBus.NT_UPDATE_CHAT_LISTVIEW_RECEIVE_FILE);
				}
			}

			@Override
			public void onFailure(HttpException error, String msg) {
				LogUtils.e("bm", "msg--" + msg);
			}
		});
	}

	@Subscriber(tag = NotifyByEventBus.NT_RECEIVE_CHATROOM_AUDIO)
	public void receiveChatRoomAudio(final DWMessage dwMessage) {
		String fileName = System.currentTimeMillis() + ".mp3";
		LogUtils.i("bm", fileName);
		httpUtils.download(dwMessage.getUri(), Constants.HomePath
				+ Constants.AUDIO_PATH + fileName, new RequestCallBack<File>() {

			@Override
			public void onSuccess(ResponseInfo<File> responseInfo) {
				dwMessage.setLocalUrl(responseInfo.result.getAbsolutePath());
				dwMessage.ifFromNet = 1;
				EventBus.getDefault().post(dwMessage,
						NotifyByEventBus.NT_CHAT_ROOM_MSG);
			}

			@Override
			public void onFailure(HttpException error, String msg) {
				LogUtils.e("bm", "msg--" + msg);
			}
		});
	}

    /*
     * (non-Javadoc)
     * @see cn.sx.decentworld.broadcast.OnNetChangeListener#onNetConnected()
     */
    @Override
    public void onNetConnected() {
        //可以注释掉
        LogUtils.d(TAG, "onNetConnected called");
        toast.showLong("注意，网络已连接");
        
        if (!XmppHelper.WasAuthenticated()) {
            String dwID = DecentWorldApp.getInstance().getDwID();
            String username = DecentWorldApp.getInstance().getUserName();
            String password = DecentWorldApp.getInstance().getPassword();
            connectedOpenFire(username, dwID, password);
        }
    }

    /**
     * 一旦网络重新连接，必须执行XMPP连接服务
     * @param username
     * @param dwID2
     * @param password
     */
    private void connectedOpenFire(String username, String dwID2, String password) {
        ConnectOpenFireTask task = new ConnectOpenFireTask();
        task.execute(username,dwID2,password);
        task.setOnConnectOpenFireListener(this);
    }

    /*
     * (non-Javadoc)
     * @see cn.sx.decentworld.broadcast.OnNetChangeListener#onNetDisconnected()
     */
    @Override
    public void onNetDisconnected() {
        LogUtils.d(TAG, "onNetDisconnected called");
        toast.showLong("注意，网络已断开");
        //TODO 类似QQ在上面显示一个异常网络的横条,同时有必要的话，可以在这里执行XMPP服务的断开操作
    }

    /* (non-Javadoc)
     * @see cn.sx.decentworld.listener.onConnectOpenFireListener#onConnetedOpenFire(int)
     */
    @Override
    public void onConnetedOpenFire(int state) {
        if (state == ConnectOpenFireTask.SUCCESS) {
            LogUtils.i(TAG, "MainActivity ConnectOpenFire SUCCESS");
            //这样就能保证网络连接之后，就会请求到最新的数据
            //从服务器获取好友列表，TODO：这个地方还是有问题，handler这两个地方没有页面的刷新回调，为什么这么麻烦用handler？？
            getFriendInfo.getContactUsersList(dwID);
            // 获取用户详细信息并保存到数据库中
            getUserInfo.getUserInfo(dwID, handler, HANDLER_GET_USER_INFO);
            // 获取用户详细信息权限并保存到数据库中
            getUserInfo.getUserInfoAuth(dwID, handler, HANDLER_GET_USER_INFO_AUTH);
            
            //TODO 这里还需要执行的功能：通知所有的显示界面进行刷新
        } else {
            LogUtils.i(TAG, "MainActivity ConnectOpenFire FAILURE");
            Intent intent = new Intent(this, LoginActivity.class);
            startActivity(intent);
            finish();
        }
    }
}
