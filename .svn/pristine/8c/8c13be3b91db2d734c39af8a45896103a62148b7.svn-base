/**
 * 
 */
package cn.sx.decentworld.service;

import java.util.Collection;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.IBinder;

import org.jivesoftware.smack.PacketCollector;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.packet.Message;

import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.filter.PacketCollectorType;
import cn.sx.decentworld.task.*;
import cn.sx.decentworld.utils.LogUtils;

/**
 * @ClassName: PackageListenerService.java
 * @Description:
 * @author: cj
 * @date: 2015年9月22日 下午4:05:47
 */
public class PacketListenerService extends Service {
	public static final String TAG = "PacketListenerService";
	private XMPPConnection con;
	private static final PacketListenerService instance = new PacketListenerService();
	private boolean isFirst = true;

	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

	@Override
	public void onCreate() {
		LogUtils.i(TAG, "onCreate");
		super.onCreate();
	}

	private int count = 0;

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		count++;
		LogUtils.i(TAG, "onStartCommand...count =" + count);
		if (isFirst) {
			LogUtils.i(TAG, "onStartCommand");
			con = DecentWorldApp.getInstance().getConnectionImpl();
			if (con.isConnected()) {
				LogUtils.i(TAG,
						"con is connected,开启一个Packet监听的服务...onStartCommand");

				startCollectorHandlerThread();
				isFirst = false;
			} else {
				LogUtils.i(TAG, "con is not connected,...onStartCommand");
			}

		}
		return super.onStartCommand(intent, flags, startId);
	}

	@Override
	public void onDestroy() {
		LogUtils.i(TAG, "关闭一个Packet监听的服务...onDestroy");
		super.onDestroy();
	}

	// 应用退出或者进入时执行
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
		LogUtils.i(TAG, "onConfigurationChanged()");
	}

	/**
	 * 开启线程
	 */
	private void startCollectorHandlerThread()
	{
		Collection<PacketCollector> collectors = con.getPacketCollectors();
		Context context = getApplicationContext();
		for (PacketCollector packetCollector : collectors)
		{
			new CollectorThreadStarter(packetCollector , context).start();
		}
	}
}
