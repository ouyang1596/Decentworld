/**
 * 
 */
package cn.sx.decentworld.engine;

import java.util.HashMap;
import java.util.List;

import org.simple.eventbus.EventBus;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.common.ConstantNet;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.common.NotifyByEventBus;
import cn.sx.decentworld.entity.SearchResult;
import cn.sx.decentworld.entity.dao.ContactUserDao;
import cn.sx.decentworld.entity.dao.DWMessageDao;
import cn.sx.decentworld.entity.dao.NewFriendDao;
import cn.sx.decentworld.entity.db.ContactUser;
import cn.sx.decentworld.entity.db.Conversation;
import cn.sx.decentworld.entity.db.DWMessage;
import cn.sx.decentworld.entity.db.NewFriend;
import cn.sx.decentworld.entity.db.NewFriend.Read;
import cn.sx.decentworld.logSystem.LogUtils;
import cn.sx.decentworld.manager.MomentManager;
import cn.sx.decentworld.manager.MsgNotifyManager;
import cn.sx.decentworld.manager.SelfInfoManager;
import cn.sx.decentworld.network.SendUrl;
import cn.sx.decentworld.network.SendUrl.HttpCallBack;
import cn.sx.decentworld.network.entity.ResultBean;
import cn.sx.decentworld.utils.ImageUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.android.volley.Request.Method;

/**
 * @ClassName: AddContactEngine.java
 * @Description: 添加联系人业务类
 * @author: cj
 * @date: 2016年3月22日 上午10:48:16
 */
public class ContactEngine
{
    public static final String TAG = "ContactEngine";
    public static ContactEngine instance = null;
    private SendUrl sendUrl;

    /**
     * 构造函数
     */
    private ContactEngine()
    {
        Context context = DecentWorldApp.getGlobalContext();
        sendUrl = new SendUrl(context);
    }

    // ////////////////////////////////////////获取实例///////////////////////////////////////////////////
    /**
     * 获取实例
     * 
     * @return
     */
    public static ContactEngine getInstance()
    {
        if (instance == null)
        {
            synchronized (ContactEngine.class)
            {
                if (instance == null)
                {
                    instance = new ContactEngine();
                }
            }
        }
        return instance;
    }
    
    
    public static void clear()
    {
        instance = null;
    }

    // ////////////////////////////////////////公有方法///////////////////////////////////////////////////

    /**
     * 添加好友
     * 
     * 
     * @param searchResult
     *            搜索结果
     * @param addReason
     *            添加理由
     * @param searchType
     *            搜索类型
     * @param addCallback
     *            回调
     */
    public void add(SearchResult searchResult, String addReason, String searchType, AddCallback addCallback)
    {
        if (ContactUserDao.query(searchResult.dwID) == null)
        {
            addFriend(searchResult, addReason, searchType, addCallback);
        }
        else
        {
            addCallback.onFailure("已经互为好友");
        }
    }

    /**
     * 接收到好友申请消息
     */
    public void addByOther(org.jivesoftware.smack.packet.Message message)
    {
        LogUtils.v(TAG, "addByOther() params:" + message.toString());
        JSONObject jsonObject = JSON.parseObject(message.getBody());
        String addReason = jsonObject.getString("addReason");
        String dwID = jsonObject.getString("dwID");
        String nickName = jsonObject.getString("nickName");
        String searchType = jsonObject.getString("searchType");
        float worth = Float.valueOf(jsonObject.getString("worth"));
        String icon = ImageUtils.getIconByDwID(dwID, ImageUtils.ICON_SMALL);
        // 判断数据库中是否有数据
        NewFriend newFriend = NewFriendDao.query(dwID);
        if (newFriend != null)
        {
            newFriend.setIsShown(0);
        }
        else
        {
            newFriend = new NewFriend();
            newFriend.setUsername(nickName);
            newFriend.setOtherID(dwID);
            newFriend.setIcon(icon);
            newFriend.setWorth(worth);
        }
        newFriend.setAddReason(addReason);
        newFriend.setMessageType(NewFriend.message_be_add);// 被添加
        newFriend.save();
        showRedPoint();
        MsgNotifyManager.getInstance().addFriend(MsgNotifyManager.NOTIFY_ADD_FRIEND_APPLY, nickName);
    }

    /**
     * 删除
     */
    public void delete(String otherID, DeleteCallback deleteCallback)
    {
        deleteFriend(otherID, deleteCallback);
    }

    /**
     * 被人删除,同时将对方从联系人列表中删除，并通知刷新
     */
    public void deleteByOther(String otherID)
    {
        LogUtils.v(TAG, "deleteByOther() params[otherID=" + otherID + "]");
        ContactUser contactUser = ContactUserDao.query(otherID);
        if (contactUser != null)
        {
            contactUser.delete();
            EventBus.getDefault().post(otherID, NotifyByEventBus.NT_REFRESH_CONTACT);
        }

        // 将将该人的会话列表移动到陌生人处
        List<Conversation> conversationList = Conversation.queryByDwID(otherID, DWMessage.CHAT_RELATIONSHIP_FRIEND);
        if (conversationList.size() > 0)
        {
            for (Conversation temp : conversationList)
            {
                temp.setChatRelationship(DWMessage.CHAT_RELATIONSHIP_STRANGER);
                temp.save();
            }
            ConversationEngine.getInstance().reloadConversation("【被人删除，更新陌生人会话列表】");
        }
        // 删除朋友圈
        MomentManager.getInstance().afterDeleteContact(otherID);
    }

    /**
     * 同意好友请求
     * 
     * @param otherID
     * @param acceptCallback
     */
    public void accept(String otherID, AcceptCallback acceptCallback)
    {
        acceptFriend(otherID, acceptCallback);
    }

    /**
     * 对方同意好友申请
     */
    public void acceptByOther(org.jivesoftware.smack.packet.Message message)
    {
        String body = message.getBody();
        JSONObject jsonObject = JSON.parseObject(body);
        String fromDwId = jsonObject.getString("id");
        // 生成一个联系人记录
        ContactUser user = new ContactUser();
        user.setGender(jsonObject.getString("gender"));
        user.setFriendID(jsonObject.getString("id"));
        user.setOccupation(jsonObject.getString("occupation"));
        user.setShowName(jsonObject.getString("showName"));
        user.setUserType(jsonObject.getIntValue("userType"));
        user.setWorth(jsonObject.getFloatValue("worth"));
        user.save();
        // 添加好友声音提示
        MsgNotifyManager.getInstance().addFriend(MsgNotifyManager.NOTIFY_ADD_FRIEND_AGREE, user.getShowName());
        // 新朋友列表
        NewFriend newFriend = NewFriendDao.query(fromDwId);
        if (newFriend != null)
        {
            newFriend.setIsShown(Read.YES.getIndex());
            newFriend.setMessageType(NewFriend.message_add_success);
            newFriend.save();
        }
        // 将陌生人处的会话列表移动到好友处（可能有陌生人单聊、陌生人匿名消息）
        List<Conversation> conversationList = Conversation.queryByDwID(fromDwId, DWMessage.CHAT_RELATIONSHIP_STRANGER);
        if (conversationList != null && conversationList.size() > 0)
        {
            for (Conversation temp : conversationList)
            {
                temp.setChatRelationship(DWMessage.CHAT_RELATIONSHIP_FRIEND);
                temp.save();
            }
            ConversationEngine.getInstance().reloadConversation("【同意加为好友回执，更新陌生人会话列表】");
        }
        // 路由到ChatFragment(更新新的朋友Item)
        EventBus.getDefault().post("", NotifyByEventBus.NT_SHOW_FRIENDS_ADDED);
        // 路由到ChatFragment（好友列表）
        EventBus.getDefault().post(fromDwId, NotifyByEventBus.NT_REFRESH_CONTACT);
        // 已经添加对方为好友，生成一条通知消息记录（DWMessage）保存到数据库
        DWMessageDao.addedNewFriend(user.getFriendID());
    }

    /**
     * 拒绝好友申请
     * 
     * @param otherID
     * @param refuseCallback
     */
    public void refuse(String otherID, RefuseCallback refuseCallback)
    {
        refuseFriend(otherID, refuseCallback);
    }

    /**
     * 对方拒绝好友申请
     */
    public void refuseByOther(String fromDwId)
    {
        NewFriend newFriend = NewFriendDao.query(fromDwId);
        if (newFriend != null)
        {
            newFriend.setIsShown(1);
            newFriend.setMessageType(NewFriend.message_add_fail);
            newFriend.save();
            // 路由到ChatFragment(更新新的朋友Item)
            EventBus.getDefault().post("", NotifyByEventBus.NT_SHOW_FRIENDS_ADDED);
            MsgNotifyManager.getInstance().addFriend(MsgNotifyManager.NOTIFY_ADD_FRIEND_REFUSE, newFriend.getUsername());
        }
        else
        {
            LogUtils.e(TAG, "refuseByOther() 数据库中没有指定联系人[" + fromDwId + "]" + "的数据");
        }
    }

    /**
     * 修改备注
     * 
     * @param contactID
     * @param remark
     */
    public void setRemark(String otherID, String remark, SetRemarkCallback setRemarkCallback)
    {
        setContactRemark(otherID, remark, setRemarkCallback);
    }

    /**
     * 显示小红点
     */
    public void showRedPoint()
    {
        int newfriend_count = NewFriendDao.queryUnShow();
        // 将消息路由到ChatFragment,显示小红点
        EventBus.getDefault().post(newfriend_count, NotifyByEventBus.NT_SHOW_FRIENDS_ADDED);
        /** Tab处小红点 **/
        EventBus.getDefault().post(newfriend_count, NotifyByEventBus.NT_UNREAD_CONTACT_COUNT);
    }

    /**
     * 添加系统推荐且不在联系人列表中的人为好友
     * 
     * @param otherID
     *            对方ID
     * @param remark
     *            对方的名字
     * @param addReason
     *            添加理由
     * @param addCallback
     *            回调
     */

    public void addWithRemark(String otherID, String remark, String addReason, final AddCallback addCallback)
    {
        addContactWithRemark(otherID, remark, addReason, addCallback);

    }

    /**
     * 添加好友回调
     */
    public interface AddCallback
    {
        public void onSuccess(String info);

        public void onFailure(String cause);
    }

    /**
     * 删除好友回调
     */
    public interface DeleteCallback
    {
        public void onSuccess(String info);

        public void onFailure(String cause);
    }

    /**
     * 同意好友回调
     */
    public interface AcceptCallback
    {
        public void onSuccess(String info);

        public void onFailure(String cause);
    }

    /**
     * 同意好友回调
     */
    public interface RefuseCallback
    {
        public void onSuccess(String info);

        public void onFailure(String cause);
    }

    /**
     * 同意好友回调
     */
    public interface SetRemarkCallback
    {
        public void onSuccess(String info);

        public void onFailure(String cause);
    }

    // ////////////////////////////////////////私有方法///////////////////////////////////////////////////

    /**
     * 发送通知
     * 
     * @param handler
     * @param what
     * @param info
     */
    private void sendHandlerMsg(Handler handler, int what, Object info)
    {
        android.os.Message message = android.os.Message.obtain();
        message.what = what;
        message.obj = info;
        handler.sendMessage(message);
    }

    /**
     * 申请加为好友接口
     */
    private void addFriend(final SearchResult searchResult, final String addReason, String searchType, final AddCallback addCallback)
    {
        final String friendID = searchResult.dwID;
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                String info = msg.obj.toString();
                switch (msg.what)
                {
                    case -1:
                        addCallback.onFailure(info);
                        break;
                    case 1:
                        addCallback.onFailure(info);
                        break;
                    case 0:
                        // 构造一个对象并保存
                        NewFriend newFriend = NewFriendDao.query(friendID);
                        if (newFriend != null)
                        {
                            newFriend.setMessageType(NewFriend.message_had_apply);
                            newFriend.setAddReason(addReason);
                            newFriend.setIsShown(1);
                        }
                        else
                        {
                            newFriend = new NewFriend();
                            newFriend.setUsername(searchResult.name);
                            newFriend.setOtherID(searchResult.dwID);
                            newFriend.setWorth(Float.valueOf(searchResult.worth));
                            newFriend.setAddReason(addReason);
                            newFriend.setMessageType(NewFriend.message_had_apply);
                            newFriend.setIsShown(1);
                        }
                        newFriend.save();
                        addCallback.onSuccess(info);
                        break;
                    default:
                        break;
                }
            };
        };
        String dwID = DecentWorldApp.getInstance().getDwID();
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("friendID", friendID);
        map.put("searchType", searchType);
        map.put("addReason", addReason);
        LogUtils.v(TAG, "addFriend() params:" + JSON.toJSONString(map));
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_ADD_FRIEND, Method.GET, new HttpCallBack()
        {
            @Override
            public void onFailure(String e)
            {
                LogUtils.e(TAG, "addFriend() onFailure,cause by:" + e);
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }

            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.v(TAG, "addFriend() response:" + response);
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.v(TAG, "addFriend() success");
                    // 更新身家
                    String jsonStr = msg.getData().toString();
                    JSONObject jsonObject = JSON.parseObject(jsonStr);
                    Float wealth = jsonObject.getFloat("wealth");
                    SelfInfoManager.getInstance().notifyWealthChanged(wealth);
                    sendHandlerMsg(handler, 0, "申请已发送");
                }

                if (msg.getResultCode() == 3333)
                {
                    LogUtils.v(TAG, "addFriend() failure，cause by:" + msg.getMsg());
                    /** 你不能添加自己为好友 **/
                    sendHandlerMsg(handler, 1, msg.getMsg());
                }
            }
        });
    }

    /**
     * 删除好友
     * 
     * @param strangerID
     * @param friendID
     * @param handler
     * @param requestCode
     */
    private void deleteFriend(final String friendID, final DeleteCallback deleteCallback)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                String info = msg.obj.toString();
                switch (msg.what)
                {
                    case -1:
                        deleteCallback.onFailure(info);
                        break;
                    case 1:
                        deleteCallback.onFailure(info);
                        break;
                    case 0:
                        afterDeleteContact(friendID, info, deleteCallback);
                        break;
                    default:
                        break;
                }
            };
        };
        String dwID = DecentWorldApp.getInstance().getDwID();
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("friendID", friendID);
        LogUtils.v(TAG, "deleteFriend() params:" + JSON.toJSONString(map));
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_DELETE_FRIEND, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.v(TAG, "deleteFriend() response:" + response);
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.v(TAG, "deleteFriend() success");
                    sendHandlerMsg(handler, 0, "删除成功");
                }
                if (msg.getResultCode() == 3333)
                {
                    LogUtils.w(TAG, "deleteFriend() failure,cause by:" + msg.getMsg());
                    sendHandlerMsg(handler, 1, "删除好友失败");
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.e(TAG, "deleteFriend() onFailure,cause by:" + e);
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }
        });
    }

    /**
     * 删除联系人后的处理
     */
    private void afterDeleteContact(String friendID, String info, DeleteCallback deleteCallback)
    {
        // 将指定ID好友从数据库中删除，并刷新列表
        ContactUser user = ContactUserDao.query(friendID);
        if (user != null)
            user.delete();
        // 将好友的会话列表移到陌生人处
        List<Conversation> conversationList = Conversation.queryByDwID(friendID, DWMessage.CHAT_RELATIONSHIP_FRIEND);
        if (conversationList.size() > 0)
        {
            for (Conversation t : conversationList)
            {
                t.setChatRelationship(DWMessage.CHAT_RELATIONSHIP_STRANGER);
                t.save();
            }
            ConversationEngine.getInstance().reloadConversation("【删除好友，通知陌生人页面更新会话列表】");
        }
        // 删除朋友圈
        MomentManager.getInstance().afterDeleteContact(friendID);
        deleteCallback.onSuccess(info);
    }

    /**
     * 同意添加为好友
     * 
     * @param strangerID
     * @param friendID
     */
    private void acceptFriend(final String friendID, final AcceptCallback acceptCallback)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                String info = msg.obj.toString();
                switch (msg.what)
                {
                    case -1:
                        acceptCallback.onFailure(info);
                        break;
                    case 1:
                        acceptCallback.onFailure(info);
                        break;
                    case 0:
                        NewFriend friend = NewFriendDao.query(friendID);
                        friend.setMessageType(NewFriend.message_had_add);
                        friend.setIsShown(1);
                        friend.save();
                        EventBus.getDefault().post(friend, NotifyByEventBus.NT_UPDATE_NEW_FRIEND_LIST);
                        acceptCallback.onSuccess(info);
                        break;
                    default:
                        break;
                }
            };
        };

        String dwID = DecentWorldApp.getInstance().getDwID();
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("friendID", friendID);
        LogUtils.v(TAG, "acceptFriend() params:" + JSON.toJSONString(map));
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_ACCEPT_FRIEND, Method.GET, new HttpCallBack()
        {
            @Override
            public void onFailure(String e)
            {
                LogUtils.e(TAG, "acceptFriend() onFailure,cause by:" + e);
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }

            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.v(TAG, "acceptFriend() response:" + response);
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.v(TAG, "acceptFriend() success");
                    JSONObject jsonObject = JSON.parseObject(msg.getData().toString());
                    String versionNum = jsonObject.getString("versionNum");
                    // TODO 保存versionNUm
                    sendHandlerMsg(handler, 0, "同意成功");
                }

                if (msg.getResultCode() == 3333)
                {
                    LogUtils.v(TAG, "acceptFriend() failure,cause by:" + msg.getMsg());
                    sendHandlerMsg(handler, 1, "同意失败");
                }
            }
        });
    }

    /**
     * 拒绝加为好友
     * 
     * @param strangerID
     * @param friendID
     */
    private void refuseFriend(final String friendID, final RefuseCallback refuseCallback)
    {

        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                String info = msg.obj.toString();
                switch (msg.what)
                {
                    case -1:
                        refuseCallback.onFailure(info);
                        break;
                    case 1:
                        refuseCallback.onFailure(info);
                        break;
                    case 0:
                        NewFriend friend = NewFriendDao.query(friendID);
                        friend.setMessageType(NewFriend.message_had_refused);
                        friend.save();
                        EventBus.getDefault().post(friend, NotifyByEventBus.NT_UPDATE_NEW_FRIEND_LIST);
                        refuseCallback.onSuccess(info);
                        break;
                    default:
                        break;
                }
            };
        };

        String dwID = DecentWorldApp.getInstance().getDwID();
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("friendID", friendID);
        LogUtils.v(TAG, "refuseFriend() params：" + JSON.toJSONString(map));
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_REFUSE_FRIEND, Method.GET, new HttpCallBack()
        {
            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "refuseFriend() onFailure,cause by:" + e);
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }

            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "refuseFriend() response:" + response);
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "refuseFriend() success");
                    sendHandlerMsg(handler, 0, "拒绝成功");
                }

                if (msg.getResultCode() == 3333)
                {
                    LogUtils.i(TAG, "refuseFriend() failure,cause by:" + msg.getMsg());
                    sendHandlerMsg(handler, 1, "拒绝失败");
                }
            }

        });
    }

    /**
     * 设置备注
     * 
     * @param strangerID
     * @param friendID
     * @param remark
     * @param handler
     * @param requestCode
     */
    private void setContactRemark(final String friendID, final String remark, final SetRemarkCallback setRemarkCallback)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                String info = msg.obj.toString();
                switch (msg.what)
                {
                    case -1:
                        setRemarkCallback.onFailure(info);
                        break;
                    case 1:
                        setRemarkCallback.onFailure(info);
                        break;
                    case 0:
                        afterSetRemark(friendID, remark);
                        setRemarkCallback.onSuccess(info);
                        break;
                    default:
                        break;
                }
            };
        };

        String dwID = DecentWorldApp.getInstance().getDwID();
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("friendID", friendID);
        map.put("remark", remark);
        LogUtils.v(TAG, "setContactRemark() params:" + JSON.toJSONString(map));
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_SET_REMARK, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.v(TAG, "setContactRemark() response:" + response);
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.v(TAG, "setContactRemark() success");
                    sendHandlerMsg(handler, 0, "设置备注成功");
                }
                if (msg.getResultCode() == 3333)
                {
                    LogUtils.e(TAG, "setContactRemark() response:" + response);
                    sendHandlerMsg(handler, 1, "设置备注失败");
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.e(TAG, "setContactRemark() onFailure,caused by:" + e);
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }
        });
    }

    /**
     * 设置备注后的处理
     */
    private void afterSetRemark(String friendID, String remark)
    {
        LogUtils.v(TAG, "afterSetRemark() params[friendID=" + friendID + ",remark=" + remark + "]");
        // 修改会话列表
        Conversation temp = Conversation.queryByDwID(friendID, DWMessage.CHAT_TYPE_SINGLE, DWMessage.CHAT_RELATIONSHIP_FRIEND);
        if (temp != null)
        {
            temp.setTitle(remark);
            temp.save();
            ConversationEngine.getInstance().reloadConversation("【修改完备注】");
        }
        // 修改指定ID好友数据库 ，并刷新列表
        ContactUser contactUser = ContactUserDao.query(friendID);
        if (contactUser != null)
        {
            contactUser.setShowName(remark);
            contactUser.save();
        }
    }

    /**
     * 添加系统推荐且不在联系人列表中的人为好友
     */
    private void addContactWithRemark(String otherID, String remark, String addReason, final AddCallback addCallback)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                String info = msg.obj.toString();
                switch (msg.what)
                {
                    case -1:
                        addCallback.onFailure(info);
                        break;
                    case 1:
                        addCallback.onFailure(info);
                        break;
                    case 0:
                        addCallback.onSuccess(info);
                        break;
                    default:
                        break;
                }
            };
        };

        String dwID = DecentWorldApp.getInstance().getDwID();
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("friendID", otherID);
        map.put("remark", remark);
        map.put("addReason", addReason);
        LogUtils.v(TAG, "addContactWithRemark() params:" + JSON.toJSONString(map));
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_ADD_FRIEND_CONTACT, Method.POST, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.v(TAG, "addContactWithRemark() response:" + response);
                if (2222 == msg.getResultCode())
                {
                    LogUtils.v(TAG, "addContactWithRemark() successs");
                    sendHandlerMsg(handler, 0, "申请已发送");
                }
                else
                {
                    LogUtils.w(TAG, "addContactWithRemark() failure,cause by:" + "添加好友失败");
                    sendHandlerMsg(handler, 1, "添加好友失败");
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.e(TAG, "addContactWithRemark() onFailure,cause by:" + e);
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }
        });
    }

}
