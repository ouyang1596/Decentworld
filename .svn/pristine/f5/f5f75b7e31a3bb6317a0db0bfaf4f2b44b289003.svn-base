package cn.sx.decentworld.activity;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.jivesoftware.smack.packet.Presence;
import org.simple.eventbus.EventBus;
import org.simple.eventbus.Subscriber;
import org.simple.eventbus.ThreadMode;

import android.content.AsyncQueryHandler;
import android.content.ContentResolver;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.ContactsContract;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.util.DisplayMetrics;
import android.view.View;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.R;
import cn.sx.decentworld.adapter.ViewPagerAdapter;
import cn.sx.decentworld.bean.DWMessage;
import cn.sx.decentworld.bean.DisplayAuthority;
import cn.sx.decentworld.bean.MsgAndInfo;
import cn.sx.decentworld.bean.NotifyByEventBus;
import cn.sx.decentworld.bean.UserInfo;
import cn.sx.decentworld.bean.UserSessionInfo;
import cn.sx.decentworld.bean.manager.UserInfoManager;
import cn.sx.decentworld.broadcast.NetStateReceiver;
import cn.sx.decentworld.broadcast.OnNetChangeListener;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.common.CrashHandler;
import cn.sx.decentworld.common.DWViewPager;
import cn.sx.decentworld.common.LocationProvider;
import cn.sx.decentworld.component.KeyboardComponent;
import cn.sx.decentworld.component.ToastComponent;
import cn.sx.decentworld.component.ui.MainFragmentComponent;
import cn.sx.decentworld.fragment.ChatFragment;
import cn.sx.decentworld.fragment.ChatFragment_;
import cn.sx.decentworld.fragment.NewsFragment;
import cn.sx.decentworld.fragment.NewsFragment_;
import cn.sx.decentworld.fragment.StrangerFragment;
import cn.sx.decentworld.fragment.StrangerFragment_;
import cn.sx.decentworld.listener.onConnectOpenFireListener;
import cn.sx.decentworld.network.request.GetFriendInfo;
import cn.sx.decentworld.network.request.GetUserInfo;
import cn.sx.decentworld.network.utils.JsonUtils;
import cn.sx.decentworld.service.LocationService;
import cn.sx.decentworld.service.PacketListenerService;
import cn.sx.decentworld.task.ConnectOpenFireTask;
import cn.sx.decentworld.utils.ExitAppUtils;
import cn.sx.decentworld.utils.ImageLoaderHelper;
import cn.sx.decentworld.utils.LogUtils;
import cn.sx.decentworld.utils.NetworkUtils;
import cn.sx.decentworld.utils.SettingSp;
import cn.sx.decentworld.utils.SoundPoolUtils;
import cn.sx.decentworld.utils.UpgradeVersion;
import cn.sx.decentworld.utils.XmppHelper;
import cn.sx.decentworld.widget.CubeTransformer;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.googlecode.androidannotations.annotations.AfterViews;
import com.googlecode.androidannotations.annotations.Bean;
import com.googlecode.androidannotations.annotations.EActivity;
import com.googlecode.androidannotations.annotations.ViewById;
import com.lidroid.xutils.HttpUtils;
import com.lidroid.xutils.exception.HttpException;
import com.lidroid.xutils.http.ResponseInfo;
import com.lidroid.xutils.http.callback.RequestCallBack;

/**
 * @author yj
 * @ClassName: MainActivity
 * @Description: 主界面
 * @date 2015年6月29日12:34:03
 */
@EActivity(R.layout.activity_main)
public class MainActivity extends BaseFragmentActivity implements
		OnNetChangeListener, onConnectOpenFireListener {
	private static final String TAG = "MainActivity";
	public static final int STRANGER_INDEX = 0;
	public static final int CHAT_INDEX = 1;
	public static final int NEWS_INDEX = 2;
	@ViewById(R.id.main_viewpager)
	public static DWViewPager main_viewpager;
	@Bean
	ToastComponent toast;
	@Bean
	GetUserInfo getUserInfo;
	@Bean
	GetFriendInfo getFriendInfo;
	@Bean
	MainFragmentComponent mainComponent;

	private List<Fragment> fragmentsList;
	/** 聊天室的Fragment */
	private NewsFragment news;
	/** 陌生人的Fragment */
	private StrangerFragment stranger;
	/** 含有主界面四个模块的Fragment */
	private ChatFragment chat;

	private ViewPagerAdapter fragmentAdapter;
	public String dwID = DecentWorldApp.getInstance().getDwID();
	private android.app.AlertDialog.Builder conflictBuilder;

	/** -1 未完成、 1 加载了一个、2 加载完成 **/
	private int userInfoLoadProcess = 0;
	private long firstTime = 0;
	private static UserInfo userInfo = null;

	// <<<<<<< .mine
	private static final int HANDLER_GET_USER_INFO = 1;// 获取用户的信息并返回
	private static final int HANDLER_GET_USER_INFO_AUTH = 2;// 获取用户的信息对外显示权限并返回
	private static final int HANDLER_GET_USER_LIST = 3;// 获取用户好友列表
	Handler handler = new Handler() {
		public void handleMessage(Message msg) {
			LogUtils.i(TAG, "从网络加载数据回调：msg.what=" + msg.what);
			switch (msg.what) {
			case HANDLER_GET_USER_INFO:
				if (msg.arg1 == 1) {
					LogUtils.i(TAG, "从网络请求等到个人信息，解析保存到数据库和内存中，网络获取的数据为："
							+ msg.obj.toString());
					JSONObject json = JSON.parseObject(msg.obj.toString());
					JSONObject info = json.getJSONObject("userInfo");
					userInfo = UserInfo.queryByDwID(dwID);
					if (userInfo != null) {
						userInfo.delete();
					}
					userInfo = JsonUtils.json2Bean(info.toString(),
							UserInfo.class);
					userInfo.setUserId(dwID);
					// 将个人信息保存到数据库中
					userInfo.save();
					// 将个人信息保存到内存中
					UserInfoManager.initUserInfo(userInfo);
				}
				userInfoLoadProcess++;
				break;
			case HANDLER_GET_USER_INFO_AUTH:
				if (msg.arg1 == 1) {
					LogUtils.i(TAG, "获取用户信息权限成功");
					JSONObject jsonAuth = JSON.parseObject(msg.obj.toString());
					JSONObject authInfo = jsonAuth.getJSONObject("displayAuth");
					DisplayAuthority displayAuth = DisplayAuthority
							.queryByDwID(dwID);
					LogUtils.i(TAG, "用户信息权限为："
							+ (authInfo == null ? null : authInfo.toString()));
					if (displayAuth != null) {
						displayAuth.delete();
					}
					if (authInfo == null) {
						LogUtils.e(TAG, "用户验证权限为null");
						return;
					}
					DisplayAuthority displayAuthority = JsonUtils.json2Bean(
							authInfo.toString(), DisplayAuthority.class);
					displayAuthority.save();
				}
				userInfoLoadProcess++;
				break;
			case HANDLER_GET_USER_LIST:
				userInfoLoadProcess++;
				break;
			}

			/** 表示加载数据完成 **/
			if (userInfoLoadProcess == 3) {
				loadDataCompleted();
			}
		}
	};

	private Handler getContactHandle = new Handler() {
		public void handleMessage(Message msg) {
			Intent intent = new Intent(mContext, ContactActivity_.class);
			intent.putExtra(ContactActivity.JSON_DATA, msg.obj.toString());
			startActivity(intent);
		};
	};
	/**
	 * 网络状态广播
	 */
	private NetStateReceiver netStateReceiver;

	/**
	 * 初始化
	 */
	@AfterViews
	public void init() {
		LogUtils.i(TAG, "init");
		EventBus.getDefault().register(this);// 注册订阅事件
		/** 加载用户数据 **/
		loadUserData();
	}

	/**
	 * 加载用户数据
	 */
	private void loadUserData() {
		if (NetworkUtils.isNetWorkConnected(MainActivity.this)) {
			LogUtils.i(TAG, "有网络，从网络加载数据");
			loadNetData();
		} else {
			LogUtils.i(TAG, "没有网络，从本地加载数据");
			loadLocalData();
			loadDataCompleted();
		}
	}

	/**
	 * 加载本地数据
	 */
	private void loadLocalData() {
		// 从本地数据库加载用户的个人信息，权限信息，联系人列表

	}

	/**
	 * 注册网络变化的监听
	 */
	private void registerDateTransReceiver() {
		if (netStateReceiver == null) {
			netStateReceiver = new NetStateReceiver();
			// 为网络变化加入回调监听
			netStateReceiver.setOnNetChangeListener(this);
			IntentFilter filter = new IntentFilter();
			filter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
			filter.setPriority(1000);
			registerReceiver(netStateReceiver, filter);
		}
	}

	/**
	 * 检查是否有新的版本
	 */
	private void checkVersion() {
		/** 如果有网，则进行网络升级检查 **/
		if (NetworkUtils.isNetWorkConnected(MainActivity.this)) {
			/**
			 * 检查是否满足更新的条件
			 */
			if (SettingSp.isUpdate(MainActivity.this)) {
				new UpgradeVersion(MainActivity.this);
			}
		}
	}

    /**
     * 获取用户信息完成，加载界面
     */
    private void loadDataCompleted()
    {
        /** 保存屏幕宽度 **/
        Constants.screenWidth = getDisplayWidth();
        /** 初始化三个旋转页面 **/
        initFragment();
        /** 2s之后开启消息监听服务 **/
        new Handler().postDelayed(new Runnable()
        {
            @Override
            public void run()
            {
                restartListenerService("");
            }
        }, 2000);
        startLocationService();
        checkVersion();
        registerDateTransReceiver();
        asyncQueryHandler = new MyAsyncQueryHandler(getContentResolver());
        queryDataBase();
        /** 初始化完成，向服务器发送上线的通知 **/
        DecentWorldApp.getInstance().setMainActivityInit(true);
        try
        {
            XmppHelper.getConn().sendPacket(new Presence(Presence.Type.available));
        }
        catch (Exception e)
        {
            CrashHandler.getInstance().setExtraInfo(TAG+"连接异常=",""+e.toString() );
            LogUtils.e(TAG, ""+e);
        }
        finally
        {
            //显示网络异常
            chat.errorText.setVisibility(View.VISIBLE);
        }
    }
	public void startLocationService() {
		Intent intent = new Intent(this, LocationService.class);
		startService(intent);
	}


	/**
	 * 开启服务
	 */
	@Subscriber(tag = NotifyByEventBus.NT_START_SERVICE)
	public void startListenerService() {
		LogUtils.i(TAG, "开启服务");
	}

	/**
	 * 接收貌推送
	 */
	@Subscriber(tag = NotifyByEventBus.NT_CHECK_BEAUTIFY)
	public void receiveCheckBeautify(String data) {
		try {
			org.json.JSONObject object = new org.json.JSONObject(data);
			Intent intent = new Intent(this, ExamineActivity_.class);
			intent.putExtra("sex", object.getString("sex"));
			intent.putExtra("dwID", object.getString("dwID"));
			intent.putExtra("name", object.getString("name"));
			intent.putExtra("amount", object.getString("amount"));
			startActivity(intent);
		} catch (org.json.JSONException e) {
			toast.show("解析失败");
		}
	}

	/**
	 * 关闭服务
	 */
	@Subscriber(tag = NotifyByEventBus.NT_STOP_SERVICE)
	public void stopListenerService(String tag) {
		// stopService(new Intent(MainActivity.this,
		// PacketListenerService.class));
		// startService(new Intent(MainActivity.this,
		// PacketListenerService.class));
		LogUtils.i(TAG, "重启服务");
	}

	/**
	 * 重启服务
	 */
	@Subscriber(tag = NotifyByEventBus.NT_RESTART_SERVICE)
	public void restartListenerService(String tag) {
		LogUtils.i(TAG, "重启服务");
		startService(new Intent(MainActivity.this, PacketListenerService.class));
	}

	/**
	 * 获取手机屏幕的参数
	 *
	 * @return
	 */
	private int getDisplayWidth() {
		DisplayMetrics metric = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(metric);
		int width = metric.widthPixels; // 屏幕宽度（像素）
		int height = metric.heightPixels;
		return width;
	}

	/**
	 * 初始化主页各个fragment
	 */
	private void initFragment() {
		// 初始化主页的3个Tab界面
		news = new NewsFragment_();
		chat = new ChatFragment_();
		stranger = new StrangerFragment_();

		fragmentsList = new ArrayList<Fragment>();
		fragmentsList.add(stranger);
		fragmentsList.add(chat);
		fragmentsList.add(news);
		fragmentAdapter = new ViewPagerAdapter(getSupportFragmentManager(),
				fragmentsList);
		// 三维切换动画
		main_viewpager.setPageTransformer(true, new CubeTransformer());
		// 填充viewPager
		main_viewpager.setAdapter(fragmentAdapter);
		// 设置当前显示的界面
		main_viewpager.setCurrentItem(1);
		// 设置viewpager预加载的界面个数
		main_viewpager.setOffscreenPageLimit(1);
		// 监听viewpager当前切换到哪个fragment
		main_viewpager.setOnPageChangeListener(new OnPageChangeListener() {
			@Override
			public void onPageSelected(int arg0) {
				LogUtils.i(TAG, "onPageSelected...选择的page=" + arg0);
				if (arg0 == 0) {
					// StrangerFragment fragment = (StrangerFragment)
					// fragmentsList
					// .get(0);
					// fragment.initRequest();
				} else if (arg0 == 1) {
					if (DecentWorldApp.ifFromAppOwner) {
						chat.switchScrollLayoutView(3);
						DecentWorldApp.ifFromAppOwner = false;
					}
				} else if (arg0 == 2) {
					if (DecentWorldApp.ifFixed) {
						news.adapter
								.requestEnterChatRoom(DecentWorldApp.chatRoomInfo);
					}
				}
			}

			@Override
			public void onPageScrolled(int arg0, float arg1, int arg2) {
				// 当页面滑动过程中会一直调用
				// arg0 :当前页面，即你点击滑动的页面
				// arg1 :当前页面偏移的百分比
				// arg2 :当前页面偏移的像素
				// LogUtils.i(TAG, "onPageScrolled...arg0=" + arg0 + ",arg1="
				// + arg1 + ",arg2=" + arg2);
			}

			@Override
			public void onPageScrollStateChanged(int arg0) {
				if (arg0 == 0) {
					// LogUtils.i(TAG, "onPageScrollStateChanged...什么都没有做");
				} else if (arg0 == 1) {
					// LogUtils.i(TAG, "onPageScrollStateChanged...正在滑动");
				} else if (arg0 == 2) {
					// LogUtils.i(TAG, "onPageScrollStateChanged...滑动完毕");
				}
			}
		});
	}

	@Override
	protected void onCreate(Bundle arg0) {
		super.onCreate(arg0);
		LogUtils.i(TAG, "onCreate");
	}

	@Override
	protected void onStart() {
		super.onStart();
		LogUtils.i(TAG, "onStart");

	}

	@Override
	protected void onResume() {
		super.onResume();
		LogUtils.i(TAG, "onResume");
		// 当创建聊天室成功之后，进入到聊天室列表的界面后刷新界面
		if (getIntent().getIntExtra("creatRoomSuccess", -1) == ChatRoomBuildActivity.CREATE_ROOM_SUCCESS) {
			LogUtils.i(TAG, "创建聊天室成功");
			news.turnToTab(getIntent().getIntExtra("creatRoomSuccess", -1));
		}
	}

	@Override
	protected void onPause() {
		super.onPause();
		LogUtils.i(TAG, "onPause");
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		super.onSaveInstanceState(outState);
		LogUtils.i(TAG, "onSaveInstanceState");
	}

	@Override
	protected void onStop() {
		super.onStop();
		LogUtils.i(TAG, "onStop");
	}

	@Override
	protected void onDestroy() {
		LogUtils.i(TAG, "onDestroy");
		EventBus.getDefault().unregister(this);
		LocationProvider.getInstance(this).stop();
		ImageLoaderHelper.clearCache();
		SoundPoolUtils.release();
		if (netStateReceiver != null) {
			unregisterReceiver(netStateReceiver);
		}
		super.onDestroy();
	}

	@Override
	public void onBackPressed() {
		if ((System.currentTimeMillis() - firstTime) > 2000) {
			toast.show("再按一次退出");
			firstTime = System.currentTimeMillis();
		} else {
			// LogUtils.i(TAG, "退出软件");
			// super.onBackPressed();
			backToDeskTop();
		}
	}

	/**
	 * 模拟HOME键，返回到桌面
	 * */
	private void backToDeskTop() {
		Intent intent = new Intent(Intent.ACTION_MAIN);
		intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);// 注意
		intent.addCategory(Intent.CATEGORY_HOME);
		startActivity(intent);
	}

	/**
	 * 返回保存在MainActivity中的UserInfo实例
	 *
	 * @return
	 */
	public static UserInfo getUserInfoInstance() {
		return userInfo;
	}

	@Override
	protected void onNewIntent(Intent intent) {
		super.onNewIntent(intent);
		setIntent(intent);
	}

	/**
	 * 接收冲突通知并处理
	 * 
	 * @param str
	 */
	@Subscriber(tag = NotifyByEventBus.NT_CRUSH_OFF_LINE, mode = ThreadMode.MAIN)
	public void conflictEvent(String str) {
		ExitAppUtils.getInstance().toMainActivity(getLocalClassName());
		if (!MainActivity.this.isFinishing()) {
			// clear up global variables
			try {
				if (conflictBuilder == null)
					conflictBuilder = new android.app.AlertDialog.Builder(
							MainActivity.this);
				conflictBuilder.setTitle("被挤下线");
				conflictBuilder.setMessage("内容：被挤下线");
				conflictBuilder.setPositiveButton("确定",
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
								conflictBuilder = null;
								mainComponent.loginout();
							}
						});
				conflictBuilder.setCancelable(false);
				conflictBuilder.create().show();
			} catch (Exception e) {

			}
		}
	}

	@Subscriber(tag = NotifyByEventBus.NT_OFF_LINE, mode = ThreadMode.MAIN)
	public void nt_offline(String str) {
		ExitAppUtils.getInstance().toMainActivity(getLocalClassName());
		if (!MainActivity.this.isFinishing()) {
			// clear up global variables
			try {
				if (conflictBuilder == null)
					conflictBuilder = new android.app.AlertDialog.Builder(
							MainActivity.this);
				conflictBuilder.setTitle("连接断开");
				conflictBuilder.setMessage("连接断开");
				conflictBuilder.setPositiveButton("确定",
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
								conflictBuilder = null;
								// mainComponent.loginout();
							}
						});
				conflictBuilder.setCancelable(false);
				conflictBuilder.create().show();
			} catch (Exception e) {

				// <<<<<<< .mine
			}
		}
	}

	@Subscriber(tag = NotifyByEventBus.NT_RECONNECT, mode = ThreadMode.MAIN)
	public void nt_reconnect(String str) {
		ExitAppUtils.getInstance().toMainActivity(getLocalClassName());
		if (!MainActivity.this.isFinishing()) {
			// clear up global variables
			try {
				if (conflictBuilder == null)
					conflictBuilder = new android.app.AlertDialog.Builder(
							MainActivity.this);
				conflictBuilder.setTitle("连接重连成功");
				conflictBuilder.setMessage("连接重连成功");
				conflictBuilder.setPositiveButton("确定",
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {
								dialog.dismiss();
								conflictBuilder = null;
								// mainComponent.loginout();
							}
						});
				conflictBuilder.setCancelable(false);
				conflictBuilder.create().show();
			} catch (Exception e) {

			}
		}
	}

	private HttpUtils httpUtils = new HttpUtils();

	@Subscriber(tag = NotifyByEventBus.NT_RECEIVE_SINGLE_AUDIO)
	public void receiveSingleAudio(MsgAndInfo msgAndInfo) {
		final DWMessage dwMessage = msgAndInfo.getDwMessage();
		final UserSessionInfo userSessionInfo = msgAndInfo.getUserSessionInfo();
		String fileName = System.currentTimeMillis() + ".mp3";
		LogUtils.i("bm", fileName);
		httpUtils.download(dwMessage.getUri(), Constants.HOME_PATH
				+ Constants.AUDIO_PATH + fileName, new RequestCallBack<File>() {
			@Override
			public void onSuccess(ResponseInfo<File> responseInfo) {
				LogUtils.e("bm",
						"fileName--" + responseInfo.result.getAbsolutePath());
				dwMessage.ifFromNet = 1;
				dwMessage.setLocalUrl(responseInfo.result.getAbsolutePath());
				dwMessage.save();
				if (dwMessage.getChatType() != DWMessage.CHAT_TYPE_MULTI) {
					// 朋友间单聊
					if (dwMessage.getChatRelationship() == DWMessage.CHAT_RELATIONSHIP_FRIEND) {
						LogUtils.i(TAG, "消息类型为单聊,发送更新消息列表的通知");
						EventBus.getDefault().post(
								new MsgAndInfo(dwMessage, userSessionInfo),
								NotifyByEventBus.NT_REFRESH_CONVERSATION);
					}
					if (dwMessage.getChatRelationship() == DWMessage.CHAT_RELATIONSHIP_STRANGER) {
						EventBus.getDefault()
								.post(new MsgAndInfo(dwMessage, userSessionInfo),
										NotifyByEventBus.NT_REFRESH_STRANGER_CONVERSATION);
					}
					EventBus.getDefault()
							.post(dwMessage,
									NotifyByEventBus.NT_UPDATE_CHAT_LISTVIEW_RECEIVE_MSG);
				}
			}

			@Override
			public void onFailure(HttpException error, String msg) {
				LogUtils.e("bm", "msg--" + msg);
			}
		});
	}

	@Subscriber(tag = NotifyByEventBus.NT_RECEIVE_CHATROOM_AUDIO)
	public void receiveChatRoomAudio(final DWMessage dwMessage) {
		String fileName = System.currentTimeMillis() + ".mp3";
		LogUtils.i("bm", fileName);
		httpUtils.download(dwMessage.getUri(), Constants.HOME_PATH
				+ Constants.AUDIO_PATH + fileName, new RequestCallBack<File>() {

			@Override
			public void onSuccess(ResponseInfo<File> responseInfo) {
				dwMessage.setLocalUrl(responseInfo.result.getAbsolutePath());
				dwMessage.ifFromNet = 1;
				EventBus.getDefault().post(dwMessage,
						NotifyByEventBus.NT_CHAT_ROOM_MSG);
			}

			@Override
			public void onFailure(HttpException error, String msg) {
				LogUtils.e("bm", "msg--" + msg);
			}
		});
	}

	@Override
	public void onNetConnected() {
		// 可以注释掉
		LogUtils.d(TAG, "onNetConnected called");
		loadNetData();
	}

	/**
	 * 一旦网络重新连接，必须执行XMPP连接服务
	 * 
	 * @param username
	 * @param dwID2
	 * @param password
	 */
	private void connectedOpenFire(String username, String dwID2,
			String password) {
		ConnectOpenFireTask task = new ConnectOpenFireTask();
		task.execute(username, dwID2, password);
		task.setOnConnectOpenFireListener(this);
	}

	@Override
	public void onNetDisconnected() {
		LogUtils.d(TAG, "onNetDisconnected called");
		toast.showLong("注意，网络已断开");
		// TODO 类似QQ在上面显示一个异常网络的横条,同时有必要的话，可以在这里执行XMPP服务的断开操作
	}

	@Override
	public void onConnetedOpenFire(int state) {
		if (state == ConnectOpenFireTask.SUCCESS) {
			LogUtils.i(TAG, "MainActivity ConnectOpenFire SUCCESS");
			loadNetData();
		} else {
			LogUtils.i(TAG, "MainActivity ConnectOpenFire FAILURE");
			Intent intent = new Intent(this, LoginActivity_.class);
			startActivity(intent);
			finish();
		}
	}

	/**
	 * 在有网络的情况下从网络加载数据
	 */
	private void loadNetData() {
		LogUtils.i(TAG, "从网络加载数据 ...loadNetData");
		/** 获取用户详细信息并保存到数据库中 **/
		getUserInfo.getUserInfo(dwID, handler, HANDLER_GET_USER_INFO);
		/** 获取用户详细信息权限并保存到数据库中 **/
		getUserInfo.getUserInfoAuth(dwID, handler, HANDLER_GET_USER_INFO_AUTH);
		/** 获取用户联系人列表 **/
		getFriendInfo.getContactUsersList(dwID, handler, HANDLER_GET_USER_LIST);
	}

	// -------------- 获取联系人列表并上传到服务器---------------------
	private AsyncQueryHandler asyncQueryHandler; // 异步查询数据库类对象

	/**
	 * 查询联系人数据库
	 */
	private void queryDataBase() {
		Uri uri = ContactsContract.CommonDataKinds.Phone.CONTENT_URI; // 联系人Uri；
		// 查询的字段
		String[] projection = { ContactsContract.CommonDataKinds.Phone._ID,
				ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME,
				ContactsContract.CommonDataKinds.Phone.DATA1, "sort_key",
				ContactsContract.CommonDataKinds.Phone.CONTACT_ID,
				ContactsContract.CommonDataKinds.Phone.PHOTO_ID,
				ContactsContract.CommonDataKinds.Phone.LOOKUP_KEY };
		// 按照sort_key升序查詢
		asyncQueryHandler.startQuery(0, null, uri, projection, null, null,
				"sort_key COLLATE LOCALIZED asc");
	}

	private HashMap<String, String> mapPhoneNumber;
	private StringBuilder sb;

	private class MyAsyncQueryHandler extends AsyncQueryHandler {

		public MyAsyncQueryHandler(ContentResolver cr) {
			super(cr);
		}

		@Override
		protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
			super.onQueryComplete(token, cookie, cursor);
			mapPhoneNumber = new HashMap<String, String>();
			sb = new StringBuilder();
			sb.append("[");
			if (cursor != null && cursor.getCount() > 0) {
				cursor.moveToFirst(); // 游标移动到第一项
				for (int i = 0; i < cursor.getCount(); i++) {
					cursor.moveToPosition(i);
					String phoneNumber = cursor.getString(2);
					if (!mapPhoneNumber.containsKey(phoneNumber)) {
						mapPhoneNumber.put(phoneNumber, phoneNumber);
						sb.append(phoneNumber + ",");
					}
				}
				sb.deleteCharAt(sb.length() - 1);
				sb.append("]");
				HashMap<String, String> map = new HashMap<String, String>();
				// map.put("phoneNums", data);
				map.put("phoneNums", sb.toString());
				getUserInfo.uploadContact(map, getContactHandle);
				LogUtils.i("bm", "phoneNumber---" + sb.toString());
			}
		}
	}
}
