/**
 * 
 */
package cn.sx.decentworld.engine;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.simple.eventbus.EventBus;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.bean.ContactUser;
import cn.sx.decentworld.bean.ConversationList;
import cn.sx.decentworld.bean.DWMessage;
import cn.sx.decentworld.bean.MsgAndInfo;
import cn.sx.decentworld.bean.NotifyByEventBus;
import cn.sx.decentworld.bean.UserSessionInfo;
import cn.sx.decentworld.common.ConstantNet;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.entity.MatchSuccessEntity;
import cn.sx.decentworld.network.SendUrl;
import cn.sx.decentworld.network.SendUrl.HttpCallBack;
import cn.sx.decentworld.network.entity.ResultBean;
import cn.sx.decentworld.network.utils.JsonUtils;
import cn.sx.decentworld.utils.AnonymityNickNameCreator;
import cn.sx.decentworld.utils.ImageUtils;
import cn.sx.decentworld.utils.LogUtils;
import cn.sx.decentworld.utils.NetworkUtils;

import com.activeandroid.query.Select;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.android.volley.Request.Method;

/**
 * @ClassName: ConversationEngine.java
 * @Description: 会话列表（单例）
 * @author: cj
 * @date: 2016年3月21日 上午10:14:57
 */
public class ConversationEngine
{
    public static final String TAG = "ConversationEngine";
    public static ConversationEngine instance = null;
    public static Object LOCK = new Object();
    /**
     * 好友
     */
    private List<ConversationList> friendConvList;
    private Map<String, ConversationList> friendConvMap;

    /**
     * 陌生人
     */
    private List<ConversationList> strangerConvList;
    private Map<String, ConversationList> strangerConvMap;

    // 将要移除的联系人的小红点
    private Set<String> friendCleanUnRead = new HashSet<String>();
    // 将要移除的陌生人的小红点
    private Set<String> strangerCleanUnRead = new HashSet<String>();

    /**
     * 构造函数
     */
    private ConversationEngine()
    {

    }

    /**
     * 获取实例
     * 
     * @return
     */
    public static ConversationEngine getInstance()
    {
        if (instance == null)
        {
            synchronized (LOCK)
            {
                if (instance == null)
                {
                    instance = new ConversationEngine();
                }
            }
        }
        return instance;
    }

    // ///////////////////////////////////////////////初始化好友会话列表...begin/////////////////////////////////////////////

    /**
     * 初始化好友会话列表
     */
    // public void initFriendConv(Context context, GetConvListCallback
    // getConvListCallback)
    // {
    // // 开辟内存存放好友会话列表
    // if (friendConvList == null && friendConvMap == null)
    // {
    // friendConvList = new ArrayList<ConversationList>();
    // friendConvMap = new HashMap<String, ConversationList>();
    // }
    // // 从本地获取好友会话列表
    // List<ConversationList> convList =
    // getConvFromLocal(DWMessage.CHAT_RELATIONSHIP_FRIEND);
    // if (convList.size() > 0)
    // {
    // addFriendDataToMemory(convList);
    // getConvListCallback.onCompleted(friendConvList);
    // }
    // else
    // {
    // if (NetworkUtils.isNetWorkConnected(context))
    // {
    // // 从网络获取好友会话列表
    // getFriendConvFromNet(context, getConvListCallback);
    // }
    // else
    // {
    // // 没有网络，返回空数据
    // getConvListCallback.onCompleted(friendConvList);
    // }
    // }
    // }

    /**
     * 从网络获取好友会话列表
     * 
     * @param context
     * @param getConvListCallback
     */
    // private void getFriendConvFromNet(Context context, final
    // GetConvListCallback getConvListCallback)
    // {
    // final Handler handler = new Handler()
    // {
    // public void handleMessage(android.os.Message msg)
    // {
    // List<ConversationList> processFriendConvList =
    // processFriendConvList(msg);
    // addFriendDataToMemory(processFriendConvList);
    // getConvListCallback.onCompleted(friendConvList);
    // };
    // };
    //
    // HashMap<String, String> map = new HashMap<String, String>();
    // String userID = DecentWorldApp.getInstance().getDwID();
    // map.put("dwID", userID);
    // LogUtils.i(TAG, "getFriendConvFromNet...begin,userID=" + userID);
    // new SendUrl(context).httpRequestWithParams(map, Constants.CONTEXTPATH +
    // ConstantNet.API_FRIEND_CONVERSATION, Method.GET, new HttpCallBack()
    // {
    // @Override
    // public void onSuccess(String response, ResultBean msg)
    // {
    // LogUtils.i(TAG, "getFriendConvFromNet...begin,msg.getResultCode=" +
    // msg.getResultCode() + ",msg.getMsg=" + msg.getMsg() + ",msg.getData=" +
    // msg.getData());
    // if (msg.getResultCode() == 2222)
    // {
    // Message message = Message.obtain();
    // message.what = 1;
    // message.obj = msg.getData().toString();
    // handler.sendMessage(message);
    // }
    // else if (msg.getResultCode() == 3333)
    // {
    // Message message = Message.obtain();
    // message.what = 0;
    // handler.sendMessage(message);
    //
    // }
    // else
    // {
    // Message message = Message.obtain();
    // message.what = 0;
    // handler.sendMessage(message);
    // }
    // }
    //
    // @Override
    // public void onFailure(String e)
    // {
    // LogUtils.i(TAG, "getFriendConvFromNet...onFailure,cause by:" +
    // e.toString());
    // Message message = Message.obtain();
    // message.what = 0;
    // handler.sendMessage(message);
    // }
    // });
    // }

    /**
     * 处理从网络获取的好友会话列表结果
     * 
     * @param msg
     */
    // private List<ConversationList> processFriendConvList(Message msg)
    // {
    // List<ConversationList> temp = new ArrayList<ConversationList>();
    // if (msg.what == 1)
    // {
    // String userID = DecentWorldApp.getInstance().getDwID();
    // ConversationList.deleteConversation(userID,
    // DWMessage.CHAT_RELATIONSHIP_FRIEND);
    // // 解析数据
    // String jsonStr = msg.obj.toString();
    // LogUtils.i(TAG, "从网络获取的好友会话列表数据为：" + jsonStr);
    // JSONObject jsonObject = JSON.parseObject(jsonStr);
    // String jsonArrayStr = jsonObject.getString("friendCoversations");
    // // 解析数据
    // JSONArray array = JSON.parseArray(jsonArrayStr);
    // if (null != array && array.size() > 0)
    // {
    // for (int i = 0; i < array.size(); i++)
    // {
    // JSONObject object = array.getJSONObject(i);
    // int chatRelationship = object.getIntValue("chatRelationship");
    // int chatType = object.getIntValue("chatType");
    // String content = object.getString("content");
    // int messageType = object.getIntValue("messageType");
    // String otherID = object.getString("otherID");
    // String title = object.getString("title");
    // String worth = object.getString("worth");
    // long time = object.getLongValue("time");
    // String icon = ImageUtils.getIconByDwID(otherID, ImageUtils.ICON_SMALL);
    // // 构造会话对象
    // ConversationList conversation = new ConversationList(userID , otherID ,
    // icon , title , content , time);
    // conversation.setMessageType(messageType);
    // conversation.setChatType(chatType);
    // conversation.setChatRelationship(0);
    // conversation.setWorth(worth);
    // conversation.save();
    // temp.add(conversation);
    // }
    // }
    // }
    // else
    // {
    // LogUtils.i(TAG, "获取好友会话列表失败");
    // }
    // return temp;
    // }

    /**
     * 将获取的数据放入内存中
     * 
     * @param data
     */
    // private void addFriendDataToMemory(List<ConversationList> data)
    // {
    // friendConvList.clear();
    // friendConvMap.clear();
    // /** 将从数据库获取的会话列表加载到内存中 **/
    // if (data.size() > 0)
    // {
    // for (ConversationList con : data)
    // {
    // String key = con.getDwID() + con.getChatType();
    // friendConvList.add(con);
    // friendConvMap.put(key, con);
    // }
    // Collections.sort(friendConvList);
    // }
    // }

    // /**
    // * 返回好友会话列表
    // *
    // * @return the friendConvList
    // */
    // public List<ConversationList> getFriendConvList()
    // {
    // Collections.sort(friendConvList);
    // return friendConvList;
    // }
    //
    // /**
    // * 重新加载会话列表 1.同意添加为好友；【同意添加，更新好友会话列表】 2.接到添加好友的回执时；【同意加为好友回执，更新好友会话列表】
    // * 3.主动删除好友；【删除好友，通知主页面更新会话列表】 4.备注好友；【修改完备注】 5.被别人删除；【被人删除，更新好友会话列表】
    // */
//    public void reLoadFriendConv(String cause)
//    {
//        List<ConversationList> friendConvFromLocal = getConvFromLocal(DWMessage.CHAT_RELATIONSHIP_FRIEND);
//        addFriendDataToMemory(friendConvFromLocal);
//        EventBus.getDefault().post(cause, NotifyByEventBus.NT_RE_LOAD_FRIEND_CONV);
//    }

    /**
     * 刷新好友会话列表 收到一条好友消息时更新会话列表，这条消息可能是接收到的，也可能是自己发送的;
     * 接收到一条消息，如果不存在该DwID的会话项，则新建，如果存在则修改对应的内存数据然后保存即可，这时会同步保存到数据库
     *
     * @param msgAndInfo
     *            消息
     * @param conversationLists
     *            内存中的数据
     * @param conversationMap
     *            数据键值对 1.【消息类型为单聊,发送更新会话列表的通知】; 2.【消息类型为单聊,发送更新消息列表的通知】;
     *            3.【消息类型为单聊,发送更新消息列表的通知】; 4.【朋友单聊，收到朋友发送的名片，并发送更新会话列表的通知】；
     *            5.【发送消息】
     */
//    public void refreshFriendConv(MsgAndInfo msgAndInfo, String info)
//    {
//        // 针对没有界面的情况
//        // 开辟内存存放好友会话列表
//        if (friendConvList == null && friendConvMap == null)
//        {
//            friendConvList = new ArrayList<ConversationList>();
//            friendConvMap = new HashMap<String, ConversationList>();
//        }
//
//        if (friendConvList.size() == 0)
//        {
//            // 从本地获取好友会话列表
//            List<ConversationList> convList = getConvFromLocal(DWMessage.CHAT_RELATIONSHIP_FRIEND);
//            if (convList.size() > 0)
//            {
//                addFriendDataToMemory(convList);
//            }
//        }
//
//        // ///////////*********/////////////////
//        LogUtils.i(TAG, "refreshFriendConv" + info);
//        DWMessage dwMessage = msgAndInfo.getDwMessage();
//        UserSessionInfo userSessionInfo = msgAndInfo.getUserSessionInfo();
//        
//        String userID = DecentWorldApp.getInstance().getDwID();
//        /** 对方信息 **/
//        String otherID = userSessionInfo.getFriendID();
//        String otherNickname = userSessionInfo.getShowName();
//        String otherWorth = String.valueOf(userSessionInfo.getWorth());
//        // 用户类型
//        int userType = userSessionInfo.getUserType();
//
//        int chatType = dwMessage.getChatType();
//        int chatRelationship = dwMessage.getChatRelationship();
//        String key = otherID + dwMessage.getChatType();
//        ConversationList conversation = friendConvMap.get(key);
//        // 新的列表
//        if (conversation == null)
//        {
//            String conversation_icon = null;
//            String title = null;
//            if (chatType == DWMessage.CHAT_TYPE_SINGLE)
//            {
//                conversation_icon = ImageUtils.getIconByDwID(otherID, ImageUtils.ICON_SMALL);
//                title = ContactUser.getContactName(otherID);
//                if (title.equals(""))
//                {
//                    // 说明对方为陌生人
//                    title = userSessionInfo.getShowName();
//                }
//            }
//            else if (chatType == DWMessage.CHAT_TYPE_SINGLE_ANONYMITY)
//            {
//                /** 自己发送出去的消息 **/
//                if (dwMessage.getFrom().equals(userID))
//                {
//                    conversation_icon = ImageUtils.getIconByDwID(otherID, ImageUtils.ICON_SMALL);
//                    title = ContactUser.getContactName(otherID) + "[匿名聊天]";
//                    if (title.equals(""))
//                    {
//                        // 说明对方为陌生人
//                        title = userSessionInfo.getShowName() + "[匿名聊天]";
//                    }
//                }
//                /** 别人发送过来的消息 **/
//                else
//                {
//                    conversation_icon = "";
//                    title = AnonymityNickNameCreator.getRandomName() + "[匿名聊天]";
//                }
//            }
//            int msgType = dwMessage.getMessageType();
//            String body = "";
//            if (msgType == DWMessage.TXT)
//            {
//                body = dwMessage.getBody();
//            }
//
//            if (dwMessage.getFrom().equals(userID))
//            {
//                // 为发送出去的消息
//                conversation = new ConversationList(userID , otherID , conversation_icon , title , body , System.currentTimeMillis() , 1 , 0 , 1 , 1);
//            }
//            else
//            {
//                conversation = new ConversationList(userID , otherID , conversation_icon , title , body , System.currentTimeMillis() , 1 , 1 , 1 , 1);
//            }
//            conversation.setMessageType(msgType);
//            conversation.setChatType(chatType);
//            conversation.setChatRelationship(dwMessage.getChatRelationship());
//            conversation.setWorth(otherWorth);
//            conversation.setUserType(userType);
//            conversation.save();
//            friendConvMap.put(key, conversation);
//            friendConvList.add(conversation);
//            LogUtils.i(TAG, "新建会话消息");
//        }
//        else
//        {
//            /** 修改内存 **/
//            conversation.setTime(Long.valueOf(dwMessage.getTime()));
//            conversation.setMessageType(dwMessage.getMessageType());
//            if (dwMessage.getMessageType() == DWMessage.TXT)
//            {
//                conversation.setContent(dwMessage.getBody());
//            }
//            conversation.setCount(conversation.getCount() + 1);
//            if (!dwMessage.getFrom().equals(userID))
//            {
//                conversation.setUnReadCount(conversation.getUnReadCount() + 1);
//            }
//            conversation.setWorth(otherWorth);
//            conversation.setUserType(userType);
//            conversation.save();
//        }
//        // 排序
//        Collections.sort(friendConvList);
//        // 更新会话列表界面
//        EventBus.getDefault().post("接到消息，更新会话列表", NotifyByEventBus.NT_REFRESH_FRIEND_CONV);
//    }

    //
    // /**
    // * 获取会话列表回调
    // */
    // public interface GetConvListCallback
    // {
    // public void onCompleted(List<ConversationList> data);
    // }
    //
    // //
    // ///////////////////////////////////////////////初始化陌生人会话列表...begin/////////////////////////////////////////////
    // public void initStrangerConv(Context context, GetConvListCallback
    // getConvListCallback)
    // {
    // // 开辟内存存放陌生人会话列表
    // if (strangerConvList == null && strangerConvMap == null)
    // {
    // strangerConvList = new ArrayList<ConversationList>();
    // strangerConvMap = new HashMap<String, ConversationList>();
    // }
    // // 从本地获取陌生人会话列表
    // List<ConversationList> convList =
    // getConvFromLocal(DWMessage.CHAT_RELATIONSHIP_STRANGER);
    // if (convList.size() > 0)
    // {
    // addStrangerDataToMemory(convList);
    // getConvListCallback.onCompleted(strangerConvList);
    // }
    // else
    // {
    // if (NetworkUtils.isNetWorkConnected(context))
    // {
    // // 从网络获取好友会话列表
    // getStrangerConvFromNet(context, getConvListCallback);
    // }
    // else
    // {
    // // 没有网络，返回空数据
    // getConvListCallback.onCompleted(strangerConvList);
    // }
    // }
    // }
    //
    // /**
    // * 从网络获取陌生人会话列表
    // *
    // * @param context
    // * @param getConvListCallback
    // */
    // private void getStrangerConvFromNet(Context context, final
    // GetConvListCallback getConvListCallback)
    // {
    // final Handler handler = new Handler()
    // {
    // public void handleMessage(android.os.Message msg)
    // {
    // List<ConversationList> processFriendConvList =
    // processStrangerConvList(msg);
    // addStrangerDataToMemory(processFriendConvList);
    // getConvListCallback.onCompleted(strangerConvList);
    // };
    // };
    //
    // HashMap<String, String> map = new HashMap<String, String>();
    // String userID = DecentWorldApp.getInstance().getDwID();
    // map.put("dwID", userID);
    // LogUtils.i(TAG, "getStrangerConvFromNet...begin,userID=" + userID);
    // new SendUrl(context).httpRequestWithParams(map, Constants.CONTEXTPATH +
    // ConstantNet.API_STRANGER_CONVERSATION, Method.GET, new HttpCallBack()
    // {
    // @Override
    // public void onSuccess(String response, ResultBean msg)
    // {
    // LogUtils.i(TAG, "getStrangerConvFromNet...begin,msg.getResultCode=" +
    // msg.getResultCode() + ",msg.getMsg=" + msg.getMsg() + ",msg.getData=" +
    // msg.getData());
    // if (msg.getResultCode() == 2222)
    // {
    // Message message = Message.obtain();
    // message.what = 1;
    // message.obj = msg.getData().toString();
    // handler.sendMessage(message);
    // }
    // else if (msg.getResultCode() == 3333)
    // {
    // Message message = Message.obtain();
    // message.what = 0;
    // handler.sendMessage(message);
    //
    // }
    // else
    // {
    // Message message = Message.obtain();
    // message.what = 0;
    // handler.sendMessage(message);
    // }
    // }
    //
    // @Override
    // public void onFailure(String e)
    // {
    // LogUtils.i(TAG, "getStrangerConvFromNet...onFailure,cause by:" +
    // e.toString());
    // Message message = Message.obtain();
    // message.what = 0;
    // handler.sendMessage(message);
    // }
    // });
    // }
    //
    // /**
    // * 处理获取的陌生人会话列表
    // */
    // private List<ConversationList> processStrangerConvList(Message msg)
    // {
    // List<ConversationList> temp = new ArrayList<ConversationList>();
    // if (msg.what == 1)
    // {
    // ConversationList.deleteConversation(DecentWorldApp.getInstance().getDwID(),
    // DWMessage.CHAT_RELATIONSHIP_STRANGER);
    // String jsonStr = msg.obj.toString();
    // JSONObject jsonObject = JSON.parseObject(jsonStr);
    // String jsonArrayStr = jsonObject.getString("strangerCoversations");
    // // 解析数据
    // JSONArray array = JSON.parseArray(jsonArrayStr);
    // if (null != array && array.size() > 0)
    // {
    // for (int i = 0; i < array.size(); i++)
    // {
    // JSONObject object = array.getJSONObject(i);
    // int chatRelationship = object.getIntValue("chatRelationship");
    // int chatType = object.getIntValue("chatType");
    // String content = object.getString("content");
    // int messageType = object.getIntValue("messageType");
    // String otherID = object.getString("otherID");
    // String title = object.getString("title");
    // String worth = object.getString("worth");
    // long time = object.getLongValue("time");
    // String icon = ImageUtils.getIconByDwID(otherID, ImageUtils.ICON_SMALL);
    // // 构造会话对象
    // ConversationList conversation = new
    // ConversationList(DecentWorldApp.getInstance().getDwID() , otherID , icon
    // , title , content , time);
    // conversation.setMessageType(messageType);
    // conversation.setChatType(chatType);
    // conversation.setChatRelationship(1);
    // conversation.setWorth(worth);
    // conversation.save();
    // temp.add(conversation);
    // }
    // }
    // }
    // else
    // {
    // LogUtils.i(Constants.TAG_BM, "获取陌生人会话列表失败");
    // }
    // return temp;
    // }
    //
    // /**
    // * 将获取的好友数据放入内存中
    // *
    // * @param data
    // */
    // private void addStrangerDataToMemory(List<ConversationList> data)
    // {
    // // 防止在接收到同意加为好友回执时刷新列表时还没有初始化而造成崩溃的情况出现；
    // if (strangerConvList != null && strangerConvMap != null)
    // {
    // strangerConvList.clear();
    // strangerConvMap.clear();
    // /** 将从数据库获取的会话列表加载到内存中 **/
    // if (data.size() > 0)
    // {
    // for (ConversationList con : data)
    // {
    // String key = con.getDwID() + con.getChatType();
    // strangerConvList.add(con);
    // strangerConvMap.put(key, con);
    // }
    // Collections.sort(strangerConvList);
    // }
    // }
    // }
    //
    // /**
    // * 重新加载会话列表 1.同意添加为好友；【同意添加，更新好友会话列表】 2.接到添加好友的回执时；【同意加为好友回执，更新好友会话列表】
    // * 3.主动删除好友；【删除好友，通知主页面更新会话列表】 4.备注好友；【修改完备注】 5.被别人删除；【被人删除，更新好友会话列表】
    // */
//    public void reLoadStrangerConv(String cause)
//    {
//        List<ConversationList> strangerConvFromLocal = getConvFromLocal(DWMessage.CHAT_RELATIONSHIP_STRANGER);
//        addStrangerDataToMemory(strangerConvFromLocal);
//        EventBus.getDefault().post(cause, NotifyByEventBus.NT_RE_LOAD_STRANGER_CONV);
//    }
    //
    // /**
    // * 刷新陌生人会话列表 收到一条陌生人消息时更新会话列表，这条消息可能是接收到的，也可能是自己发送的;
    // * 接收到一条消息，如果不存在该DwID的会话项，则新建，如果存在则修改对应的内存数据然后保存即可，这时会同步保存到数据库
    // *
    // * @param msgAndInfo
    // * 消息
    // * @param strangerConversationList
    // * 内存中的数据
    // * @param strangerConversationMap
    // * 数据键值对
    // */
//    public void refreshStrangerConv(MsgAndInfo msgAndInfo, String info)
//    {
//        LogUtils.i(TAG, "refreshStrangerConv" + info);
//        DWMessage dwMessage = msgAndInfo.getDwMessage();
//        UserSessionInfo userSessionInfo = msgAndInfo.getUserSessionInfo();
//        /** 自己的ID **/
//        String userID = DecentWorldApp.getInstance().getDwID();
//        /** 对方ID **/
//        String otherID = userSessionInfo.getFriendID();
//        String otherNickname = userSessionInfo.getShowName();
//        String otherWorth = String.valueOf(userSessionInfo.getWorth());
//        // 用户类型
//        int userType = userSessionInfo.getUserType();
//        // 聊天类型
//        int chatType = dwMessage.getChatType();
//        int chatRelationship = dwMessage.getChatRelationship();
//        String key = otherID + dwMessage.getChatType();
//        ConversationList conversation = strangerConvMap.get(key);
//        // 新的列表
//        if (conversation == null)
//        {
//            String conversation_icon = null;
//            String title = null;
//            if (chatType == DWMessage.CHAT_TYPE_SINGLE)
//            {
//                conversation_icon = ImageUtils.getIconByDwID(otherID, ImageUtils.ICON_SMALL);
//                title = otherNickname;// 设置名字
//            }
//            else if (chatType == DWMessage.CHAT_TYPE_SINGLE_ANONYMITY)
//            {
//                conversation_icon = "";
//                if (dwMessage.getFrom().equals(userID))
//                {
//                    conversation_icon = ImageUtils.getIconByDwID(otherID, ImageUtils.ICON_SMALL);
//                    title = otherNickname;
//                }
//                else
//                {
//                    // 接收到的
//                    conversation_icon = "";
//                    title = AnonymityNickNameCreator.getRandomName() + "[匿名聊天]";
//                }
//            }
//            int msgType = dwMessage.getMessageType();
//            String body = "";
//            if (msgType == DWMessage.TXT)
//            {
//                body = dwMessage.getBody();
//            }
//
//            if (dwMessage.getFrom().equals(userID))
//            {
//                // 为发送出去的消息
//                conversation = new ConversationList(userID , otherID , conversation_icon , title , body , System.currentTimeMillis() , 1 , 0 , 1 , 1);
//            }
//            else
//            {
//                conversation = new ConversationList(userID , otherID , conversation_icon , title , body , System.currentTimeMillis() , 1 , 1 , 1 , 1);
//            }
//
//            conversation.setMessageType(msgType);
//            conversation.setChatType(chatType);
//            conversation.setChatRelationship(dwMessage.getChatRelationship());
//            conversation.setWorth(otherWorth);
//            conversation.setUserType(userType);
//            conversation.save();
//            strangerConvMap.put(key, conversation);
//            strangerConvList.add(conversation);
//            LogUtils.i(TAG, "新建会话消息");
//        }
//        else
//        {
//            /** 修改内存 **/
//            conversation.setTime(Long.valueOf(dwMessage.getTime()));
//            conversation.setMessageType(dwMessage.getMessageType());
//            if (dwMessage.getMessageType() == DWMessage.TXT)
//            {
//                conversation.setContent(dwMessage.getBody());
//            }
//            conversation.setCount(conversation.getCount() + 1);
//            if (!dwMessage.getFrom().equals(userID))
//            {
//                conversation.setUnReadCount(conversation.getUnReadCount() + 1);
//            }
//            conversation.setWorth(String.valueOf(userSessionInfo.getWorth()));
//            conversation.setUserType(userType);
//            conversation.save();
//            LogUtils.i(TAG, "测试关系：" + otherID + ",getChatType=" + dwMessage.getChatType() + ",getChatRelationship=" + dwMessage.getChatRelationship());
//        }
//
//        // 排序
//        Collections.sort(strangerConvList);
//        // 更新会话列表界面
//        EventBus.getDefault().post("接到消息，更新会话列表", NotifyByEventBus.NT_REFRESH_STRANGER_CONV);
//    }

    //
    // //
    // //////////////////////////////////////公共方法///////////////////////////////////////
    // /**
    // * 将要清除小红点的联系人添加到Set中
    // *
    // * @param idAndChatType
    // */
    // public void addFriendUnread(String idAndChatType)
    // {
    // friendCleanUnRead.add(idAndChatType);
    // }
    //
    // /**
    // * 清除所有指定的小红点
    // */
    // public void clearFriendUnread()
    // {
    // clearFriendUnreadE();
    // }
    //
    // /**
    // * 将要清除小红点的陌生人添加到Set中
    // *
    // * @param idAndChatType
    // */
    // public void addStrangerUnread(String idAndChatType)
    // {
    // strangerCleanUnRead.add(idAndChatType);
    // }
    //
    // /**
    // * 清除所有指定的小红点
    // */
    // public void clearStrangerUnread()
    // {
    // clearStrangerUnreadE();
    // }
    //
    // //
    // /////////////////////////////////////私有方法///////////////////////////////////////
    // /**
    // * 清除好友未读消息
    // */
    // private void clearFriendUnreadE()
    // {
    // if (friendCleanUnRead != null && friendCleanUnRead.size() > 0)
    // {
    // Iterator<String> iterator = friendCleanUnRead.iterator();
    // while (iterator.hasNext())
    // {
    // String key = iterator.next();
    // ConversationList conversation = friendConvMap.get(key);
    // if (conversation != null)
    // {
    // conversation.setUnReadCount(0);
    // conversation.updateUnReadCount();
    // conversation.save();
    // }
    // }
    // friendCleanUnRead.clear();
    // // 排序
    // Collections.sort(friendConvList);
    // // 将消息路由到ConversationFragment
    // EventBus.getDefault().post("",
    // NotifyByEventBus.NT_CLEAR_FRIEND_UNREAD_CONV);
    // }
    // }
    //
    // /**
    // * 清除陌生人未读消息
    // */
    // private void clearStrangerUnreadE()
    // {
    // if (strangerCleanUnRead != null && strangerCleanUnRead.size() > 0)
    // {
    // Iterator<String> iterator = strangerCleanUnRead.iterator();
    // while (iterator.hasNext())
    // {
    // String key = iterator.next();
    // ConversationList conversation = strangerConvMap.get(key);
    // if (conversation != null)
    // {
    // conversation.setUnReadCount(0);
    // conversation.updateUnReadCount();
    // conversation.save();
    // }
    // }
    // strangerCleanUnRead.clear();
    // // 排序
    // Collections.sort(strangerConvList);
    // // 将消息路由到ConversationFragment
    // EventBus.getDefault().post("",
    // NotifyByEventBus.NT_CLEAR_STRANGER_UNREAD_CONV);
    // }
    // }

    // ///////////////////////////////////////////重构/////////////////////////////////////
    // ///////////////////////////////////////////变量/////////////////////////////////////
    // 用来显示数据
    private List<ConversationList> convList;
    // 用来保存数据
    private Map<String, ConversationList> convMap;
    // 将要移除的会话列表的小红点
    private Set<String> unReadRedPoint = new HashSet<String>();

    // ///////////////////////////////////////////共有方法//////////////////////////////////
    /**
     * 第一次登陆的时候，初始化会话列表
     */
    public void initConv()
    {
        LogUtils.i(TAG, "initConv");
        if (convList == null && convMap == null)
        {
            convList = new ArrayList<ConversationList>();
            convMap = new HashMap<String, ConversationList>();
        }
        getLocalConv(new GetLocalConvListener()
        {
            @Override
            public void onCompleted(List<ConversationList> friendConvList, List<ConversationList> strangerConvList)
            {
                addDataToMemory(friendConvList, strangerConvList);
            }

            @Override
            public void onGetFromNet(boolean has, int type)
            {
                if (NetworkUtils.isNetWorkConnected(DecentWorldApp.getGlobalContext()))
                {
                    if (has)
                    {
                        // 进行网络请求
                        getConvFromNet(type);
                    }
                }
            }
        });
    }

    /**
     * 获取会话列表，包括陌生人和好友
     */
    public List<ConversationList> getConv()
    {
        LogUtils.i(TAG, "getConv");
        if (convList == null && convMap == null)
        {
            convList = new ArrayList<ConversationList>();
            convMap = new HashMap<String, ConversationList>();
        }
        Collections.sort(convList);
        return convList;
    }

    /**
     * 将要清除小红点的联系人添加到Set中
     * 
     * @param idAndChatType
     */
    public void addUnReadRedPoint(String idAndChatType)
    {
        unReadRedPoint.add(idAndChatType);
    }

    /**
     * 清除所有指定的小红点
     */
    public void removeUnReadRedPoint()
    {
        removeUnReadRedPointE();
    }

    /**
     * 刷新会话列表
     * 
     * @param msgAndInfo
     * @param info
     */
    public void refreshConv(MsgAndInfo msgAndInfo, String info)
    {
        refreshConvE(msgAndInfo, info);
    }
    
    
    /**
     * 重新加载数据库的数据到内存 1.同意添加为好友；【同意添加，更新好友会话列表】 2.接到添加好友的回执时；【同意加为好友回执，更新好友会话列表】
     * 3.主动删除好友；【删除好友，通知主页面更新会话列表】 4.备注好友；【修改完备注】 5.被别人删除；【被人删除，更新好友会话列表】
     * @param cause
     */
    public void reloadConv(String cause)
    {
        LogUtils.i(TAG, "reloadConv...cause:"+cause);
        reloadDataToMemory();
    }
    
    /**
     * 匹配成功
     */
    public void matchSuccess(MatchSuccessEntity entity)
    {
        String promptInfo = "你喜欢的人也喜欢了你！珍惜，聊一聊";
        String otherID = entity.getDwID();
        String otherNickName = entity.getName();
        int userType = entity.getUserType();
        float otherWorth = entity.getWorth();
        //生成会话列表
        DWMessage msg = new DWMessage();
        //聊天关系
        if(ContactUser.isContact(otherID))
        {
            msg.setChatRelationship(DWMessage.CHAT_RELATIONSHIP_FRIEND);
        }else
            msg.setChatRelationship(DWMessage.CHAT_RELATIONSHIP_STRANGER);
        //聊天类型
        msg.setChatType(DWMessage.CHAT_TYPE_SINGLE);
        //消息内容(系统提示信息)
        msg.setBody(promptInfo);
        //消息类型（文字）
        msg.setMessageType(DWMessage.TXT);
        //from
        msg.setFrom(otherID);
        //时间
        msg.setTime(String.valueOf(System.currentTimeMillis()));
        
        UserSessionInfo userSessionInfo = new UserSessionInfo(otherID, otherNickName, otherWorth,userType);
        refreshConvE(new MsgAndInfo(msg, userSessionInfo), "收到匹配成功的系统推送消息");
        //生成系统提示消息
        DWMessage dwMessage = new DWMessage(DWMessage.NOTIFY , DWMessage.RECEIVE);
        dwMessage.setFrom(otherID);
        dwMessage.setBody(promptInfo);
        dwMessage.save();
    }

    // ///////////////////////////////////////////私有方法//////////////////////////////////

    /**
     * 发送通知
     * 
     * @param handler
     * @param what
     * @param info
     */
    private void sendHandlerMsg(Handler handler, int what, String info)
    {
        Message message = Message.obtain();
        message.what = what;
        message.obj = info;
        handler.sendMessage(message);
    }

    private void getLocalConv(GetLocalConvListener listener)
    {
        // 获取好友会话列表
        List<ConversationList> friendConvFromLocal = getConvFromLocal(DWMessage.CHAT_RELATIONSHIP_FRIEND);
        // 获取陌生人会话列表
        List<ConversationList> strangerConvFromLocal = getConvFromLocal(DWMessage.CHAT_RELATIONSHIP_STRANGER);
        // 返回数据
        listener.onCompleted(friendConvFromLocal, strangerConvFromLocal);
        if (friendConvFromLocal.size() == 0 && strangerConvFromLocal.size() == 0)
        {
            listener.onGetFromNet(true, 3);
        }
        else if (friendConvFromLocal.size() > 0 && strangerConvFromLocal.size() == 0)
        {
            listener.onGetFromNet(true, 2);
        }
        else if (friendConvFromLocal.size() == 0 && strangerConvFromLocal.size() > 0)
        {
            listener.onGetFromNet(false, 1);
        }
        else
        {
            listener.onGetFromNet(false, 0);
        }
    }

    /**
     * 从本地获取会话列表回调
     */
    public interface GetLocalConvListener
    {
        // 返回数据，当没有数据时，列表大小为0
        void onCompleted(List<ConversationList> friendConvList, List<ConversationList> strangerConvList);

        // has为 true时，代表需要从网络获取数据，type的值为：1（朋友）、2（陌生人）、3（朋友和陌生人）
        void onGetFromNet(boolean has, int type);
    }

    /**
     * 获取本地会话列表
     * 
     * @param chatRelationship
     *            聊天关系
     * @return 为排序的会话列表
     */
    // DWMessage.CHAT_RELATIONSHIP_FRIEND
    // DWMessage.CHAT_RELATIONSHIP_STRANGER
    private List<ConversationList> getConvFromLocal(int chatRelationship)
    {
        // 查询好友的会话列表
        String userID = DecentWorldApp.getInstance().getDwID();
        String sql = "userID=? and chatRelationship=?";
        List<ConversationList> list = new Select().from(ConversationList.class).where(sql, userID, chatRelationship).orderBy("time desc").execute();
        if (list != null && list.size() > 0)
        {
            // 去掉相同的，将数据暂时存储在map中
            HashMap<String, ConversationList> map = new HashMap<String, ConversationList>();
            for (ConversationList conv : list)
            {
                String key = conv.getDwID() + conv.getChatType();
                map.put(key, conv);
            }

            // 重新将数据放回list中
            list.clear();
            for (Map.Entry<String, ConversationList> t : map.entrySet())
            {
                list.add(t.getValue());
            }

            // 除去已经不是联系人的
            Iterator<ConversationList> iterator = list.iterator();
            while (iterator.hasNext())
            {
                ConversationList next = iterator.next();
                if (chatRelationship == DWMessage.CHAT_RELATIONSHIP_FRIEND)
                {
                    if (!ContactUser.isContact(next.getDwID()))
                    {
                        next.setChatRelationship(DWMessage.CHAT_RELATIONSHIP_STRANGER);
                        // t.setTitle("重新获取昵称");//待优化，删除联系人后，应该显示昵称，而不应该显示备注
                        next.save();
                        iterator.remove();
                    }
                }
                else if (chatRelationship == DWMessage.CHAT_RELATIONSHIP_STRANGER)
                {
                    if (ContactUser.isContact(next.getDwID()))
                    {
                        LogUtils.i(TAG, "dwID=" + next.getDwID() + ",已经是自己的好友，将会话列表移到好友处");
                        next.setChatRelationship(DWMessage.CHAT_RELATIONSHIP_FRIEND);
                        next.setTitle(ContactUser.getContactName(next.getDwID()));
                        next.save();
                        iterator.remove();
                    }
                }

            }
        }
        return list;
    }

    private void getConvFromNet(final int type)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(android.os.Message msg)
            {
                switch (msg.what)
                {
                    case -1:
                        // 网络错误

                        break;
                    case 0:
                        // 解析数据
                        processConvList(msg.obj.toString(), type);
                        reloadDataToMemory();
                        break;
                    case 1:
                        // 获取失败

                        break;

                    default:
                        break;
                }

            };
        };

        String userID = DecentWorldApp.getInstance().getDwID();
        Context context = DecentWorldApp.getGlobalContext();
        SendUrl sendUrl = new SendUrl(context);

        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", userID);
        map.put("type", String.valueOf(type));
        LogUtils.i(TAG, "getConvFromNet...begin,userID=" + userID + ",type=" + type);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_GET_CONVERSATION_LIST_V11, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "getConvFromNet...begin,msg.getResultCode=" + msg.getResultCode() + ",msg.getMsg=" + msg.getMsg() + ",msg.getData=" + msg.getData());
                if (msg.getResultCode() == 2222)
                {
                    sendHandlerMsg(handler, 0, msg.getData().toString());
                }
                else if (msg.getResultCode() == 3333)
                {
                    sendHandlerMsg(handler, 1, "");
                }
                else
                {
                    sendHandlerMsg(handler, 1, "");
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "getConvFromNet...onFailure,cause by:" + e.toString());
                sendHandlerMsg(handler, -1, "");
            }
        });
    }

    /**
     * 将数据放入内存中
     */
    private void addDataToMemory(List<ConversationList> friendConvList, List<ConversationList> strangerConvList)
    {
        // 清理数据
        convList.clear();
        convMap.clear();
        // 将数据放到 list 中
        convList.addAll(friendConvList);
        convList.addAll(strangerConvList);
        Collections.sort(convList);
        // 将数据放到 map 中
        if (convList.size() > 0)
        {
            for (ConversationList conv : convList)
            {
                String key = conv.getChatRelationship() + conv.getDwID() + conv.getChatType();
                convMap.put(key, conv);
            }
        }
    }

    private void processConvList(String msg, int type)
    {
        // 解解析好友和陌生人数据，并保存
        JSONObject jsonObject = JSON.parseObject(msg);
        String friendStr = jsonObject.getString("friend");
        String strangerStr = jsonObject.getString("stranger");
        String userID = DecentWorldApp.getInstance().getDwID();
        if (type == 1)
        {
            ConversationList.deleteConversation(userID, DWMessage.CHAT_RELATIONSHIP_FRIEND);
        }
        else if (type == 2)
        {
            ConversationList.deleteConversation(userID, DWMessage.CHAT_RELATIONSHIP_STRANGER);
        }
        else
        {
            ConversationList.deleteConversation(userID, DWMessage.CHAT_RELATIONSHIP_FRIEND);
            ConversationList.deleteConversation(userID, DWMessage.CHAT_RELATIONSHIP_STRANGER);
        }
        ResultBean friendBean = JsonUtils.json2Bean(friendStr, ResultBean.class);
        processConvList(friendBean, DWMessage.CHAT_RELATIONSHIP_FRIEND);
        ResultBean strangerBean = JsonUtils.json2Bean(strangerStr, ResultBean.class);
        processConvList(strangerBean, DWMessage.CHAT_RELATIONSHIP_STRANGER);
    }

    private void processConvList(ResultBean friendBean, int chatRelationship)
    {
        String userID = DecentWorldApp.getInstance().getDwID();
        String jsonStr = friendBean.getData().toString();
        LogUtils.i(TAG, "从网络获取的会话列表数据为：" + jsonStr);
        JSONObject jsonObject = JSON.parseObject(jsonStr);
        String jsonArrayStr = null;
        if (chatRelationship == DWMessage.CHAT_RELATIONSHIP_FRIEND)
        {
            jsonArrayStr = jsonObject.getString("friendCoversations");
        }
        else if (chatRelationship == DWMessage.CHAT_RELATIONSHIP_STRANGER)
        {
            jsonArrayStr = jsonObject.getString("strangerCoversations");
        }

        // 解析数据
        JSONArray array = JSON.parseArray(jsonArrayStr);
        if (null != array && array.size() > 0)
        {
            for (int i = 0; i < array.size(); i++)
            {
                JSONObject object = array.getJSONObject(i);
                int t_chatRelationship = object.getIntValue("chatRelationship");
                int chatType = object.getIntValue("chatType");
                String content = object.getString("content");
                int messageType = object.getIntValue("messageType");
                String otherID = object.getString("otherID");
                String title = object.getString("title");
                String worth = object.getString("worth");
                long time = object.getLongValue("time");
                String icon = ImageUtils.getIconByDwID(otherID, ImageUtils.ICON_SMALL);
                // 构造会话对象
                ConversationList conversation = new ConversationList(otherID , icon , title , content , time);
                conversation.setMessageType(messageType);
                conversation.setChatType(chatType);
                conversation.setChatRelationship(chatRelationship);
                conversation.setWorth(worth);
                conversation.save();
            }
        }
    }


    private void reloadDataToMemory()
    {
        // 将convList中的已经存在的小红点保存下来

        // 获取好友会话列表
        List<ConversationList> friendConvFromLocal = getConvFromLocal(DWMessage.CHAT_RELATIONSHIP_FRIEND);
        // 获取陌生人会话列表
        List<ConversationList> strangerConvFromLocal = getConvFromLocal(DWMessage.CHAT_RELATIONSHIP_STRANGER);
        addDataToMemory(friendConvFromLocal, strangerConvFromLocal);
        EventBus.getDefault().post("重新加载好友会话列表", NotifyByEventBus.NT_RE_LOAD_FRIEND_CONV);
        EventBus.getDefault().post("重新加载陌生人会话列表", NotifyByEventBus.NT_RE_LOAD_STRANGER_CONV);
    }

    /**
     * 清除好友未读消息
     */
    private void removeUnReadRedPointE()
    {
        if (unReadRedPoint != null && unReadRedPoint.size() > 0)
        {
            Iterator<String> iterator = unReadRedPoint.iterator();
            while (iterator.hasNext())
            {
                String key = iterator.next();
                ConversationList conversation = convMap.get(key);
                if (conversation != null)
                {
                    conversation.setUnReadCount(0);
                    conversation.updateUnReadCount();
                    conversation.save();
                }
            }
            unReadRedPoint.clear();
            // 排序
            Collections.sort(convList);
            // 将消息路由到ConversationFragment
            EventBus.getDefault().post("清除好友会话列表小红点", NotifyByEventBus.NT_RE_LOAD_FRIEND_CONV);
            EventBus.getDefault().post("清除陌生人会话列表小红点", NotifyByEventBus.NT_RE_LOAD_STRANGER_CONV);
        }
    }

    /**
     * 刷新好友会话列表 收到一条好友消息时更新会话列表，这条消息可能是接收到的，也可能是自己发送的;
     * 接收到一条消息，如果不存在该DwID的会话项，则新建，如果存在则修改对应的内存数据然后保存即可，这时会同步保存到数据库
     * 
     * @param msgAndInfo
     *            消息
     * @param conversationLists
     *            内存中的数据
     * @param conversationMap
     *            数据键值对 1.【消息类型为单聊,发送更新会话列表的通知】; 2.【消息类型为单聊,发送更新消息列表的通知】;
     *            3.【消息类型为单聊,发送更新消息列表的通知】; 4.【朋友单聊，收到朋友发送的名片，并发送更新会话列表的通知】；
     *            5.【发送消息】
     */
    private void refreshConvE(MsgAndInfo msgAndInfo, String info)
    {
        LogUtils.i(TAG, "refreshConvE" + info);
        DWMessage dwMessage = msgAndInfo.getDwMessage();
        UserSessionInfo userSessionInfo = msgAndInfo.getUserSessionInfo();
        String userID = DecentWorldApp.getInstance().getDwID();
        // 对方信息
        String otherID = userSessionInfo.getFriendID();
        String otherNickname = userSessionInfo.getShowName();
        String otherWorth = String.valueOf(userSessionInfo.getWorth());
        int userType = userSessionInfo.getUserType();
        int chatType = dwMessage.getChatType();
        int chatRelationship = dwMessage.getChatRelationship();
        String key = chatRelationship + otherID + chatType;
        ConversationList conversation = convMap.get(key);
        if (conversation == null)
        {
            // 头像
            String icon = ImageUtils.getIconByDwID(otherID, ImageUtils.ICON_SMALL);
            // 用户类型
            conversation.setUserType(userType);
            String title = null;
            if (chatType == DWMessage.CHAT_TYPE_SINGLE)
            {
                title = userSessionInfo.getShowName();
            }
            else if (chatType == DWMessage.CHAT_TYPE_SINGLE_ANONYMITY)
            {
                title = AnonymityNickNameCreator.getRandomName() + "[匿名聊天]";
            }
            String body = dwMessage.getBody();
            if (dwMessage.getFrom().equals(userID))
            {
                // 为发送出去的消息
                conversation = new ConversationList(otherID , icon , title , body , 0);
            }
            else
            {
                conversation = new ConversationList(otherID , icon , title , body , 1);
            }
            conversation.setMessageType(dwMessage.getMessageType());
            conversation.setChatType(chatType);
            conversation.setChatRelationship(dwMessage.getChatRelationship());
            conversation.setWorth(otherWorth);
            conversation.save();
            convMap.put(key, conversation);
            convList.add(conversation);
        }
        else
        {
            /** 修改内存 **/
            conversation.setCount(conversation.getCount() + 1);
            if (!dwMessage.getFrom().equals(userID))
            {
                conversation.setUnReadCount(conversation.getUnReadCount() + 1);
                conversation.setUserType(userType);
            }
            conversation.setMessageType(dwMessage.getMessageType());
            if (dwMessage.getMessageType() == DWMessage.TXT)
            {
                conversation.setContent(dwMessage.getBody());
            }
            conversation.setTime(Long.valueOf(dwMessage.getTime()));
            conversation.setWorth(otherWorth);
            conversation.save();
        }
        // 排序
        Collections.sort(convList);
        // 更新会话列表界面
        EventBus.getDefault().post("接到消息，刷新新好友会话列表", NotifyByEventBus.NT_RE_LOAD_FRIEND_CONV);
        EventBus.getDefault().post("接到消息，刷新陌生人会话列表", NotifyByEventBus.NT_RE_LOAD_STRANGER_CONV);
    }

}
