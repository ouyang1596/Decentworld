/**
 * 
 */
package cn.sx.decentworld.engine;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.bean.DWMessage;
import cn.sx.decentworld.common.CommUtil;
import cn.sx.decentworld.common.ConstantNet;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.entity.db.MomentEntity;
import cn.sx.decentworld.network.SendUrl;
import cn.sx.decentworld.network.SendUrl.HttpCallBack;
import cn.sx.decentworld.network.entity.ResultBean;
import cn.sx.decentworld.utils.LogUtils;

import com.activeandroid.query.Delete;
import com.activeandroid.query.Select;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.android.volley.Request.Method;

/**
 * @ClassName: MomentEngine.java
 * @Description: 作品圈的业务逻辑
 * @author: cj
 * @date: 2016年2月26日 下午6:17:20
 */
public class MomentEngine {
	private static final String TAG = "MomentEngine";
	private SendUrl sendUrl;
	private String userID;

	/**
	 * 无惨构造函数，不能调用接口；
	 */
	public MomentEngine() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * 构造函数
	 */
	public MomentEngine(Context context) {
		sendUrl = new SendUrl(context);
		userID = DecentWorldApp.getInstance().getDwID();
	}

	/**
	 * 进入朋友圈时初始化数据
	 * 
	 * @return
	 */
	public List<MomentEntity> initData() {
		String userID = DecentWorldApp.getInstance().getDwID();
		String sql = "userID = ?";
		List<MomentEntity> execute = new Select().from(MomentEntity.class).where(sql, userID).limit(10).orderBy("remoteID desc")
				.execute();
		return execute;
	}

	/**
	 * 清除作品圈的缓存数据
	 */
	public boolean clearCacheData() {
		String userID = DecentWorldApp.getInstance().getDwID();
		String sql = "userID = ?";
		new Delete().from(MomentEntity.class).where(sql, userID).execute();
		return true;
	}

	/**
	 * 发布朋友圈
	 * 
	 * @param dwID
	 *            用户的ID
	 * @param content
	 *            文字内容
	 * @param type
	 *            类型：文字（0）、语音（1）、图片（2）
	 * @param level
	 *            发布级别：所有（0）、朋友（1）、亲友（2）
	 * @param files
	 *            文件：语音（最多一个）、图片（最多9张）
	 * @param blocklist
	 *            不让某些人看
	 * @param onlyshowtolist
	 *            只给某些人肯
	 * @param handler
	 *            回调
	 */
	public void publish(MomentEntity entity, File[] files, ArrayList<String> blocklist, ArrayList<String> onlyshowtolist,
			final Handler handler, final int requestCode) {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("dwID", userID);
		map.put("publisherName", entity.getPublisherName());
		map.put("content", entity.getContent());
		map.put("type", entity.getContentType() + "");
		map.put("level", entity.getLevel() + "");
		map.put("money", entity.getMoney() + "");
		LogUtils.i(
				TAG,
				"publish...begin,dwID=" + userID + ",publisherName=" + entity.getPublisherName() + ",content="
						+ entity.getContent() + ",type=" + entity.getContentType() + ",level=" + entity.getLevel());
		sendUrl.httpRequestWithPublish(map, files, blocklist, onlyshowtolist, Constants.CONTEXTPATH
				+ ConstantNet.API_MOMENT_PUBLISH, new HttpCallBack() {
			@Override
			public void onFailure(String e) {
				LogUtils.i(TAG, "publish...onFailure,cause by:" + e);
				Message message = Message.obtain();
				message.what = requestCode;
				message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
				message.obj = Constants.NET_WRONG;
				handler.sendMessage(message);
			}

			@Override
			public void onSuccess(String resultJSON, ResultBean resultBean) {
				LogUtils.i(TAG, "publish...end,resultJSON=" + resultJSON);
				if (resultBean.getResultCode() == 2222) {
					LogUtils.i(TAG, "publish...success,resultBean.getMsg=" + resultBean.getMsg());
					Message message = Message.obtain();
					message.what = requestCode;
					message.arg1 = ConstantNet.NET_REQUEST_SUCCESS;
					message.obj = "发布朋友圈成功";
					handler.sendMessage(message);
				} else {
					LogUtils.i(TAG, "publish...failure,resultBean.getMsg=" + resultBean.getMsg());
					Message message = Message.obtain();
					message.what = requestCode;
					message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
					message.obj = resultBean.getMsg();
					handler.sendMessage(message);
				}
			}
		});
	}

	/**
	 * 下拉刷新
	 * 
	 * @param index
	 *            为客户端已储存的最大的朋友圈的ID，即已储存的最新的朋友圈ID,如果没有则传默认值0；
	 * @param commentIndex
	 *            为客户端已储存的最大的评论的ID，即已储存的最新的评论ID,如果没有则传默认值 0；
	 * @param handler
	 *            处理返回结果
	 * @param requestCode
	 *            请求码，用于区分返回的结果
	 */
	public void downRefresh(long index, long commentIndex, final Handler handler, final int requestCode) {
		// 写业务逻辑
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("dwID", userID);
		map.put("index", String.valueOf(index));
		map.put("commentIndex", String.valueOf(commentIndex));
		LogUtils.i(TAG, "refresh...begin,dwID=" + userID + ",index=" + index + ",commentIndex=" + commentIndex);
		sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_MOMENT_DOWN_REFRESH, Method.GET,
				new HttpCallBack() {
					@Override
					public void onSuccess(String resultJSON, ResultBean resultBean) {
						LogUtils.i(TAG, "refresh...onSuccess,resultBean.getResultCode=" + resultBean.getResultCode()
								+ ",resultBean.getMsg=" + resultBean.getMsg() + ",resultBean.getData=" + resultBean.getData());
						if (resultBean.getResultCode() == 2222) {
							LogUtils.i(TAG, "refresh...success");
							Message message = Message.obtain();
							message.what = requestCode;
							message.arg1 = ConstantNet.NET_REQUEST_SUCCESS;
							message.obj = resultBean.getData().toString();
							handler.sendMessage(message);
						} else if (resultBean.getResultCode() == 3333) {
							LogUtils.i(TAG, "refresh...failure");
							Message message = Message.obtain();
							message.what = requestCode;
							message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
							message.obj = "下拉刷新失败";
							handler.sendMessage(message);
						}
					}

					@Override
					public void onFailure(String e) {
						LogUtils.i(TAG, "refresh...onFailure");
						Message message = Message.obtain();
						message.what = requestCode;
						message.arg1 = ConstantNet.NET_REQUEST_FAILURE;
						message.obj = Constants.NET_WRONG;
						handler.sendMessage(message);
					}
				});

	}

	/**
	 * 下拉刷新
	 * 
	 * @param index
	 *            为客户端已储存的最大的朋友圈的ID，即已储存的最新的朋友圈ID
	 * @param publisher
	 *            发布者ID
	 * @param handler
	 *            处理返回结果
	 * @param requestCode
	 *            请求码，用于区分返回的结果
	 */
	public void upRefresh(long index, String publisher, Handler handler, int requestCode) {
		// 写业务逻辑

	}

	/**
	 * 处理下拉刷新返回的结果
	 * 
	 * @param resultJson
	 *            从服务器请求的数据
	 * @return 当size = 0时，表示没有数据
	 */
	public ArrayList<MomentEntity> processDownRefreshResult(String resultJson) {
		LogUtils.i(TAG, "下拉刷新获取的结果为：" + resultJson);
		ArrayList<MomentEntity> momentEntities = new ArrayList<MomentEntity>();
		JSONObject object = JSON.parseObject(resultJson);
		// 判断是否为最新数据
		String momentsJson = object.getString("moments");
		String commentsJson = object.getString("comments");
		if (CommUtil.isBlank(momentsJson) && CommUtil.isBlank(commentsJson)) {
			LogUtils.i(TAG, "已经是最新数据");
			return momentEntities;
		}
		// 解析作品圈实体
		if (CommUtil.isNotBlank(momentsJson)) {
			JSONArray momentsArray = JSON.parseArray(momentsJson);
			MomentEntity momentEntity;
			if (momentsArray != null && momentsArray.size() > 0) {
				for (int i = 0; i < momentsArray.size(); i++) {
					momentEntity = new MomentEntity();
					JSONObject moment = momentsArray.getJSONObject(i);
					momentEntity.setCommentCount(moment.getIntValue("comment"));
					momentEntity.setContent(moment.getString("content"));
					momentEntity.setContentType(moment.getIntValue("contentType"));
					momentEntity.setPublishTime(moment.getLongValue("date"));
					momentEntity.setDislikeCount(moment.getIntValue("dislike"));
					momentEntity.setDownCount(moment.getIntValue("down"));
					momentEntity.setPublisherID(moment.getString("dwID"));
					momentEntity.setRemoteID(moment.getLongValue("id"));
					momentEntity.setLevel(moment.getIntValue("level"));
					momentEntity.setLikeCount(moment.getIntValue("like"));
					momentEntity.setPublisherName(moment.getString("publisherName"));
					if (moment.getIntValue("contentType") != DWMessage.TXT) {
						momentEntity.setRemoteUrl(moment.getString("url"));
					}
					momentEntity.save();
					momentEntities.add(0, momentEntity);
				}
			}
		}

		// 解析作品圈评论实体
		if (CommUtil.isNotBlank(momentsJson)) {
			// 解析数据

		}
		return momentEntities;
	}

}
