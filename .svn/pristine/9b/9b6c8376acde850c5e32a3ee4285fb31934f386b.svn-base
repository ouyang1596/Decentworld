package cn.sx.decentworld.activity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.R;
import cn.sx.decentworld.bean.MyChatRoom;
import cn.sx.decentworld.common.CommUtil;
import cn.sx.decentworld.common.ConstantIntent;
import cn.sx.decentworld.common.ConstantNet;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.component.ToastComponent;
import cn.sx.decentworld.dialog.TrueOrFalseDialogFragment;
import cn.sx.decentworld.dialog.TrueOrFalseDialogFragment.OnTrueOrFalseClickListener;
import cn.sx.decentworld.network.SendUrl;
import cn.sx.decentworld.network.SendUrl.HttpCallBack;
import cn.sx.decentworld.network.entity.ResultBean;
import cn.sx.decentworld.network.request.ChatRoomInfoSettingAndGetting;
import cn.sx.decentworld.network.utils.JsonUtils;
import cn.sx.decentworld.utils.ImageLoaderHelper;
import cn.sx.decentworld.utils.ImageUtils;
import cn.sx.decentworld.widget.CircularImageView;

import com.android.volley.Request.Method;
import com.googlecode.androidannotations.annotations.AfterViews;
import com.googlecode.androidannotations.annotations.Bean;
import com.googlecode.androidannotations.annotations.EActivity;
import com.googlecode.androidannotations.annotations.ViewById;

@EActivity(R.layout.activity_me)
public class ChatRoomMeActivity extends BaseFragmentActivity implements OnClickListener {
	@ViewById(R.id.lv_chatrooms)
	ListView lvChatRooms;
	@ViewById(R.id.tv_create_chatroom)
	TextView tvCreateChatRoom;
	@ViewById(R.id.tv_edit_self_info)
	TextView tvEditSelfInfo;
	@ViewById(R.id.iv_head)
	CircularImageView ivHead;
	@ViewById(R.id.iv_back)
	ImageView ivBack;
	@ViewById(R.id.tv_header_title)
	TextView tvTitle;
	ChatRoomsAdapter adapter;
	@Bean
	ToastComponent toast;
	List<MyChatRoom> mChatRooms;
	public static final int GET_CHATROOMS = 1;
	public static final int CHATROOM_ENTER = 2;
	public static final String CHATROOM_SIZE = "CHATROOM_SIZE";
	public static final String CHATROOM_NICKNAME = "CHATROOM_NICKNAME";
	public static final String ROOMID = "roomID";
	@Bean
	ChatRoomInfoSettingAndGetting chatRoomInfoSettingAndGetting;
	private Handler mHandler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case GET_CHATROOMS:
				List<MyChatRoom> chatrooms = (List<MyChatRoom>) JsonUtils.json2BeanArray(msg.obj.toString(), MyChatRoom.class);
				mChatRooms.clear();
				mChatRooms.addAll(chatrooms);
				// ImageLoaderHelper.clearCache();
				adapter.notifyDataSetChanged();
				setHead();
				break;
			case CHATROOM_ENTER:
				Intent intent = new Intent(mContext, ChatRoomChatActivity_.class);
				intent.putExtra("json_data", msg.obj.toString());
				startActivity(intent);
				break;
			}
		};
	};

	@AfterViews
	public void init() {
		mChatRooms = new ArrayList<MyChatRoom>();
		initAdapter();
		tvTitle.setText("我的聊天室");
		ivBack.setVisibility(View.VISIBLE);
		ivBack.setOnClickListener(this);
		tvCreateChatRoom.setOnClickListener(this);
		tvEditSelfInfo.setOnClickListener(this);
	}

	private void initAdapter() {
		adapter = new ChatRoomsAdapter();
		lvChatRooms.setAdapter(adapter);
	}

	@Override
	protected void onResume() {
		super.onResume();
		getRooms();
	}

	// 判断是否有创建主题
	private boolean ifHasSubject;
	private String headIcon;

	private void setHead() {
		if (null == mChatRooms || mChatRooms.size() <= 0) {
			ImageLoaderHelper.mImageLoader.displayImage(
					ImageUtils.getIconByDwID(DecentWorldApp.getInstance().getDwID(), ImageUtils.ICON_MAIN), ivHead,
					ImageLoaderHelper.mOptions);
			return;
		}
		for (int i = 0; i < mChatRooms.size(); i++) {
			String subjectName = mChatRooms.get(i).subjectName;
			if (null != subjectName && subjectName.length() > 0) {
				headIcon = mChatRooms.get(i).ownerIcon;
				ifHasSubject = true;
				break;
			}
		}
		if (ifHasSubject) {
			ImageLoaderHelper.mImageLoader.displayImage(headIcon, ivHead, ImageLoaderHelper.mOptions);
		} else {
			ImageLoaderHelper.mImageLoader.displayImage(
					ImageUtils.getIconByDwID(DecentWorldApp.getInstance().getDwID(), ImageUtils.ICON_MAIN), ivHead,
					ImageLoaderHelper.mOptions);
		}
	}

	private void getRooms() {
		HashMap<String, String> map = new HashMap<String, String>();
		map.put(Constants.DW_ID, DecentWorldApp.getInstance().getDwID());
		chatRoomInfoSettingAndGetting.getChatRooms(map, mHandler);
	}

	@Override
	public void onClick(View view) {
		Intent intent;
		switch (view.getId()) {
		case R.id.tv_create_chatroom:
			intent = new Intent(mContext, ChatRoomPayActivity_.class);
			startActivity(intent);
			break;
		case R.id.tv_edit_self_info:
			intent = new Intent(mContext, ChatRoomEditMyInfoActivity_.class);
			if (null == mChatRooms || mChatRooms.size() <= 0) {
				intent.putExtra(CHATROOM_SIZE, 0);
				intent.putExtra(CHATROOM_NICKNAME, "");
			} else {
				intent.putExtra(CHATROOM_SIZE, 1);
				intent.putExtra(CHATROOM_NICKNAME, mChatRooms.get(0).ownerNickName);
			}
			startActivity(intent);
			break;
		case R.id.iv_back:
			finish();
			break;
		}
	}

	class ChatRoomsAdapter extends BaseAdapter implements OnClickListener {
		private Integer mPosition;

		@Override
		public int getCount() {
			return mChatRooms == null ? 0 : mChatRooms.size();
		}

		@Override
		public MyChatRoom getItem(int position) {
			return mChatRooms.get(position);
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public View getView(int position, View con, ViewGroup arg2) {
			ViewHolder vh;
			if (null == con) {
				vh = new ViewHolder();
				con = View.inflate(mContext, R.layout.item_my_chatrooms, null);
				vh.tvOnLineNum = (TextView) con.findViewById(R.id.tv_online_count);
				vh.tvSelfIntroduce = (TextView) con.findViewById(R.id.tv_self_introduce);
				vh.tvSubjectName = (TextView) con.findViewById(R.id.tv_subject_name);
				vh.ivOwnerIcon = (CircularImageView) con.findViewById(R.id.iv_detail);
				vh.tvSelfNickName = (TextView) con.findViewById(R.id.tv_self_nickname);
				vh.ivChatRoomEnter = (ImageView) con.findViewById(R.id.iv_chatroom_enter);
				vh.tvSubjectList = (TextView) con.findViewById(R.id.tv_mysubject_list);
				vh.tvChargeAmount = (TextView) con.findViewById(R.id.rb_fee_scale);
				vh.ivRoomBackground = (ImageView) con.findViewById(R.id.iv_bg);
				vh.ivRoomBackground.setOnClickListener(this);
				vh.tvNewTheme = (TextView) con.findViewById(R.id.tv_new_theme);
				vh.tvSubjectContent = (TextView) con.findViewById(R.id.tv_subject_content);
				vh.tvEdit = (TextView) con.findViewById(R.id.tv_edit);
				vh.viewMySubjectList = con.findViewById(R.id.view_mysubject_list);
				vh.viewEdit = con.findViewById(R.id.view_edit);
				vh.viewDeleteSubject = con.findViewById(R.id.view_delete_subject);
				vh.tvDeleteCurrentSubject = (TextView) con.findViewById(R.id.tv_delete_subject);
				vh.tvDeleteCurrentSubject.setOnClickListener(this);
				con.setTag(vh);
			} else {
				vh = (ViewHolder) con.getTag();
			}
			MyChatRoom chatroom = mChatRooms.get(position);
			vh.tvOnLineNum.setText(chatroom.onLineNum);
			vh.tvSelfIntroduce.setText(chatroom.ownerIntroduction);
			if (null == chatroom.subjectName || "".equals(chatroom.subjectName)) {
				vh.tvEdit.setVisibility(View.GONE);
				vh.viewEdit.setVisibility(View.GONE);
			} else {
				vh.tvEdit.setVisibility(View.VISIBLE);
				vh.viewEdit.setVisibility(View.VISIBLE);
			}
			vh.tvSubjectName.setText(chatroom.subjectName);
			vh.tvSelfNickName.setText(chatroom.ownerNickName);
			vh.tvChargeAmount.setText("¥ " + chatroom.chargeAmount);
			if (CommUtil.isNotBlank(chatroom.ownerIcon)) {
				ImageLoaderHelper.mImageLoader.displayImage(chatroom.ownerIcon, vh.ivOwnerIcon, ImageLoaderHelper.mOptions);
			} else {
				vh.ivOwnerIcon.setImageResource(R.drawable.ic_launcher);
			}
			if (CommUtil.isNotBlank(chatroom.roomBackground)) {
				ImageLoaderHelper.mImageLoader.displayImage(chatroom.roomBackground, vh.ivRoomBackground,
						ImageLoaderHelper.mOptions);
			} else {
				vh.ivRoomBackground.setImageResource(R.drawable.ic_launcher);
			}
			vh.ivRoomBackground.setTag(Constants.ITEM_POSITION, position);
			vh.tvDeleteCurrentSubject.setTag(Constants.ITEM_POSITION, position);
			vh.tvNewTheme.setTag(Constants.ITEM_POSITION, position);
			vh.tvEdit.setTag(Constants.ITEM_POSITION, position);
			vh.ivChatRoomEnter.setTag(Constants.ITEM_POSITION, position);
			vh.tvSubjectList.setTag(Constants.ITEM_POSITION, position);
			vh.tvNewTheme.setOnClickListener(this);
			vh.tvEdit.setOnClickListener(this);
			vh.ivChatRoomEnter.setOnClickListener(this);
			if (null == chatroom.subjectAmount || Float.valueOf(chatroom.subjectAmount) <= 0) {
				vh.tvSubjectList.setVisibility(View.GONE);
				vh.viewMySubjectList.setVisibility(View.GONE);
			} else {
				vh.tvSubjectList.setVisibility(View.VISIBLE);
				vh.tvSubjectList.setOnClickListener(this);
				vh.viewMySubjectList.setVisibility(View.VISIBLE);
			}
			if (CommUtil.isBlank(chatroom.subjectID)) {
				vh.viewDeleteSubject.setVisibility(View.GONE);
				vh.tvDeleteCurrentSubject.setVisibility(View.GONE);
			} else {
				vh.viewDeleteSubject.setVisibility(View.VISIBLE);
				vh.tvDeleteCurrentSubject.setVisibility(View.VISIBLE);
			}
			return con;
		}

		class ViewHolder {
			TextView tvSubjectName, tvSelfIntroduce, tvOnLineNum, tvSelfNickName, tvChargeAmount, tvSubjectList, tvNewTheme,
					tvEdit, tvSubjectContent, tvDeleteCurrentSubject;
			CircularImageView ivOwnerIcon;
			ImageView ivRoomBackground, ivChatRoomEnter;
			View viewMySubjectList, viewEdit, viewDeleteSubject;
		}

		@Override
		public void onClick(View view) {
			mPosition = (Integer) view.getTag(Constants.ITEM_POSITION);
			MyChatRoom item = adapter.getItem(mPosition);
			Intent intent;
			switch (view.getId()) {
			case R.id.tv_new_theme:
				intent = new Intent(mContext, ChatRoomAddThemeActivity_.class);
				intent.putExtra(ChatRoomMeActivity.ROOMID, item.roomID);
				startActivity(intent);
				break;
			case R.id.tv_edit:
				intent = new Intent(mContext, ChatRoomEditActivity_.class);
				intent.putExtra(ROOMID, item.roomID);
				startActivity(intent);
				break;
			case R.id.iv_chatroom_enter:
				requestEnterChatRoom(item);
				break;
			case R.id.tv_mysubject_list:
				intent = new Intent(mContext, ChatRoomMySubjectListActivity_.class);
				intent.putExtra(Constants.MY_CHATROOM, item);
				startActivity(intent);
				break;
			case R.id.tv_delete_subject:
				TrueOrFalseDialogFragment trueOrFalseDialogFragment = new cn.sx.decentworld.dialog.TrueOrFalseDialogFragment();
				trueOrFalseDialogFragment.setOnTrueOrFalseClickListener(mOnTrueOrFalseClickListener);
				trueOrFalseDialogFragment.setTips("是否删除此话题");
				trueOrFalseDialogFragment.setObj(item);
				trueOrFalseDialogFragment.show(getSupportFragmentManager(), "trueOrFalseDialogFragment");
				break;
			case R.id.iv_bg:
				intent = new Intent(mContext, TopicContentActivity_.class);
				intent.putExtra("roomID", item.roomID);
				intent.putExtra("nickName", item.ownerNickName);
				intent.putExtra(ConstantIntent.SELF_INTRODUCE, item.ownerIntroduction);
				startActivity(intent);
				break;
			}
		}

		private Handler mDeletHandler = new Handler() {
			public void handleMessage(android.os.Message msg) {
				mChatRooms.remove(mPosition);
				notifyDataSetChanged();
				getRooms();
			};
		};
		private OnTrueOrFalseClickListener mOnTrueOrFalseClickListener = new OnTrueOrFalseClickListener() {

			@Override
			public void onTrueOrFalseClick(TrueOrFalseDialogFragment dialog, View view) {
				switch (view.getId()) {
				case R.id.tv_cancel:
					break;
				case R.id.tv_ensure:
					MyChatRoom myChatRoom = (MyChatRoom) dialog.getObj();
					HashMap<String, String> map = new HashMap<String, String>();
					map.put(Constants.DW_ID, DecentWorldApp.getInstance().getDwID());
					map.put("roomID", myChatRoom.roomID);
					map.put("subjectID", "" + myChatRoom.subjectID);
					chatRoomInfoSettingAndGetting.deleteSubject(map, ConstantNet.API_DELETE_SUBJECT, mDeletHandler);
					break;
				}
			}
		};
	}

	private SendUrl sendUrl;

	public void requestEnterChatRoom(MyChatRoom info) {
		showProgressDialog();
		sendUrl = new SendUrl(mContext);
		HashMap<String, String> map = new HashMap<String, String>();
		map.put("dwID", DecentWorldApp.getInstance().getDwID());
		map.put("roomID", info.roomID);
		map.put("nickName", info.ownerNickName);
		sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH_OPENFIRE + "/joinChatRoom", Method.GET, new HttpCallBack() {

			@Override
			public void onSuccess(String response, ResultBean msg) {
				hideProgressDialog();
				if (msg.getResultCode() == 2222) {
					Message message = new Message();
					message.what = CHATROOM_ENTER;
					message.obj = msg.getData().toString();
					mHandler.sendMessage(message);
				} else {
					showToast(msg.getMsg());
				}
			}

			@Override
			public void onFailure(String e) {
				hideProgressDialog();
				showToast(Constants.NET_WRONG);
			}

			private void showToast(final String data) {
				runOnUiThread(new Runnable() {

					@Override
					public void run() {
						toast.show(data);
					}
				});
			}
		});
	}

	private ProgressDialog mProDialog;

	private void showProgressDialog() {
		if (null == mProDialog) {
			mProDialog = ProgressDialog.show(mContext, null, "loading");
		} else {
			mProDialog.show();
		}
	}

	private void hideProgressDialog() {
		runOnUiThread(new Runnable() {
			public void run() {
				if (null != mProDialog) {
					mProDialog.hide();
				}
			}
		});
	}
}
