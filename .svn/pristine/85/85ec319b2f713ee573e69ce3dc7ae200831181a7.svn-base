package cn.sx.decentworld.activity;

import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

import android.content.Intent;
import android.os.Handler;
import android.support.v4.app.FragmentManager;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.R;
import cn.sx.decentworld.component.KeyboardComponent;
import cn.sx.decentworld.component.ToastComponent;
import cn.sx.decentworld.component.ui.RegisterComponent;
import cn.sx.decentworld.utils.AES;
import cn.sx.decentworld.widget.ClearEditText;

import com.googlecode.androidannotations.annotations.AfterViews;
import com.googlecode.androidannotations.annotations.Bean;
import com.googlecode.androidannotations.annotations.EActivity;
import com.googlecode.androidannotations.annotations.ViewById;

@EActivity(R.layout.activity_register_set_password)
public class RegisterSetPasswordActivity extends BaseFragmentActivity {
	@ViewById(R.id.btn_OK)
	Button btnOk;
	@ViewById(R.id.tv_header_title)
	TextView tvTitle;
	@ViewById(R.id.iv_back)
	ImageView ivBack;
	@ViewById(R.id.et_realName)
	ClearEditText etRealName;
	@ViewById(R.id.etv_reset_pwd)
	EditText etvPwd;
	@ViewById(R.id.iv_pwd_is_show)
	ImageView ivPwdIsShow;
	@ViewById(R.id.root_activity_register_set_password)
	LinearLayout llRegisterSetPassword;
	private boolean pwdIsShow = false;
	@Bean
	ToastComponent toast;
	@Bean
	RegisterComponent registerComponent;
	private FragmentManager fragmentManager;
	private Handler mRegisterHandle = new Handler() {
		public void handleMessage(android.os.Message msg) {
			DecentWorldApp.getInstance().setUserName(RegisterComponent.tel);
			Intent intent = new Intent(RegisterSetPasswordActivity.this, LoginActivity_.class);
			startActivity(intent);
		};
	};

	@AfterViews
	public void init() {
		openKeyboard();
		tvTitle.setText("设置密码");
		llRegisterSetPassword.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				closeKeyBoard();
			}
		});
		fragmentManager = getSupportFragmentManager();
		int length = etvPwd.length();
		setBtnState(length);
		etvPwd.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
		ivPwdIsShow.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if (pwdIsShow) {
					etvPwd.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
					ivPwdIsShow.setImageResource(R.drawable.hide_password);
					pwdIsShow = false;
				} else {
					etvPwd.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_NORMAL);
					ivPwdIsShow.setImageResource(R.drawable.show_password);
					pwdIsShow = true;
				}
			}
		});
		etvPwd.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
				int length = etvPwd.length();
				setBtnState(length);
			}

			@Override
			public void beforeTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {

			}

			@Override
			public void afterTextChanged(Editable arg0) {

			}
		});
		btnOk.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				if (etvPwd.length() <= 0) {
					toast.show("请先输入密码");
					return;
				}
				String password = AES.encode(etvPwd.getText().toString());
				if (etRealName.length() <= 0) {
					toast.show("请先输入实名");
					return;
				}
				HashMap<String, String> map = new HashMap<String, String>();
				map.put("password", password);
				map.put("realName", etRealName.getText().toString());
				map.put("occupation", RegisterNickActivity.registerInfo.occupation);
				map.put("sex", RegisterNickActivity.registerInfo.sex);
				map.put("nickName", RegisterNickActivity.registerInfo.nickName);
				File[] file = new File[3];
				for (Map.Entry<Integer, String> entry : RegisterNickActivity.registerInfo.picPaths.entrySet()) {
					file[entry.getKey()] = new File(entry.getValue());
				}
				registerComponent.register(map, file, mRegisterHandle);
			}
		});
		ivBack.setVisibility(View.VISIBLE);
		ivBack.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				closeKeyBoard();
				finish();
			}
		});
	}

	private void setBtnState(int length) {
		if (length <= 0) {
			btnOk.setEnabled(false);
			btnOk.setTextColor(getResources().getColor(R.color.rg_tv_blue_press));
			btnOk.setBackgroundResource(R.drawable.bg_btn_yellow_pressed_shape);
		} else {
			btnOk.setEnabled(true);
			btnOk.setTextColor(getResources().getColor(R.drawable.rg_tv_color_selector));
			btnOk.setBackgroundResource(R.drawable.bg_btn_yellow_selector);
		}
	}

	// 对键盘的操作
	@Bean
	KeyboardComponent keyboardComponent;

	/**
	 * 打开软键盘
	 */
	private void openKeyboard() {
		Timer timer = new Timer();
		timer.schedule(new TimerTask() {
			public void run() {
				keyboardComponent.openKeybord(etvPwd);
			}
		}, 500);
	}

	/**
	 * 关闭软键盘
	 */
	private void closeKeyBoard() {
		keyboardComponent.closeKeyboard(etvPwd);
	}

}
