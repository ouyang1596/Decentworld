package cn.sx.decentworld.common;

import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.simple.eventbus.EventBus;

import android.content.Context;
import android.util.Log;
import cn.sx.decentworld.listener.NotifyCallback;
import cn.sx.decentworld.logSystem.LogUtils;

import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.location.AMapLocationListener;

/**
 * Created by HH Date: 2015/6/24 0024 Time: 下午 7:51
 */
public class LocationProvider implements AMapLocationListener {
	private static final String TAG = "LocationProvider";
	public AMapLocationClientOption mLocationOption = null;
	public AMapLocationClient mLocationClient = null;
	private static final int TIME_INTERVAL = 1000 * 60 * 30;// debug
	private static final int TIME_OUT = 1000 * 10;
	private Context context;
	private static Map<String, NotifyCallback> callbackMap;
	private static LinkedList<NotifyCallback> callbackList;
	public static double latitude, longitude;
	public static boolean isLocationing = false;
	private static LocationProvider instance;

	public static LocationProvider getInstance(Context context) {
		if (instance == null) {
			instance = new LocationProvider(context);
		}
		return instance;
	}

	public LocationProvider(Context context) {
		this.context = context;
	}

	public void startLocation(boolean onceLocation) {
		if (mLocationClient == null) {
			mLocationClient = new AMapLocationClient(context);
		}
		// 初始化定位参数
		if (mLocationOption == null) {
			mLocationOption = new AMapLocationClientOption();
		}
		// 设置网络超时时间
		mLocationOption.setHttpTimeOut(TIME_OUT);
		// 设置定位模式为高精度模式，Battery_Saving为低功耗模式，Device_Sensors是仅设备模式
		mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);
		// 设置是否返回地址信息（默认返回地址信息）
		mLocationOption.setNeedAddress(true);
		// 设置是否只定位一次,默认为false
		mLocationOption.setOnceLocation(onceLocation);
		// 设置是否强制刷新WIFI，默认为强制刷新
		mLocationOption.setWifiActiveScan(true);
		// 设置是否允许模拟位置,默认为false，不允许模拟位置
		mLocationOption.setMockEnable(false);
		// 设置定位间隔,单位毫秒,默认为2000ms
		mLocationOption.setInterval(TIME_INTERVAL);
		// 设置定位回调监听
		mLocationClient.setLocationListener(this);
		// 给定位客户端对象设置定位参数
		mLocationClient.setLocationOption(mLocationOption);
		// 启动定位
		mLocationClient.startLocation();
		isLocationing = true;
	}

	public void startLocation(NotifyCallback callback) {
		if (callbackList == null) {
			callbackList = new LinkedList<NotifyCallback>();
		}
		callbackList.add(callback);
		startLocation(true);
	}

	public LocationProvider setNotify(String key, NotifyCallback callback) {
		if (callbackMap == null) {
			callbackMap = new ConcurrentHashMap<String, NotifyCallback>();
		}
		callbackMap.put(key, callback);
		return this;
	}

	public void removeNotify(String key) {
		if (callbackMap != null) {
			callbackMap.remove(key);
		}
	}

	public void clearNotify() {
		if (callbackMap != null) {
			callbackMap.clear();
		}
	}

	public void stop() {
		if (mLocationClient != null) {
			mLocationClient.stopLocation();
			mLocationClient.onDestroy();
		}
		mLocationClient = null;
	}

	@Override
	public void onLocationChanged(AMapLocation loc) {
		LogUtils.d(TAG, null == loc ? "onLocationChanged error " : "onLocationChanged loc " + loc.getLocationDetail());
		if (loc == null) {
			return;
		}
		if (loc.getErrorCode() != 0) {
			EventBus.getDefault().post(loc.getErrorInfo(), NotifyByEventBus.NT_LOCATION_FAILURE);
			Log.e(LocationProvider.class.getName(), "定位失败，错误信息：" + loc.getErrorInfo());
			return;
		}
		isLocationing = false;
		Log.d(Constants.TAG, "当前位置：" + loc.getLatitude() + "," + loc.getLongitude());
		if (callbackMap != null && !callbackMap.isEmpty()) {
			for (Map.Entry<String, NotifyCallback> entry : callbackMap.entrySet()) {
				try {
					entry.getValue().execute(loc);
				} catch (Exception e) {
					Log.w(Constants.TAG, "回调出错，有可能是执行环境已改变", e);
				}
			}
		}
		if (CommUtil.isNotEmpty(callbackList)) {
			NotifyCallback callback;
			while ((callback = callbackList.poll()) != null) {
				try {
					callback.execute(loc);
				} catch (Exception e) {
					Log.w(Constants.TAG, "回调出错，有可能是执行环境已改变", e);
				}
			}
		}
		// stop();
	}
}
