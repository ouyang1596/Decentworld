/**
 * 
 */
package cn.sx.decentworld.task;

import org.simple.eventbus.EventBus;

import android.os.AsyncTask;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.bean.NotifyByEventBus;
import cn.sx.decentworld.common.XmppHelper;
import cn.sx.decentworld.listener.ConnectOpenFireListener;
import cn.sx.decentworld.utils.NetworkUtils;

/**
 * 
 * @ClassName: ConnectOpenFireTask.java
 * @Description: 获取Connection实例，判断是否已经连接，如果已经连接，则返回true;否则进行登录openfire的操作，登录成功后返回ture;
 * 最终将登陆结果回调给监听器的实现方法；
 * @author: cj
 * @date: 2016年3月5日 下午1:45:30
 */
public class ConnectOpenFireTask extends AsyncTask<String, Void, Integer>
{
    /**
     * 常量
     */
    private static final String TAG = ConnectOpenFireTask.class.getSimpleName();
    public static final int SUCCESS = 1;
    public static final int FAILURE = 0;

    // 监听
    private ConnectOpenFireListener mConnectedOpenFireListener;

    /**
     * 设置监听
     * @param listener
     */
    public void setOnConnectOpenFireListener(ConnectOpenFireListener listener)
    {
        this.mConnectedOpenFireListener = listener;
    }

    @Override
    protected Integer doInBackground(String... params)
    {
        return XmppHelper.openFireLogin(params[0],params[1]);
    }

    @Override
    protected void onPostExecute(Integer result)
    {
        super.onPostExecute(result);
        // 回调连接成功或者失败的监听接口
        if (result == SUCCESS)
        {
            if (null != mConnectedOpenFireListener)
            {
                mConnectedOpenFireListener.onConnetedOpenFire(SUCCESS);
                //重连成功后发送上线的通知
                XmppHelper.sendPresence();
            }
        }
        else if (result == FAILURE)
        {
            if (null != mConnectedOpenFireListener)
            {
                mConnectedOpenFireListener.onConnetedOpenFire(FAILURE);
            }
        }
    }
    
 
}
