/**
 * 
 */
package cn.sx.decentworld.engine;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.bean.DWMessage;
import cn.sx.decentworld.common.CommUtil;
import cn.sx.decentworld.common.ConstantNet;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.entity.dao.MomentDao;
import cn.sx.decentworld.entity.db.MomentEntity;
import cn.sx.decentworld.listener.GetMomentEntityListener;
import cn.sx.decentworld.listener.NetCallback;
import cn.sx.decentworld.network.SendUrl;
import cn.sx.decentworld.network.SendUrl.HttpCallBack;
import cn.sx.decentworld.network.entity.ResultBean;
import cn.sx.decentworld.utils.LogUtils;
import cn.sx.decentworld.utils.NetworkUtils;

import com.activeandroid.query.Delete;
import com.activeandroid.query.Select;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.android.volley.Request.Method;

/**
 * @ClassName: MomentEngine.java
 * @Description: 作品圈的业务逻辑
 * @author: cj
 * @date: 2016年2月26日 下午6:17:20
 */
public class MomentEngine
{
    private static final String TAG = "MomentEngine";
    private SendUrl sendUrl;
    private String userID;

    /**
     * 构造函数
     */
    public MomentEngine()
    {
        sendUrl = new SendUrl();
        userID = DecentWorldApp.getInstance().getDwID();
    }

    /**
     * 进入朋友圈时初始化数据
     * 
     * @return
     */
    public void initData(GetMomentEntityListener listener)
    {
        List<MomentEntity> allData = new MomentDao().getAllData();
        if (allData != null && allData.size() > 0)
        {
            listener.onSuccess(allData);
        }
        else
        {
            if (NetworkUtils.isNetWorkConnected(DecentWorldApp.getGlobalContext()))
            {
                // 从网络获取数据
                downRefreshE(0, 0, listener);
            }
        }
    }

    /**
     * 清除作品圈的缓存数据
     */
    public boolean clearCacheData()
    {
        return new MomentDao().cleanAllData();
    }

    /**
     * 下拉刷新
     * 
     * @param remoteID
     *            为客户端已储存的最大的朋友圈的ID，即已储存的最新的朋友圈ID,如果没有则传默认值0；
     * @param commentIndex
     *            为客户端已储存的最大的评论的ID，即已储存的最新的评论ID,如果没有则传默认值 0；
     * @param listener
     *            回调监听
     */
    public void downRefresh(long remoteID, long commentIndex, GetMomentEntityListener listener)
    {
        downRefreshE(remoteID, commentIndex, listener);
    }

    /**
     * 上拉拉刷新
     * 
     * @param index
     *            为客户端已储存的最大的朋友圈的ID，即已储存的最新的朋友圈ID
     * @param publisher
     *            发布者ID
     */
    public void upRefresh(long index, String publisherID)
    {
        // 写业务逻辑

    }

    /**
     * 发布朋友圈
     * 
     * @param entity
     *            朋友圈实体
     * @param files
     *            文件（音频和图片）
     * @param blocklist
     *            不让谁看
     * @param onlyshowtolist
     *            提醒谁看
     * @param listener
     *            回调监听
     */
    public void publish(MomentEntity entity, File[] files, ArrayList<String> blocklist, ArrayList<String> onlyshowtolist, NetCallback listener)
    {
        publishE(entity, files, blocklist, onlyshowtolist, listener);
    }

    // //////////////////////////////////////////////私有方法///////////////////////////////////////////
    /**
     * 发送通知
     * 
     * @param handler
     * @param what
     * @param info
     */
    private void sendHandlerMsg(Handler handler, int what, String info)
    {
        Message message = Message.obtain();
        message.what = what;
        message.obj = info;
        handler.sendMessage(message);
    }

    private void downRefreshE(long remoteID, long commentIndex, final GetMomentEntityListener listener)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                switch (msg.what)
                {
                    case -1:
                        // 获取错误，网络错误
                        listener.onFailure(msg.obj.toString());
                        break;
                    case 0:
                        // 获取成功
                        String result = msg.obj.toString();
                        processDownRefreshResult(result, listener);
                        break;
                    case 1:
                        // 获取失败，其它原因
                        listener.onFailure(msg.obj.toString());
                        break;
                    default:
                        break;
                }
            };
        };
        // 写业务逻辑
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", userID);
        map.put("index", String.valueOf(remoteID));
        map.put("commentIndex", String.valueOf(commentIndex));
        LogUtils.i(TAG, "refresh...begin,dwID=" + userID + ",index=" + remoteID + ",commentIndex=" + commentIndex);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_MOMENT_DOWN_REFRESH, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String resultJSON, ResultBean resultBean)
            {
                LogUtils.i(TAG, "refresh...onSuccess,resultJSON:" + resultJSON);
                if (resultBean.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "refresh...success");
                    sendHandlerMsg(handler, 0, resultBean.getData().toString());
                }
                else if (resultBean.getResultCode() == 3333)
                {
                    LogUtils.i(TAG, "refresh...failure");
                    sendHandlerMsg(handler, 1, "下拉刷新失败");
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "refresh...onFailure");
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }
        });
    }

    /**
     * 处理下拉刷新返回的结果
     * 
     * @param resultJson
     *            从服务器请求的数据
     * @return 当size = 0时，表示没有数据
     */
    private void processDownRefreshResult(String resultJson, GetMomentEntityListener listener)
    {
        LogUtils.i(TAG, "下拉刷新获取的结果为：" + resultJson);
        ArrayList<MomentEntity> momentEntities = new ArrayList<MomentEntity>();
        JSONObject object = JSON.parseObject(resultJson);
        // 判断是否为最新数据
        String momentsJson = object.getString("moments");
        String commentsJson = object.getString("comments");
        if (CommUtil.isBlank(momentsJson) && CommUtil.isBlank(commentsJson))
        {
            LogUtils.i(TAG, "已经是最新数据");
            listener.onSuccess(momentEntities);
            return;
        }
        // 解析作品圈实体
        if (CommUtil.isNotBlank(momentsJson))
        {
            JSONArray momentsArray = JSON.parseArray(momentsJson);
            MomentEntity momentEntity;
            if (momentsArray != null && momentsArray.size() > 0)
            {
                for (int i = 0; i < momentsArray.size(); i++)
                {
                    momentEntity = new MomentEntity();
                    JSONObject moment = momentsArray.getJSONObject(i);
                    momentEntity.setCommentCount(moment.getIntValue("comment"));
                    momentEntity.setContent(moment.getString("content"));
                    momentEntity.setContentType(moment.getIntValue("contentType"));
                    momentEntity.setPublishTime(moment.getLongValue("date"));
                    momentEntity.setDislikeCount(moment.getIntValue("dislike"));
                    momentEntity.setDownCount(moment.getIntValue("down"));
                    momentEntity.setPublisherID(moment.getString("dwID"));
                    momentEntity.setRemoteID(moment.getLongValue("id"));
                    momentEntity.setLevel(moment.getIntValue("level"));
                    momentEntity.setLikeCount(moment.getIntValue("like"));
                    momentEntity.setPublisherName(moment.getString("publisherName"));
                    if (moment.getIntValue("contentType") != DWMessage.TXT)
                    {
                        momentEntity.setRemoteUrl(moment.getString("url"));
                    }
                    momentEntity.setMomentState(MomentEntity.STATE_SUCCESSED);
                    momentEntity.save();
                    momentEntities.add(0, momentEntity);
                }
            }
        }

        // 解析作品圈评论实体
        if (CommUtil.isNotBlank(momentsJson))
        {
            // 解析数据

        }
        listener.onSuccess(momentEntities);
    }

    /**
     * 
     * @param entity
     *            朋友圈实体
     * @param files
     *            文件：语音（最多一个）、图片（最多9张）
     * @param blocklist
     *            不让谁看
     * @param onlyshowtolist
     *            提醒谁看
     * @param listener
     *            回调监听
     */
    private void publishE(MomentEntity entity, File[] files, ArrayList<String> blocklist, ArrayList<String> onlyshowtolist, final NetCallback listener)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                switch (msg.what)
                {
                    case -1:
                        // 获取错误，网络错误
                        listener.onFailure(msg.obj.toString());
                        break;
                    case 0:
                        // 获取成功
                        listener.onSuccess(msg.obj.toString());
                        break;
                    case 1:
                        // 获取失败，其它原因
                        listener.onFailure(msg.obj.toString());
                        break;
                    default:
                        break;
                }
            };
        };
        HashMap<String, String> map = new HashMap<String, String>();
        // 用户ID
        map.put("dwID", userID);
        // 发布者显示的名字（实名、昵称）
        map.put("publisherName", entity.getPublisherName());
        // 文字内容
        map.put("content", entity.getContent());
        // 类型：文字（0）、语音（1）、图片（2）
        map.put("type", entity.getContentType() + "");
        // 发布级别：所有（0）、朋友（1）、亲友（2）
        map.put("level", entity.getLevel() + "");
        // 发布
//        map.put("money", entity.getMoney() + "");
        LogUtils.i(TAG,
                "publish...begin,dwID=" + userID + ",publisherName=" + entity.getPublisherName() + ",content=" + entity.getContent() + ",type=" + entity.getContentType() + ",level="
                        + entity.getLevel());
        sendUrl.httpRequestWithPublish(map, files, blocklist, onlyshowtolist, Constants.CONTEXTPATH + ConstantNet.API_MOMENT_PUBLISH, new HttpCallBack()
        {
            @Override
            public void onSuccess(String resultJSON, ResultBean resultBean)
            {
                LogUtils.i(TAG, "publish...end,resultJSON=" + resultJSON);
                if (resultBean.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "publish...success,resultBean.getMsg=" + resultBean.getMsg());
                    //需要返回remoteID和身家（-1 和 100）
                    sendHandlerMsg(handler, 0   , "发布朋友圈成功");
                }
                else
                {
                    LogUtils.i(TAG, "publish...failure,resultBean.getMsg=" + resultBean.getMsg());
                    sendHandlerMsg(handler, 1, "发布朋友失败");
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "publish...onFailure,cause by:" + e);
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }
        });
    }

}
