/**
 * Copyright (C) 2013-2014 EaseMob Technologies. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cn.sx.decentworld.utils;

import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.NetworkInfo.State;
import android.provider.Settings;

/**
 * 
 * @ClassName: NetworkUtils.java
 * @Description: 检查网络的工具
 * @author: cj
 * @date: 2015年12月22日 上午10:21:18
 */
public class NetworkUtils {
	private static final String TAG = "CommonUtils";
	// 连接关闭
	public static final int CONNECTION_CLOSED = 0;
	public static final String CONNECTION_CLOSED_STR = "连接关闭";
	// 发生错误时，关闭连接（此处主要为IOException）
	public static final int CONNECTION_CLOSED_ERROR = 1;
	public static final String CONNECTION_CLOSED_ERROR_STR = "关闭连接";
	// 重连中
	public static final int RECONNECTING_IN = 2;
	public static final String RECONNECTING_IN_STR = "重连中";
	// 重连成功
	public static final int RECONNECTION_SUCCESSFUL = 3;
	public static final String RECONNECTION_SUCCESSFUL_STR = "重连成功";
	// 重连失败
	public static final int RECONNECTION_FAILED = 4;
	public static final String RECONNECTION_FAILED_STR = "重连失败";

	/**
	 * 检测网络是否可用
	 * 
	 * @param context
	 * @return
	 */
	public static boolean isNetWorkConnected(Context context) {
		if (context != null) {
			ConnectivityManager conMan = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
			NetworkInfo mNetworkInfo = conMan.getActiveNetworkInfo();
			if (mNetworkInfo != null) {
				return mNetworkInfo.isAvailable();
			}
		}
		return false;
	}

	/**
	 * 获取网络状态
	 * 
	 * @param context
	 * @return
	 */
	public static NetworkInfo getActiveNetwork(Context context) {
		if (context == null)
			return null;
		ConnectivityManager conMan = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		if (conMan == null)
			return null;
		NetworkInfo aActiveInfo = conMan.getActiveNetworkInfo(); // 获取活动网络连接信息
		return aActiveInfo;
	}

	/**
	 * WiFi是否开启
	 * 
	 * @param context
	 * @return
	 */
	public static boolean isWifiOpen(Context context) {
		ConnectivityManager conMan = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		State wifi = conMan.getNetworkInfo(ConnectivityManager.TYPE_WIFI).getState();
		if (wifi == State.CONNECTED) {
			return true;
		}
		return false;
	}

	/**
	 * 数据流量是否开启(显示3G网络连接状态)
	 * 
	 * @param context
	 * @return
	 */
	public static boolean isMobileOpen(Context context) {
		ConnectivityManager conMan = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		State mobile = conMan.getNetworkInfo(ConnectivityManager.TYPE_WIFI).getState();
		if (mobile == State.CONNECTED) {
			return true;
		}
		return false;
	}

	/**
	 * 打开网络设置
	 * 
	 * @param context
	 */
	public static void openNetSetting(Context context) {
		ConnectivityManager conMan = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		State mobile = conMan.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState();
		State wifi = conMan.getNetworkInfo(ConnectivityManager.TYPE_WIFI).getState();

		if (mobile == State.CONNECTED || mobile == State.CONNECTING)
			return;
		if (wifi == State.CONNECTED || wifi == State.CONNECTING)
			return;
		context.startActivity(new Intent(Settings.ACTION_WIRELESS_SETTINGS));
	}
}
