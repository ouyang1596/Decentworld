/**
 * 
 */
package cn.sx.decentworld.engine;

import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.R;
import cn.sx.decentworld.bean.UserInfoField.Field;
import cn.sx.decentworld.common.CommUtil;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.entity.SelfUserField;
import cn.sx.decentworld.entity.SelfUserInfo;
import cn.sx.decentworld.entity.dao.DisplayAuthorityDao;
import cn.sx.decentworld.entity.dao.SelfInfoDao;
import cn.sx.decentworld.entity.db.DisplayAuthority;
import cn.sx.decentworld.entity.db.SelfInfoEntity;
import cn.sx.decentworld.entity.db.UserInfo;
import cn.sx.decentworld.logSystem.LogUtils;

import com.activeandroid.query.Select;
import com.alibaba.fastjson.JSON;

/**
 * @ClassName: UserInfoEngine.java
 * @Description: 个人信息管理模块（加载、修改、上传）、其它业务信息不能放到这个类中
 * @author: cj
 * @date: 2016年3月15日 下午3:31:03
 */
public class UserInfoEngine
{
    private static final String TAG = "UserInfoEngine";
    private static UserInfoEngine instance;
    // 用户ID
    private String userID = DecentWorldApp.getInstance().getDwID();
    // 当前用户信息
    private SelfUserInfo mSelfUserInfo;
    private SelfInfoEntity entity;

    private UserInfoEngine()
    {
    }

    /**
     * 获取实例
     * 
     * @return
     */
    public static UserInfoEngine getInstance()
    {
        if (instance == null)
        {
            synchronized (UserInfoEngine.class)
            {
                if (instance == null)
                {
                    instance = new UserInfoEngine();
                }
            }
        }
        return instance;
    }

    // ////////////////////////////////////////////初始化数据//////////////////////////////////////////
    /**
     * 初始化个人信息
     */
    public void initSelfUserInfo( )
    {
        LogUtils.d(TAG, "initSelfUserInfo()");
        entity = SelfInfoDao.query(userID);
        if (entity != null)
        {
            String content = entity.getContent();
            mSelfUserInfo  = JSON.parseObject(content, SelfUserInfo.class);
        }
        else
        {
            LogUtils.e(TAG, "completed() 重数据库中查询SelfInfoEntity==null,userID" + userID);
        }
    }
    
    // ////////////////////////////////////////对方公开的方法////////////////////////////////
    
    /**
     * 保存个人信息到数据库
     */
    public void saveSelfUserInfo(String versionNum)
    {
        //修改版本号
        getSelfUserInfo().setVersionNum(versionNum);
        if(entity!=null)
        {
            entity.setVersionNum(versionNum);
            String content = JSON.toJSONString(mSelfUserInfo);
            entity.setContent(content);
            entity.save();
        }
    }

    /**
     * 获取个人信息
     */
    public SelfUserInfo getSelfUserInfo()
    {
        return mSelfUserInfo;
    }
    
    /**
     * 获取显示的名字，按优先级顺序显示，实名、昵称
     * @return 名字
     */
    public String getShowName()
    {
        /**  显示实名  **/
        SelfUserField realNameField = getSelfUserInfo().getSelfUserField(Field.REALNAME);
        if (realNameField != null)
        {
            boolean displayAuth = realNameField.isDisplayAuth();
            if(displayAuth)
            {
                String fieldValue = realNameField.getFieldValue();
                if (CommUtil.isNotBlank(fieldValue))
                {
                    LogUtils.v(TAG, "getShowName() showRealName="+fieldValue);
                    return fieldValue;
                }
            }
        }
        
        /**  显示昵称  **/
        SelfUserField nickNameField = getSelfUserInfo().getSelfUserField(Field.NICKNAME);
        if (nickNameField != null)
        {
            boolean displayAuth = nickNameField.isDisplayAuth();
            if(displayAuth)
            {
                String fieldValue = nickNameField.getFieldValue();
                if (CommUtil.isNotBlank(fieldValue))
                {
                    LogUtils.v(TAG, "getShowName() showNickName="+fieldValue);
                    return fieldValue;
                }
            }
        }
        LogUtils.v(TAG, "getShowName() the name is empty");
        return "";
    }

    /**
     * 当用户手动退出软件后，调用该函数清理内存中的数据
     */
    public void clear()
    {
        if (instance != null)
        {
            instance = null;
        }
    }



    /**
     * 通知身价改变，改变内存中的数据，同时保存到数据库
     * 
     * @param worth
     */
    public void notifyWorthChanged(float worth)
    {
        LogUtils.i(TAG, "notifyWorthChanged,worth=" + worth);
        if (worth != -1)
        {
            SelfUserField selfUserField = mSelfUserInfo.getSelfUserField(Field.WORTH);
            if(selfUserField!=null)
            {
                selfUserField.setFieldValue(String.valueOf(worth));
            }
            
            if(entity!=null)
            {
                String content = JSON.toJSONString(mSelfUserInfo);
                entity.setContent(content);
                entity.save();
            }
        }
    }

    /**
     * 通知身家改变，改变内存中的数据，同时保存到数据库
     */
    public void notifyWealthChanged(float wealth)
    {
        LogUtils.i(TAG, "notifyWealthChanged,wealth=" + wealth);
        if (wealth != -1)
        {
            SelfUserField selfUserField = mSelfUserInfo.getSelfUserField(Field.WEALTH);
            if(selfUserField!=null)
            {
                selfUserField.setFieldValue(String.valueOf(wealth));
            }
            
            if(entity!=null)
            {
                String content = JSON.toJSONString(mSelfUserInfo);
                entity.setContent(content);
                entity.save();
            }
        }
    }



}
