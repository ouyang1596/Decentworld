/**
 * 
 */
package cn.sx.decentworld.activity.discover;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.R;
import cn.sx.decentworld.activity.BaseFragmentActivity;
import cn.sx.decentworld.adapter.WorkCircleAdapter;
import cn.sx.decentworld.bean.WorkBean;
import cn.sx.decentworld.bean.WorkRefreshRequest;
import cn.sx.decentworld.common.CommUtil;
import cn.sx.decentworld.common.ConstantNet;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.common.MediaManager;
import cn.sx.decentworld.engine.UserInfoEngine;
import cn.sx.decentworld.fragment.PublishFragment;
import cn.sx.decentworld.fragment.PublishFragment.OnPublishChangeListener;
import cn.sx.decentworld.network.SendUrl;
import cn.sx.decentworld.network.SendUrl.HttpCallBack;
import cn.sx.decentworld.network.entity.ResultBean;
import cn.sx.decentworld.network.utils.JsonUtils;
import cn.sx.decentworld.utils.JsonHelper;
import cn.sx.decentworld.utils.LogUtils;
import cn.sx.decentworld.utils.NetworkUtils;
import cn.sx.decentworld.utils.ToastUtil;

import com.android.volley.Request.Method;
import com.googlecode.androidannotations.annotations.AfterViews;
import com.googlecode.androidannotations.annotations.EActivity;
import com.googlecode.androidannotations.annotations.ViewById;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.nui.multiphotopicker.model.ImageItem;

/**
 * @ClassName: WorksCircleActivity.java
 * @Description: 作品圈界面
 * @author: yj
 * @date: 2016年2月22日 下午3:42:08
 */
@EActivity(R.layout.activity_works_cicle)
public class WorksCircleActivity extends BaseFragmentActivity implements OnPublishChangeListener, OnRefreshListener2 {
	@ViewById(R.id.plv_work_circle)
	PullToRefreshListView plvWorkCircle;
	private WorkCircleAdapter mWorkCircleAdapter;
	private PublishFragment mPublishFragment;
	private int height;
	private String data = "[{\"content\":\"阿里郎\",\"dislike\":0,\"down\":0,\"dwID\":\"487066\",\"id\":3,\"like\":0,\"money\":5,\"publisherName\":\"??\",\"report\":0,\"score\":0,\"status\":0,\"time\":1460356498121,\"url\":\"\"}]";
	private SendUrl mSendurl;
	private boolean isRequest;// 判断网络是否正在请求当中
	private int page;
	private HashMap<Integer, WorkRefreshRequest> requestMap = new HashMap<Integer, WorkRefreshRequest>();// 储存分页加载的WorkRefreshRequest对象
	List<WorkBean> mWorkBeans = new ArrayList<WorkBean>();
	private Handler mLoadDataHandler = new Handler() {
		@SuppressWarnings("unchecked")
		public void handleMessage(android.os.Message msg) {
			try {
				JSONObject object = new JSONObject(msg.obj.toString());
				String array = object.getString("new");
				LogUtils.i("bm", "array--" + array);
				List<WorkBean> workBeans = (List<WorkBean>) JsonUtils.json2BeanArray(array, WorkBean.class);
				mWorkBeans.addAll(workBeans);
				mWorkCircleAdapter.notifyDataSetChanged();
				String version = object.getString("version");
				Map map = JsonHelper.toMap(version);
				request.setClientVersion(map);
			} catch (JSONException e) {
				LogUtils.e("bm", e.getLocalizedMessage());
			}
		};
	};

	@AfterViews
	void inti() {
		measureHeight();
		initView();
		loadData();
	}

	/**
	 * 获取屏幕的宽高
	 */
	private void measureHeight() {
		WindowManager wm = this.getWindowManager();
		height = wm.getDefaultDisplay().getHeight();
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void initView() {
		mSendurl = new SendUrl(this);
		mPublishFragment = new PublishFragment();
		mPublishFragment.setOnPublishChangeListener(this);
		plvWorkCircle.setMode(Mode.BOTH);

		View view = View.inflate(mContext, R.layout.layout_work_circle_head, null);
		plvWorkCircle.getRefreshableView().addHeaderView(view);
		plvWorkCircle.setOnRefreshListener(this);
		mWorkCircleAdapter = new WorkCircleAdapter(mContext, mWorkBeans);
		plvWorkCircle.setAdapter(mWorkCircleAdapter);
		getSupportFragmentManager().beginTransaction().add(R.id.fl_publish, mPublishFragment, "mpf").commit();
	}

	private WorkRefreshRequest request;

	/**
	 * 加载数据
	 */
	private void loadData() {
		if (NetworkUtils.isNetWorkConnected(this)) {
			HashMap<String, String> map = new HashMap<String, String>();
			map.put(Constants.DW_ID, DecentWorldApp.getInstance().getDwID());
			request = requestMap.get(page);
			if (null == request) {
				request = new WorkRefreshRequest();
				request.setPage(page);
				requestMap.put(page, request);
			}
			String requestString = JsonUtils.bean2json(request);
			map.put("request", requestString);
			isRequest = true;
			mSendurl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_WORK_REFRESH, Method.POST,
					new HttpCallBack() {

						@Override
						public void onSuccess(String resultJSON, ResultBean resultBean) {
							isRequest = false;
							onRefreshComplete();
							LogUtils.i("bm", "resultBean--" + resultBean.toString());
							if (resultBean.getResultCode() == 2222) {
								Message mesg = mLoadDataHandler.obtainMessage();
								mesg.obj = resultBean.getData().toString();
								mLoadDataHandler.sendMessage(mesg);
							} else {
								showToast(resultBean.getMsg());
							}
						}

						@Override
						public void onFailure(String e) {
							isRequest = false;
							onRefreshComplete();
							showToast(Constants.NET_WRONG);
						}
					});
		} else {
			ToastUtil.showToast("网络连接断开");
		}
	}

	private void showToast(final String msg) {
		runOnUiThread(new Runnable() {

			@Override
			public void run() {
				ToastUtil.showToast(msg);
			}
		});
	}

	/**
	 * 获取屏幕高度
	 * */
	public int getHeight() {
		return height;
	}

	private String text, voiceCoverPath, voiceFilePath;
	private List<ImageItem> imageItems;

	@Override
	public void onPublishChange(int choose) {
		text = mPublishFragment.getText();
		if (CommUtil.isBlank(text)) {
			ToastUtil.showToast("请输入文字内容");
			return;
		}
		File[] file = null;
		if (mPublishFragment.isVoice()) {
			voiceCoverPath = mPublishFragment.getVoiceCoverPath();
			voiceFilePath = mPublishFragment.getVoiceFilePath();
			if (null == voiceFilePath) {
				mPublishFragment.type = PublishFragment.TYPE_TEXT;
			} else {
				mPublishFragment.type = PublishFragment.TYPE_VOICE;
				file = new File[1];
				file[0] = new File(voiceFilePath);
			}
		} else {
			imageItems = mPublishFragment.getImageItems();
			if (null != imageItems && imageItems.size() > 0) {
				file = new File[imageItems.size()];
				for (int i = 0; i < imageItems.size(); i++) {
					file[i] = new File(imageItems.get(i).sourcePath);
				}
				mPublishFragment.type = PublishFragment.TYPE_PICTURE;
			} else {
				file = new File[0];
				mPublishFragment.type = PublishFragment.TYPE_TEXT;
			}
		}
		HashMap<String, String> map = new HashMap<String, String>();
		map.put(Constants.DW_ID, DecentWorldApp.getInstance().getDwID());
		map.put("content", text);
		map.put("type", "" + mPublishFragment.type);
		LogUtils.i("bm", "type--" + mPublishFragment.type);
		map.put("level", "" + choose);
		map.put("publisherName", UserInfoEngine.getInstance().getShowName());
		map.put("money", "5");// 取值范围5-100
		mSendurl.httpRequestWithImage(map, file, Constants.CONTEXTPATH + ConstantNet.API_MOMENT_PUBLISH, new HttpCallBack() {

			@Override
			public void onSuccess(String resultJSON, ResultBean resultBean) {
				if (resultBean.getResultCode() == 2222) {
					showToast("succ");
				} else {
					showToast(resultBean.getMsg());
				}
			}

			@Override
			public void onFailure(String e) {
				showToast(Constants.NET_WRONG);
			}
		});
	}

	@Override
	public void onHeightChnage(int height) {
		LogUtils.i("bm", "height--" + height);
		LayoutParams layoutParams = plvWorkCircle.getLayoutParams();
		layoutParams.height = this.height - height - 50;
		plvWorkCircle.setLayoutParams(layoutParams);
	}

	@Override
	public void onPullDownToRefresh(PullToRefreshBase refreshView) {
		if (isRequest) {
			ToastUtil.showToast("正在请求中。。。");
			return;
		}
		request.setClientVersion(null);
		loadData();
	}

	@Override
	public void onPullUpToRefresh(PullToRefreshBase refreshView) {
		if (isRequest) {
			ToastUtil.showToast("正在请求中。。。");
			return;
		}
		page++;
		loadData();
	}

	public void onRefreshComplete() {
		runOnUiThread(new Runnable() {

			@Override
			public void run() {
				plvWorkCircle.onRefreshComplete();
			}
		});
	}

	@Override
	protected void onStop() {
		super.onStop();
		MediaManager.stop();
	}
}
