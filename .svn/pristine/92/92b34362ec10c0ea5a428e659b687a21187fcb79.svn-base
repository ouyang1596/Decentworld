/**
 * 
 */
package cn.sx.decentworld.task;

import org.jivesoftware.smack.SmackException.NotConnectedException;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.tcp.XMPPTCPConnection;
import org.simple.eventbus.EventBus;

import android.content.Context;
import cn.sx.decentworld.bean.DWMessage;
import cn.sx.decentworld.bean.MsgAndInfo;
import cn.sx.decentworld.bean.NotifyByEventBus;
import cn.sx.decentworld.bean.UserSessionInfo;
import cn.sx.decentworld.common.XmppHelper;
import cn.sx.decentworld.engine.ConversationEngine;
import cn.sx.decentworld.engine.UserInfoEngine;
import cn.sx.decentworld.logSystem.LogUtils;
import cn.sx.decentworld.manager.MsgNotifyManager;
import cn.sx.decentworld.network.utils.JsonUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

/**
 * @ClassName: ProcessMessageThread.java
 * @Description:
 * @author: cj
 * @date: 2015年11月28日 上午11:48:00
 */
public class ProcessMessageThread extends DWPacketHandler
{
    public static final String TAG = "ProcessMessageThread";

    public ProcessMessageThread(Message msg, Context context)
    {
        super(msg, context);
    }

    public ProcessMessageThread()
    {
    }

    @Override
    public void run()
    {
        /** subject ="chat" **/
        Message message = (Message) packet;
        try
        {
            /**
             * 处理逻辑为 1.先将监听到的消息保存到数据库 2.通知更新会话列表
             * 3.通知更新消息表（将消息路由到对应的ChatActivity界面）
             */
            LogUtils.i(TAG, "监听到一条文字消息subject= chat：" + message.getBody());
            JSONObject jsonObject = JSON.parseObject(message.getBody());
            String s_msg = jsonObject.getString("msg");
            String s_userSessionInfo = jsonObject.getString("userSessionInfo");

            LogUtils.i(TAG, "s_userSessionInfo=" + s_userSessionInfo);
            // 构造UserSessionInfo
            UserSessionInfo userSessionInfo = (UserSessionInfo) JsonUtils.json2Bean(s_userSessionInfo, UserSessionInfo.class);
            JSONObject jsonObject2 = JSONObject.parseObject(s_userSessionInfo);
            userSessionInfo.setFriendID(jsonObject2.getString("id"));
            
            // 构造DWMessage
            DWMessage dwMessage = DWMessage.toDWMessage(s_msg);
            dwMessage.setSendSuccess(1);// 接收成功
            dwMessage.setMessageType(DWMessage.TXT);
            dwMessage.setDirect(DWMessage.Direct.RECEIVE.getIndex());
            //test
            float wealth = UserInfoEngine.getInstance().getUserInfo().getWealth();
            dwMessage.setBody(dwMessage.getBody()+"\n"+"接收之前身家："+wealth+"\n"+"接收之后身家："+dwMessage.getWealth());
            //test
            dwMessage.save();
            processMsg(new MsgAndInfo(dwMessage , userSessionInfo));
            sendAck(dwMessage.getMid());
        }
        catch (Exception e)
        {
            LogUtils.e(TAG, "解析单聊文字消息异常,cause by:" + e);
            e.printStackTrace();
        }
    }

    /**
     * 处理接收到的消息
     * 
     * @param dwMessage
     */
    private void processMsg(MsgAndInfo msgAndInfo)
    {
        DWMessage dwMessage = msgAndInfo.getDwMessage();
        // 确保为非聊天室信息
        if (dwMessage.getChatType() != DWMessage.CHAT_TYPE_MULTI)
        {
            // 通知聊天界面更新
            EventBus.getDefault().post(dwMessage, NotifyByEventBus.NT_UPDATE_CHAT_LISTVIEW_RECEIVE_MSG);
            // 显示消息通知
            MsgNotifyManager.getInstance().SingleNotify(msgAndInfo);
            ConversationEngine.getInstance().refreshConv(msgAndInfo, "【单聊文字,发送更新会话列表的通知】");
        }
    }
    

    /**
     * 给服务器回执
     */
    private void sendAck(long mid)
    {
        Message message = new Message();
        message.setSubject("RECV");
        message.setBody(""+mid);
        XMPPTCPConnection connection = XmppHelper.getConnection();
        if(connection!=null)
        {
            try
            {
                connection.sendPacket(message);
            }
            catch (NotConnectedException e)
            {
                LogUtils.e(TAG, "发送给服务器回执时出现异常，mid="+mid,true);
                e.printStackTrace();
            }
        }
    }
}
