/**
 * 
 */
package cn.sx.decentworld.entity.dao;

import java.util.List;

import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.entity.db.ConversationList;
import cn.sx.decentworld.entity.db.DWMessage;
import cn.sx.decentworld.logSystem.LogUtils;

import com.activeandroid.query.Delete;
import com.activeandroid.query.Select;

/**
 * @ClassName: DWMessageDao.java
 * @Description: 消息数据库访问
 * @author: cj
 * @date: 2016年4月18日 上午9:56:53
 */
public class DWMessageDao
{
    /**
     * 构造函数
     */
    public DWMessageDao()
    {

    }

    // /////////////////////////////////////////静态方法///////////////////////////////////////////////////////
    
    /**
     * 根据文本消息的packetID搜索唯一的DWMessage
     * @param packetID
     * @return
     */
    public static DWMessage query(String packetID)
    {
        return new Select().from(DWMessage.class).where("txtMsgID = ?", packetID).executeSingle();
    }

    /**
     * 查找消息记录
     */
    public static DWMessage query(long mid)
    {
        return new Select().from(DWMessage.class).where("mid = ?", mid).executeSingle();
    }
    
    public static List<DWMessage> queryList(ConversationList conv)
    {
        String sql = "userID=? and chatRelationship=? and chatType=? and messageType!=?" + "and" + "((fromDwId=? and toDwId=?) or (fromDwId=? and toDwId=?))";
        List<DWMessage> list = new Select().from(DWMessage.class)
                .where(sql, conv.getUserID(), conv.getChatRelationship(), conv.getChatType(), DWMessage.NOTIFY, conv.getUserID(), conv.getDwID(), conv.getDwID(), conv.getUserID())
                .orderBy("mid desc").execute();
        return list;
    }
    
    /**
     * 查询指定聊天室的所有信息
     * 
     * @return
     */
    public static List<DWMessage> queryChatRoomMsg(String roomID)
    {
        String sql = "chatType = ? and toDwId = ?";
        return new Select().from(DWMessage.class).where(sql,DWMessage.CHAT_TYPE_MULTI,roomID).orderBy("mid").execute();
    }
    

    // /////////////////////////////////////////私有方法///////////////////////////////////////////////////////
    
    /**
     * 删除消息列表
     */
    public static void deleteAll()
    {
        new Delete().from(DWMessage.class).execute();
    }
    
    /**
     * 删除指定ID号的聊天记录 otherID 对方ID
     */
    public static void delete(String otherID)
    {
        String userID = DecentWorldApp.getInstance().getDwID();
        String sql1 = "userID = ? and fromDwId=? and toDwId= ?";
        new Delete().from(DWMessage.class).where(sql1, userID, userID, otherID).execute();
        String sql2 = "userID = ? and fromDwId=? and toDwId= ?";
        new Delete().from(DWMessage.class).where(sql2, userID, otherID, userID).execute();
    }
    
    /**
     * 退出聊天室删除聊天记录
     * @param roomID
     */
    public static void deleteChatRoomMsg(String roomID)
    {
        new Delete().from(DWMessage.class).where("toDwId = ?", roomID).execute();
    }
    

    /**
     * 获取当聊天室消息条数
     * 
     * @param roomID
     * @return
     */
    public static int getRoomMsgCount(String roomID)
    {
        List<DWMessage> list1 = new Select().from(DWMessage.class).where("toDwId = ? ", roomID).execute();
        return list1.size();
    }
    



    /**
     * 为了获取数据库中的对应者最大mid，获取临时的消息列表
     * 
     * @param userDwID
     * @return
     */
    public static List<DWMessage> getMsgForMid(String userDwID)
    {
        String dwID = DecentWorldApp.getInstance().getDwID();
        // 查找与对方聊天的最新mid
        String sql = "((userID = ? and fromDwId=? and toDwId=? and chatType = ? and chatRelationship = ?)" + "or"
                + "(userID = ? and fromDwId=? and toDwId=? and chatType = ? and chatRelationship = ?))";
        List<DWMessage> temp = new Select().from(DWMessage.class)
                .where(sql, dwID, dwID, userDwID, DWMessage.CHAT_TYPE_SINGLE, DWMessage.CHAT_RELATIONSHIP_FRIEND, dwID, userDwID, dwID, DWMessage.CHAT_TYPE_SINGLE, DWMessage.CHAT_RELATIONSHIP_FRIEND)
                .orderBy("mid asc").execute();
        return temp;
    }
    
    /**
     * 数据库中是否存在指定ID的消息
     * @param packetID 消息ID
     */
    public static boolean contains(String packetID)
    {
        String dwID = DecentWorldApp.getInstance().getDwID();
        DWMessage dwMessage = new Select().from(DWMessage.class).where("userID = ? and txtMsgID = ?",dwID,packetID).executeSingle();
        if(dwMessage!=null)
            return true;
        return false;
    }

}
