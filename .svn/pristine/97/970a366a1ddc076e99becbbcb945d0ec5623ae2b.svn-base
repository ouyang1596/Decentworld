/**
 * 
 */
package cn.sx.decentworld.engine;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.ChatManager;
import org.jivesoftware.smack.SmackException.NotConnectedException;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.packet.Message;

import android.os.Handler;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.bean.DWMessage;
import cn.sx.decentworld.chat.interfaces.SendFileListener;
import cn.sx.decentworld.chat.interfaces.SendPictureListener;
import cn.sx.decentworld.chat.interfaces.SendVoiceListener;
import cn.sx.decentworld.common.CommUtil;
import cn.sx.decentworld.common.ConstantNet;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.common.XmppHelper;
import cn.sx.decentworld.entity.MsgAndInfo;
import cn.sx.decentworld.entity.UserSessionInfo;
import cn.sx.decentworld.entity.dao.ContactUserDao;
import cn.sx.decentworld.entity.db.ContactUser;
import cn.sx.decentworld.logSystem.LogUtils;
import cn.sx.decentworld.network.SendUrl;
import cn.sx.decentworld.network.SendUrl.HttpCallBack;
import cn.sx.decentworld.network.entity.ResultBean;
import cn.sx.decentworld.utils.AES;
import cn.sx.decentworld.utils.ImageUtils;
import cn.sx.decentworld.utils.SPUtils;

import com.activeandroid.query.Select;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.android.volley.Request.Method;

/**
 * @ClassName: ChatSingleHelper.java
 * @Description: 单聊辅助类
 * @author: cj
 * @date: 2016年3月7日 上午11:21:19
 */
public class ChatSingleEngine
{
    public static final String TAG = "ChatSingleEngine";
    public static Object LOCK = new Object();
    public static ChatSingleEngine instance = null;

    /**
     * 私有构造函数，防止产生多个实例
     */
    private ChatSingleEngine()
    {
        // TODO Auto-generated constructor stub
    }

    // ///////////////////////////////初始化//////////////////////////////////////

    /**
     * 获取单聊管理者实例
     * 
     * @return
     */
    public static ChatSingleEngine getInstance()
    {
        if (instance == null)
        {
            synchronized (LOCK)
            {
                if (instance == null)
                    instance = new ChatSingleEngine();
            }
        }
        return instance;
    }

    // ///////////////////////////////私有函数//////////////////////////////////////

    /**
     * 创建一个XMPPMessage
     * 
     * @param otherID
     *            对方的ID
     * @return
     */
    public Message createXmppMessage(String otherID)
    {
        Message message = new Message(otherID + Constants.SERVER_NAME , Message.Type.chat);
        message.setFrom(DecentWorldApp.getInstance().getDwID());
        message.setSubject("chat");
        return message;
    }

    /**
     * 获得临时的tempMaxID
     * 
     * @return
     */
    public long getTempMaxID(List<DWMessage> listMsg)
    {
        long tempMaxID = 0;
        if (listMsg != null && listMsg.size() > 0)
        {
            for (int i = listMsg.size() - 1; i >= 0; i--)
            {
                if (listMsg.get(i).getMessageType() != DWMessage.NOTIFY)
                {
                    tempMaxID = listMsg.get(i).getMid();
                    return tempMaxID;
                }
            }
        }
        LogUtils.i(TAG, "获取的临时tempMaxID=" + tempMaxID);
        return tempMaxID;
    }

    /**
     * 获取聊天管理者
     * 
     * @return
     */
    private ChatManager creatChatManager()
    {
        XMPPConnection connection = XmppHelper.getConnection();
        LogUtils.d(TAG, "creatChatManager...isConnected=" + connection.isConnected() + ",isAuth=" + connection.isAuthenticated());
        if (connection.isConnected())
        {
            if (connection.isAuthenticated())
            {
                LogUtils.d(TAG, "creatChatManager" + connection.getConnectionID() + "已经连接和授权");
                LogUtils.d(TAG, "test : creatChatManager XMPPConnection toString():" + connection.toString());
            }
            else
            {
                LogUtils.d(TAG, "creatChatManager" + connection.getConnectionID() + "已经连接/没有授权");
            }
            return ChatManager.getInstanceFor(connection);
        }
        else
        {
            LogUtils.e(TAG, "creatChatManager" + connection.getConnectionID() + " 没有连接!");
            return null;
        }
    }

    /**
     * 为消息添加当前时间和Token
     * 
     * @param dwMessage
     */
    private void addToken(DWMessage dwMessage)
    {
        long time = System.currentTimeMillis();
        dwMessage.setTime(String.valueOf(time));
        String randomStr = (String) SPUtils.get(DecentWorldApp.getInstance().getApplicationContext(), SPUtils.randomStr, "");
        String token = AES.encode(DecentWorldApp.getInstance().getDwID() + time, randomStr);
        dwMessage.setToken(token);
    }

    // ///////////////////////////////发送文本消息//////////////////////////////////////

    /**
     * 构造一个DWMessage消息对象
     * 
     * @param otherID
     * @param chatType
     * @param chatRelationship
     * @param textContent
     * @return
     */
    public DWMessage createTextDwMessage(String otherID, int chatType, int chatRelationship, long maxID, String textContent)
    {
        DWMessage dwMessage = new DWMessage(DWMessage.TXT , DWMessage.Direct.SEND);
        dwMessage.setTo(otherID);
        dwMessage.setChatType(chatType);
        dwMessage.setChatRelationship(chatRelationship);
        dwMessage.setBody(textContent);
        dwMessage.setMid(maxID);
        
        Message message = new Message();
        dwMessage.setTxtMsgID(message.getPacketID());
        return dwMessage;
    }

    /**
     * 将消息发送出去
     * 
     * @param dwMessage
     * @param listMsg
     * @throws NotConnectedException
     */
    public void sendTextMessage(DWMessage dwMessage,Message message) throws NotConnectedException
    {
        LogUtils.d(TAG, "sendTextMessage() "+dwMessage.toString()+message.toString());
        addToken(dwMessage);
        message.setBody(DWMessage.toJson(dwMessage));
        XMPPConnection connection = XmppHelper.getConnection();
        try
        {
            connection.sendPacket(message);
        }
        catch (NotConnectedException e)
        {
            LogUtils.e(TAG, "sendTextMessage() NotConnectedException:" + e.toString() + ",connection=" + connection.toString() + ",dwMessage=" + dwMessage.toString());
            throw new NotConnectedException();
        }
        finally
        {
            // 保存之前 去掉Token，防止信息泄露
            dwMessage.setToken("");
            dwMessage.save();
        }
    }

    // ///////////////////////////////发送语音信息//////////////////////////////////
    /**
     * 构造一个DWMessage消息对象，在发送一条新的消息时需要调用，重发则不需要调用
     * 
     * @param otherID
     * @param chatType
     * @param chatRelationship
     * @return
     */
    public DWMessage createVoiceDwMessage(String otherID, int chatType, int chatRelationship)
    {
        DWMessage dwMessage = new DWMessage(DWMessage.VOICE , DWMessage.Direct.SEND);
        dwMessage.setTo(otherID);
        dwMessage.setChatType(chatType);
        dwMessage.setChatRelationship(chatRelationship);
        return dwMessage;
    }

    /**
     * 发送语音
     * 
     * @param dwMessage
     * @param listMsg
     * @param picture
     * @param listener
     */
    public void sendVoiceMessage(DWMessage dwMessage, List<DWMessage> listMsg, File voiceFile, float voiceTime, SendVoiceListener listener)
    {
        Message message = new Message();
        dwMessage.setTxtMsgID(message.getPacketID());
        dwMessage.setMid(getTempMaxID(listMsg));
        dwMessage.setUri(voiceFile.getAbsolutePath());
        dwMessage.setVoiceTime(voiceTime);
        dwMessage.ifFromNet = 1;
        // 回调
        listener.onStart();
        if (!XmppHelper.getConnection().isConnected())
        {
            // 出现错误，出现没有连接服务器异常
            listener.onNotConnected();
            return;
        }
        // 发送语音
        sendFileNet(dwMessage, voiceFile, voiceTime, "/sendAudio", listener);
    }

    /**
     * 重新发送语音
     * 
     * @param dwMessage
     * @param listMsg
     * @param listener
     */
    public void reSendVoiceMessage(DWMessage dwMessage, long maxID, SendVoiceListener listener)
    {
        // 修改DWMessage
        dwMessage.setSendSuccess(2);
        dwMessage.setMid(maxID);
        dwMessage.save();
        File voiceFile = new File(dwMessage.getUri());
        float voiceTime = dwMessage.getVoiceTime();

        // 回调
        listener.onStart();
        if (!XmppHelper.getConnection().isConnected())
        {
            // 出现错误，出现没有连接服务器异常
            listener.onNotConnected();
            return;
        }
        // 发送语音
        sendFileNet(dwMessage, voiceFile, voiceTime, "/sendAudio", listener);
    }

    // ///////////////////////////////发送图片信息//////////////////////////////////

    /**
     * 构造一个DWMessage消息对象，在发送一条新的消息时需要调用，重发则不需要调用
     * 
     * @param otherID
     * @param chatType
     * @param chatRelationship
     * @return
     */
    public DWMessage createImageDwMessage(String otherID, int chatType, int chatRelationship)
    {
        DWMessage dwMessage = new DWMessage(DWMessage.IMAGE , DWMessage.Direct.SEND);
        dwMessage.setTo(otherID);
        dwMessage.setChatType(chatType);
        dwMessage.setChatRelationship(chatRelationship);
        return dwMessage;
    }

    /**
     * 发送图片
     * 
     * @param dwMessage
     * @param listMsg
     * @param picture
     * @param listener
     */
    public void sendPictureMessage(DWMessage dwMessage, List<DWMessage> listMsg, File picture, SendPictureListener listener)
    {
        // 构造Message
        Message message = new Message();
        dwMessage.setTxtMsgID(message.getPacketID());
        dwMessage.setMid(getTempMaxID(listMsg));
        dwMessage.setUri(picture.getAbsolutePath());
        dwMessage.setLocalUrl(picture.getAbsolutePath());
        // 回调
        listener.onStart();
        if (!XmppHelper.getConnection().isConnected())
        {
            // 出现错误，出现没有连接服务器异常
            listener.onNotConnected();
            return;
        }
        // 发送图片
        sendFileNet(dwMessage, picture, -1, "/sendPicture", listener);
    }

    /**
     * 重新发送图片
     * 
     * @param dwMessage
     * @param listMsg
     * @param listener
     */
    public void reSendPictureMessage(DWMessage dwMessage, long maxID, SendPictureListener listener)
    {
        // 修改DWMessage
        dwMessage.setSendSuccess(DWMessage.SendStatus.SENDING.getIndex());
        dwMessage.setMid(maxID);
        dwMessage.save();
        File pictureFile = new File(dwMessage.getUri());
        // 回调
        listener.onStart();
        if (!XmppHelper.getConnection().isConnected())
        {
            // 出现错误，出现没有连接服务器异常
            listener.onNotConnected();
            return;
        }
        // 发送图片
        sendFileNet(dwMessage, pictureFile, -1, "/sendPicture", listener);
    }

    // ///////////////////////////////网络请求//////////////////////////////////
    /**
     * 进行网络请求发送文件
     * 
     * @param dwMessage
     * @param file
     * @param fileTime
     * @param api
     * @param listener
     */
    private void sendFileNet(DWMessage dwMessage, File file, float fileTime, String api, final SendFileListener listener)
    {
        final String packetID = dwMessage.getTxtMsgID();
        HashMap<String, String> hashmap = new HashMap<String, String>();
        hashmap.put("dwID", dwMessage.getFrom());
        hashmap.put("toID", dwMessage.getTo());
        hashmap.put("type", dwMessage.getChatType() + "");
        hashmap.put("msgID", dwMessage.getTxtMsgID());
        if (fileTime != -1)
        {
            hashmap.put("length", Math.round(fileTime) + "");
        }

        // 图片文件
        File[] images = new File[]
        { file };

        /** token = dwID + randomStr +key **/
        String dwID = hashmap.get("dwID");
        long time = System.currentTimeMillis();
        String randomStr = (String) SPUtils.get(DecentWorldApp.getInstance().getApplicationContext(), SPUtils.randomStr, "");
        String token = AES.encode(dwID + time, randomStr);
        hashmap.put("randomStr", String.valueOf(time));
        hashmap.put("token", token);
        LogUtils.d(TAG, "sendFileNet...params:" + JSON.toJSONString(hashmap));
        SendUrl sendUrl = new SendUrl(DecentWorldApp.getInstance().getApplicationContext());
        sendUrl.httpRequestWithImage(hashmap, images, Constants.CONTEXTPATH_OPENFIRE + api, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "sendFileWithParams...begin,response:" + response);
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "sendFileWithParams...success");
                    listener.onSuccess();
                }
                else
                {
                    LogUtils.i(TAG, "sendFileWithParams...failure,cause by:" + msg.getMsg());
                    listener.onFailure(packetID, msg.getMsg());
                }
            }

            @Override
            public void onFailure(String e)
            {
                listener.onNetWrong();
            }
        });
    }

    /**
     * 转发语音
     * 
     * @param dwMessage
     * @param temp
     * @param maxID
     *            最大的ID
     * @param listener
     */
    public void transmitVoiceMessage(DWMessage dwMessage, DWMessage temp, long maxID, SendVoiceListener listener)
    {
        Message message = new Message();
        dwMessage.setTxtMsgID(message.getPacketID());
        dwMessage.setMid(maxID);
        dwMessage.setUri(temp.getUri());
        dwMessage.setVoiceTime(temp.getVoiceTime());
        dwMessage.ifFromNet = 1;
        // 回调
        listener.onStart();
        if (!XmppHelper.getConnection().isConnected())
        {
            // 出现错误，出现没有连接服务器异常
            listener.onNotConnected();
            return;
        }
        // 发送语音
        transmitFileNet(dwMessage, temp.getMid(), listener);
    }

    /**
     * 转发图片
     * 
     * @param dwMessage
     * @param temp
     * @param listMsg
     * @param listener
     */
    public void transmitImageMessage(DWMessage dwMessage, DWMessage temp, long maxID, SendPictureListener listener)
    {
        // 构造Message
        Message message = new Message();
        dwMessage.setTxtMsgID(message.getPacketID());
        dwMessage.setMid(maxID);

        dwMessage.setUri(temp.getUri());
        dwMessage.setLocalUrl(temp.getLocalUrl());
        dwMessage.setRemoteUrl(temp.getRemoteUrl());
        // 回调
        listener.onStart();
        if (!XmppHelper.getConnection().isConnected())
        {
            // 出现错误，出现没有连接服务器异常
            listener.onNotConnected();
            return;
        }
        // 发送图片
        transmitFileNet(dwMessage, temp.getMid(), listener);
    }

    private void transmitFileNet(final DWMessage dwMessage, long mid, final SendFileListener listener)
    {
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("msgID", "" + mid);
        map.put("dwID", dwMessage.getFrom());
        map.put("toID", dwMessage.getTo());
        map.put("chatType", "" + dwMessage.getChatType());
        map.put("smackID", dwMessage.getTxtMsgID());
        LogUtils.d(TAG, "transmitFileNet...params:" + JSON.toJSONString(map));
        SendUrl sendUrl = new SendUrl(DecentWorldApp.getInstance().getApplicationContext());
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH_OPENFIRE + Constants.RESEND, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "sendFileWithParams...begin,response:" + response);
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "sendFileWithParams...success");
                    listener.onSuccess();
                }
                else
                {
                    LogUtils.i(TAG, "sendFileWithParams...failure,cause by:" + msg.getMsg());
                    listener.onFailure(dwMessage.getTxtMsgID(), msg.getMsg());
                }
            }

            @Override
            public void onFailure(String e)
            {
                listener.onNetWrong();
            }
        });
    }

    // ///////////////////////////////////////////转发名片消息////////////////////////////////////

    public DWMessage createCardDwMessage(String otherID, int chatType, int chatRelationship)
    {
        DWMessage dwMessage = new DWMessage(DWMessage.CARD , DWMessage.Direct.SEND);
        dwMessage.setTo(otherID);
        dwMessage.setChatType(chatType);
        dwMessage.setChatRelationship(chatRelationship);
        return dwMessage;
    }

    public void sendCardMessage(DWMessage dwMessage, long maxID, ContactUser contactUser) throws NotConnectedException
    {
        // 构造Message
        Message message = new Message(dwMessage.getTo() , Message.Type.chat);
        LogUtils.i(TAG, "发送一张名片，Message.packetID=" + message.getPacketID());
        message.setFrom(dwMessage.getTo());
        message.setSubject("card");

        dwMessage.setSendSuccess(2);
        dwMessage.setTxtMsgID(message.getPacketID());
        dwMessage.setMid(maxID);

        // 发送名片添加的
        dwMessage.setForwardDwId(contactUser.getFriendID());
        dwMessage.setForwardName(contactUser.getShowName());

        Chat chat = creatChatManager().createChat(dwMessage.getTo() + Constants.SERVER_NAME, null);
        try
        {
            /** 添加token **/
            addToken(dwMessage);
            message.setBody(DWMessage.toJson(dwMessage));
            chat.sendMessage(message);
        }
        catch (NotConnectedException e)
        {
            // 没有连接，处理
            dwMessage.setSendSuccess(0);
            throw new NotConnectedException();
        }
        finally
        {
            // 保存之前 去掉Token，防止信息泄露
            dwMessage.setToken("");
            dwMessage.save();
        }
    }

    // /////////////////////////////////////获取单聊历史记录///////////////////////////////////////

    /**
     * 每一页的消息条数，默认为十条
     */
    private static int countSinglePage = 10;

    /**
     * 获取单聊历史记录
     * 
     * @param userID
     * @param otherID
     * @param chatType
     * @param msgList
     * @param getHistoryMsgCallback
     */
    public void getHistoryMsg(String userID, String otherID, int chatType, List<DWMessage> msgList, GetHistoryMsgCallback getHistoryMsgCallback)
    {
        if (msgList.size() > 0)
        {
            // 消息列表中已经存在数据，再次从本地数据库拿取10条记录，传入列表中时间最早的消息mid
            int msgCount = getMsgCount(msgList);
            long minID = -1;
            if (msgCount > 0)
                minID = getMid(msgList);
            LogUtils.i(TAG, "getHistoryMsg...msgCount = " + msgCount + ",minID=" + minID);
            getNextPageMsg(userID, otherID, minID, chatType, getHistoryMsgCallback);
        }
        else
        {
            // 消息列表中没有数据，首先从本地数据库拿取10条记录
            getFistPageMsg(userID, otherID, chatType, getHistoryMsgCallback);
        }
    }

    /**
     * 获取历史记录回调
     */
    public interface GetHistoryMsgCallback
    {
        void onSuccess(List<DWMessage> msgList);

        void onFailure(String cause);
    }

    /**
     * 发送名片给指定的人（即时搜索到人或者是联系人列表中的人）
     * 
     * @param forwardDwId
     *            被转发人的ID
     * @param forwardName
     *            被转发人的名字
     * @param otherID
     *            接收人的ID
     * @param otherNickname
     *            接收人的名字
     * @param otherWorth
     *            接收人的身价
     */
    public void sendCardTo(String forwardDwId, String forwardName, String otherID, String otherNickname, float otherWorth, int userType, SendCardToListener listener)
    {
        sendCardToE(forwardDwId, forwardName, otherID, otherNickname, otherWorth, userType, listener);
    }

    /**
     * 获取历史记录回调
     */
    public interface SendCardToListener
    {
        void onSuccess(DWMessage dwMessage);

        void onFailure(String cause);
    }

    // ////////////////////////////////////////////私有方法//////////////////////////////////////////////////

    /**
     * 计算消息数量，通知消息类型不计算在内
     */
    private int getMsgCount(List<DWMessage> list)
    {
        int i = 0;
        for (DWMessage msg : list)
        {
            if (msg.getMessageType() == DWMessage.NOTIFY)
                continue;
            i++;
        }
        return i;
    }

    /**
     * 获得时间最早的一条消息的mid，不包括通知类型消息
     */
    private long getMid(List<DWMessage> list)
    {
        long minID = 0;
        for (DWMessage msg : list)
        {
            if (msg.getMessageType() != DWMessage.NOTIFY && msg.getMid() != -1)
            {
                minID = msg.getMid();
                return minID;
            }
        }
        return minID;
    }

    /**
     * 第一次获取单聊历史聊天记录
     * 
     * @param dwID
     * @param toID
     * @param chatType
     * @param getHistoryMsgCallback
     */
    private void getFistPageMsg(String dwID, String toID, int chatType, GetHistoryMsgCallback getHistoryMsgCallback)
    {
        String sql = "(userID=? and fromDwId=? and toDwId=? and chatType=?)" + "or" + "(userID=? and fromDwId=? and toDwId=? and chatType= ?)";
        List<DWMessage> temp = new Select().from(DWMessage.class).where(sql, dwID, dwID, toID, chatType, dwID, toID, dwID, chatType).limit(countSinglePage).orderBy("mid desc").execute();// ASC，添加消息id后，排序字段换成消息id
        if (temp.size() > 0)
        {
            LogUtils.i(TAG, "getFistPageMsg...size=" + temp.size());
            getHistoryMsgCallback.onSuccess(temp);
        }
        else
        {
            LogUtils.i(TAG, "getFistPageMsg...get history from net");
            getUserHistoryMsg(dwID, toID, -1, chatType, getHistoryMsgCallback);
        }
    }

    /**
     * 获取单聊聊天记录
     * 
     * @param dwID
     *            当前用户ID
     * @param toID
     *            对方ID
     * @param firstIndex
     *            消息的最小ID
     * @param chatType
     *            聊天类型
     * @param getHistoryMsgCallback
     */
    private void getUserHistoryMsg(String dwID, String toID, long firstIndex, int chatType, final GetHistoryMsgCallback getHistoryMsgCallback)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(android.os.Message msg)
            {
                // 解析下列数据
                List<DWMessage> temp = new ArrayList<DWMessage>();
                switch (msg.what)
                {
                    case -1:
                        // 发送失败，网络错误
                        getHistoryMsgCallback.onFailure(msg.obj.toString());
                        break;
                    case 0:
                        // 成功
                        String result = msg.obj.toString();
                        LogUtils.d(TAG, "获取用户单聊历史记录成功");
                        JSONObject jsonObject = JSON.parseObject(result);
                        JSONArray array = jsonObject.getJSONArray("chatList");
                        if (array == null || array.size() <= 0)
                        {
                            getHistoryMsgCallback.onSuccess(temp);
                            return;
                        }

                        DWMessage dwMessage;
                        for (int i = 0; i < array.size(); i++)
                        {
                            JSONObject ob = array.getJSONObject(i);
                            int messageType = ob.getIntValue("messageType");
                            int direct = ob.getIntValue("direct");// 0 接收 1发送
                            String connectorID = ob.getString("connectorID");
                            String sendTime = ob.getString("sendTime");
                            String dwID = ob.getString("dwID");
                            long id = ob.getLongValue("id");
                            int chatType = ob.getIntValue("chatType");

                            if (direct == DWMessage.Direct.RECEIVE.getIndex())
                            {
                                dwMessage = new DWMessage(messageType , DWMessage.Direct.RECEIVE);
                                dwMessage.setFrom(connectorID);
                                dwMessage.setTo(dwID);
                            }
                            else
                            {
                                dwMessage = new DWMessage(messageType , DWMessage.Direct.SEND);
                                dwMessage.setTo(connectorID);
                                dwMessage.setFrom(dwID);
                            }
                            dwMessage.setTime(sendTime);
                            dwMessage.setMid(id);
                            dwMessage.setChatType(chatType);
                            dwMessage.setSendSuccess(1);
                            if (messageType == DWMessage.TXT)
                            {
                                // 文字消息
                                dwMessage.setBody(ob.getString("message"));
                            }
                            else if (messageType == DWMessage.VOICE)
                            {
                                // 语音消息
                                String data = ob.getString("message");
                                JSONObject object = JSON.parseObject(data);
                                String uri = object.getString("uri");
                                int length = Integer.valueOf(object.getString("length"));
                                dwMessage.setUri(uri);
                                dwMessage.ifFromNet = 0;
                                dwMessage.setRemoteUrl(uri);
                                dwMessage.setVoiceTime(length);
                            }
                            else if (messageType == DWMessage.IMAGE)
                            {
                                // 图片消息
                                String data = ob.getString("message");
                                JSONObject object = JSON.parseObject(data);
                                String uri = object.getString("uri");
                                String img = object.getString("img");
                                File file = ImageUtils.AnalyticThumbnail(img);
                                dwMessage.setUri(file.getAbsolutePath());
                                dwMessage.setRemoteUrl(uri);
                            }
                            else if (messageType == DWMessage.CARD)
                            {
                                // 名片消息
                                String data = ob.getString("message");
                                LogUtils.i(TAG, "messageType=3," + "body=" + ob.toJSONString());
                                JSONObject object = JSON.parseObject(data);
                                String forwardName = object.getString("nickName");
                                String forwardDwId = object.getString("dwID");
                                dwMessage.setForwardDwId(forwardDwId);
                                dwMessage.setForwardName(forwardName);
                            }
                            dwMessage.setIsRead(DWMessage.ReadStatus.YES.getIndex());
                            dwMessage.save();
                            temp.add(dwMessage);
                        }
                        getHistoryMsgCallback.onSuccess(temp);
                        break;
                    case 1:
                        // 获取失败，其它原因
                        getHistoryMsgCallback.onFailure(msg.obj.toString());
                        break;
                    default:
                        break;
                }
            };
        };

        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        map.put("toID", toID);
        map.put("firstIndex", String.valueOf(firstIndex));
        map.put("chatType", String.valueOf(chatType));
        LogUtils.v(TAG, "getUserHistoryMsg...begin:" + JSON.toJSONString(map));
        SendUrl sendUrl = new SendUrl(DecentWorldApp.getGlobalContext());
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_SINGLE_HISTORY_MSG, Method.POST, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.v(TAG, "getUserHistoryMsg...response=" + response);
                if (msg.getResultCode() == 2222)
                {
                    sendHandlerMsg(handler, 0, msg.getData().toString());
                }
                if (msg.getResultCode() == 3333)
                {
                    sendHandlerMsg(handler, 1, msg.getMsg());
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.w(TAG, "getUserHistoryMsg...onFailure,cause by:" + e);
                sendHandlerMsg(handler, -1, "网络错误");
            }
        });
    }

    /**
     * 手动加载十条数据
     * 
     * @param dwID
     *            自己的dwID
     * @param toID
     *            对方的dwID
     * @return
     */
    private void getNextPageMsg(String dwID, String toID, long minMsgID, int chatType, GetHistoryMsgCallback getHistoryMsgCallback)
    {
        if (minMsgID == -1)
        {
            getUserHistoryMsg(dwID, toID, -1, chatType, getHistoryMsgCallback);
        }
        else
        {
            String sql = "((userID = ? and fromDwId=? and toDwId=? and chatType = ?)" + "or" + "(userID = ? and fromDwId=? and toDwId=? and chatType = ?))" + "and mid<?";
            List<DWMessage> temp = new Select().from(DWMessage.class).where(sql, dwID, dwID, toID, chatType, dwID, toID, dwID, chatType, minMsgID).limit(countSinglePage).orderBy("mid desc").execute();// ASC，添加消息id后，排序字段换成消息id
            List<DWMessage> list = new ArrayList<DWMessage>();
            // 选取非通知类型消息
            for (DWMessage msg : temp)
            {
                if (msg.getMessageType() != DWMessage.NOTIFY)
                {
                    list.add(msg);
                }
            }

            if (list.size() > 0)
            {
                // 从数据库拿取十条消息，判断如果大于0条，则返回
                LogUtils.i(TAG, "getNextPageMsg...size=" + list.size());
                getHistoryMsgCallback.onSuccess(list);
            }
            else
            {
                // 否则从网络获取
                LogUtils.i(TAG, "getNextPageMsg...数据库中数据不足，从网络拿取");
                getUserHistoryMsg(dwID, toID, minMsgID, chatType, getHistoryMsgCallback);
            }
        }
    }

    // ///////////////////////////////////////////转发名片给搜索到的人或者是联系人列表中的人//////////////////////////////////////////////
    private void sendCardToE(String forwardDwId, String forwardName, String otherID, String otherNickname, float otherWorth, int userType, SendCardToListener listener)
    {
        // 获取对方的ID和当前用户的关系
        ChatSingleEngine chatSingleEngine = ChatSingleEngine.getInstance();
        int chatRelationship;
        if (ContactUserDao.isContact(otherID))
        {
            chatRelationship = DWMessage.CHAT_RELATIONSHIP_FRIEND;
        }
        else
        {
            chatRelationship = DWMessage.CHAT_RELATIONSHIP_STRANGER;
        }

        // 被转发人的ID和名字
        ContactUser contactUser = new ContactUser();
        contactUser.setFriendID(forwardDwId);
        contactUser.setShowName(forwardName);
        // 查找数据库中最大的mid
        String sql = "userID=? and messageType!=?";
        String userID = DecentWorldApp.getInstance().getDwID();
        List<DWMessage> tempList = new ArrayList<DWMessage>();
        DWMessage midDWMessage = new Select().from(DWMessage.class).where(sql, userID, DWMessage.NOTIFY).orderBy("mid desc").executeSingle();
        if (midDWMessage != null)
        {
            tempList.add(midDWMessage);
        }
        DWMessage dwMessage = chatSingleEngine.createCardDwMessage(otherID, DWMessage.CHAT_TYPE_SINGLE, chatRelationship);
        long maxID = getTempMaxID(tempList);
        try
        {
            chatSingleEngine.sendCardMessage(dwMessage, maxID, contactUser);
            // 刷新会话列表,构建一个UserSessionInfo对象
            UserSessionInfo userSessionInfo = new UserSessionInfo(otherID , otherNickname , otherWorth , userType);
            ConversationEngine.getInstance().refreshConversation(new MsgAndInfo(dwMessage , userSessionInfo), "【发送消息】");
            listener.onSuccess(midDWMessage);
        }
        catch (NotConnectedException e)
        {
            listener.onFailure(Constants.NET_WRONG);
            e.printStackTrace();
        }
    }

    // /////////////////////////////////////////////////私有方法/////////////////////////////////////////
    /**
     * 发送通知
     * 
     * @param handler
     * @param what
     * @param info
     */
    private void sendHandlerMsg(Handler handler, int what, Object info)
    {
        android.os.Message message = android.os.Message.obtain();
        message.what = what;
        message.obj = info;
        handler.sendMessage(message);
    }
}
