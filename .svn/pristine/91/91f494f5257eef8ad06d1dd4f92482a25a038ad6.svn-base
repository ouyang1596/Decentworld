/**
 * 
 */
package cn.sx.decentworld.engine;

import java.util.HashMap;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.Message;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.activity.LoginActivity_;
import cn.sx.decentworld.bean.StrangerInfo;
import cn.sx.decentworld.common.ConstantNet;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.common.LocationProvider;
import cn.sx.decentworld.common.XmppHelper;
import cn.sx.decentworld.listener.NetCallback;
import cn.sx.decentworld.logSystem.LogUtils;
import cn.sx.decentworld.manager.MsgNotifyManager;
import cn.sx.decentworld.network.SendUrl;
import cn.sx.decentworld.network.SendUrl.HttpCallBack;
import cn.sx.decentworld.network.entity.ResultBean;
import cn.sx.decentworld.service.LocationService;
import cn.sx.decentworld.utils.AES;
import cn.sx.decentworld.utils.ExitAppUtils;
import cn.sx.decentworld.utils.sputils.UserInfoHelper;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.android.volley.Request.Method;
import com.umeng.analytics.MobclickAgent;

/**
 * @ClassName: SettingEngine.java
 * @Description: 设置模块业务类
 * @author: cj
 * @date: 2016年4月5日 上午11:30:56
 */
public class SettingEngine
{
    private static final String TAG = "SettingEngine";
    private static SettingEngine mInstance = null;
    private String userID;
    private SendUrl sendUrl;

    /**
     * 
     */
    private SettingEngine()
    {
        Context context = DecentWorldApp.getGlobalContext();
        sendUrl = new SendUrl(context);
        userID = DecentWorldApp.getInstance().getDwID();
    }

    /**
     * 获取实例
     * 
     * @return
     */
    public static SettingEngine getInstance()
    {
        if (mInstance == null)
        {
            synchronized (SettingEngine.class)
            {
                if (mInstance == null)
                    mInstance = new SettingEngine();
            }
        }
        return mInstance;
    }

    // //////////////////////////////////////////共有方法////////////////////////////////////////
    /**
     * 高级设置
     * 
     * @param auth
     *            权限
     * @param listener
     */
    public void setAdvanceAuth(String auth, NetCallback listener)
    {
        setAdvanceAuthE(auth, listener);
    }

    /**
     * 获取高级设置权限
     * 
     * @param listener
     */
    public void getAdvanceAuth(NetCallback listener)
    {
        getAdvanceAuthE(listener);
    }

    /**
     * 登出注销操作
     * 
     * @param context
     */
    public void loginOut(Context context)
    {
        loginOutE(context);
    }

    /**
     * 获取验证码(暂不可用)
     * 
     * @param phoneNum
     * @param listener
     */
    public void getCode(String phoneNum, NetCallback listener)
    {
        requestCodeE(phoneNum, listener);
    }
    
    /**
     * 设置手机号码（暂时不可用）
     * @param phoneNum
     * @param listener
     */
    public void setPhoneNum(String phoneNum, NetCallback listener)
    {
        setPhoneNumE(phoneNum, listener);   
    }
    
    /**
     * 重置密码
     * @param oldPwd 旧密码
     * @param newPwd 新密码
     * @param listener 回调监听
     */
    public void resetPassword(String oldPwd,String newPwd,NetCallback listener)
    {
        oldPwd = AES.encode(oldPwd);
        newPwd = AES.encode(newPwd);
        resetPasswordE(oldPwd, newPwd, listener);
    }
    
    

    // //////////////////////////////////////////私有方法////////////////////////////////////////

    /**
     * 发送通知
     * 
     * @param handler
     * @param what
     * @param object
     */
    private void sendHandlerMsg(Handler handler, int what, Object object)
    {
        Message message = Message.obtain();
        message.what = what;
        message.obj = object;
        handler.sendMessage(message);
    }



    /**
     * 上传高级设置的开关权限
     */
    private void setAdvanceAuthE(String auth, final NetCallback listener)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                switch (msg.what)
                {
                    case -1:
                        listener.onFailure(msg.obj.toString());
                        break;
                    case 0:
                        listener.onSuccess("设置成功");
                        break;
                    case 1:
                        listener.onFailure(msg.obj.toString());
                        break;
                    default:
                        break;
                }
            };
        };

        Context context = DecentWorldApp.getGlobalContext();
        SendUrl sendUrl = new SendUrl(context);
        final String dwID = DecentWorldApp.getInstance().getDwID();

        HashMap<String, String> map = new HashMap<String, String>();
        map.put("auth", auth);
        LogUtils.i(TAG, "setAdvanceAuthE...begin,auth=" + auth);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_SETTING_SET_ADVANCE_AUTH, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "setAdvanceAuthE...begin,msg.getResultCode=" + msg.getResultCode() + ",msg.getMsg=" + msg.getMsg() + ",msg.getData=" + msg.getData());
                if (msg.getResultCode() == 2222)
                {
                    LogUtils.i(TAG, "setAdvanceAuthE...success");
                    sendHandlerMsg(handler, 0, "设置成功");
                }
                if (msg.getResultCode() == 3333)
                {
                    LogUtils.i(TAG, "setAdvanceAuthE...failure,cause by:" + msg.getMsg());
                    sendHandlerMsg(handler, 1, "设置失败");
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "setAdvanceAuthE...onFailure,cause by:" + e);
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }
        });
    }

    /**
     * 获取高级设置的开关权限
     */
    private void getAdvanceAuthE(final NetCallback listener)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                switch (msg.what)
                {
                    case -1:
                        listener.onFailure(msg.obj.toString());
                        break;
                    case 0:
                        listener.onSuccess(msg.obj.toString());
                        break;
                    case 1:
                        listener.onFailure(msg.obj.toString());
                        break;
                    default:
                        break;
                }
            };
        };

        Context context = DecentWorldApp.getGlobalContext();
        SendUrl sendUrl = new SendUrl(context);
        final String dwID = DecentWorldApp.getInstance().getDwID();

        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", dwID);
        LogUtils.i(TAG, "getAdvanceAuthE...begin,dwID=" + dwID);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_SETTING_GET_ADVANCE_AUTH, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "getAdvanceAuth...response:" + response);
                if (msg.getResultCode() == 2222)
                {
                    sendHandlerMsg(handler, 0, msg.getData().toString());
                }
                if (msg.getResultCode() == 3333)
                {
                    LogUtils.i(TAG, "getAdvanceAuth...failure,cause by:" + msg.getMsg());
                    sendHandlerMsg(handler, 1, "获取高级设置权限失败");
                }
            }

            @Override
            public void onFailure(String e)
            {
                LogUtils.i(TAG, "getAuthFromServer...onFailure,cause by:" + e);
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }
        });
    }

    /**
     * 登出注销操作
     */
    private void loginOutE(Context context)
    {
        ProgressDialog pd = null;
        try
        {
            pd = new ProgressDialog(context);
            pd.setMessage("正在退出登录...");
            pd.setCanceledOnTouchOutside(false);
            pd.show();
        }
        catch (Exception e)
        {
            LogUtils.e(TAG, "退出出错");
        }
        UserInfoHelper.clearLogout();
        // umeng 退出
        MobclickAgent.onProfileSignOff();
        // 删除数据库中的某些表
        StrangerInfo.deleteAll();
        // 停止服务(监听和定位)
        LocationProvider.getInstance(context).stop();
        context.stopService(new Intent(context , LocationService.class));
        // 清除内存中的用户数据
        UserInfoEngine.getInstance().clear();
        // 断开与服务器的连接
        XmppHelper.closeConnection();
        Intent intent = new Intent(context , LoginActivity_.class);
        context.startActivity(intent);
        // 清除所有的通知
        for (int i = 1; i < 6; i++)
            MsgNotifyManager.getInstance().Notifyclear(i);
        // 销毁所有Activity
        ExitAppUtils.getInstance().loginout();
        // /////////////////////////
        try
        {
            if (pd != null)
            {
                pd.dismiss();
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    private void requestCodeE(String phoneNum, final NetCallback listener)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                switch (msg.what)
                {
                    case -1:
                        listener.onFailure(msg.obj.toString());
                        break;
                    case 0:
                        JSONObject jsonObject = JSON.parseObject(msg.obj.toString());
                        String code = jsonObject.getString("code");
                        listener.onSuccess(code);
                        break;
                    case 1:
                        listener.onFailure(msg.obj.toString());
                        break;
                    default:
                        break;
                }
            };
        };

        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", userID);
        map.put("phoneNum", phoneNum);
        LogUtils.i(TAG, "requestCodeE...begin,dwID=" + userID + ",phoneNum=" + phoneNum);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + "", Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "requestCodeE...response:" + response);
                if (msg.getResultCode() == 2222)
                {
                    sendHandlerMsg(handler, 0, msg.getData().toString());
                }
                else
                {
                    sendHandlerMsg(handler, 1, msg.getMsg());
                }
            }

            @Override
            public void onFailure(String error)
            {
                LogUtils.i(TAG, "requestCodeE...onFailure,cause by:" + error);
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }
        });
    }

    /**
     * 设置手机号码
     * @param phoneNum
     * @param listener
     */
    private void setPhoneNumE(String phoneNum,final NetCallback listener)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                switch (msg.what)
                {
                    case -1:
                        listener.onFailure(msg.obj.toString());
                        break;
                    case 0:
                        listener.onSuccess(msg.obj.toString());
                        break;
                    case 1:
                        listener.onFailure(msg.obj.toString());
                        break;
                    default:
                        break;
                }
            };
        };
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", userID);
        map.put("phoneNum", phoneNum);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_SET_PHONENUM, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                if (msg.getResultCode() == 2222)
                {
                    sendHandlerMsg(handler, 0, "成功");
                }
                else
                {
                    sendHandlerMsg(handler, 1, msg.getMsg());
                }
            }

            @Override
            public void onFailure(String error)
            {
                LogUtils.i(TAG, "getAuthFromServer...onFailure,cause by:" + error);
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }
        });
    }
    
    /**
     * 重置密码
     * @param oldPwd
     * @param newPwd
     * @param listener
     */
    private void resetPasswordE(String oldPwd,final String newPwd,final NetCallback listener)
    {
        final Handler handler = new Handler()
        {
            public void handleMessage(Message msg)
            {
                switch (msg.what)
                {
                    case -1:
                        listener.onFailure(msg.obj.toString());
                        break;
                    case 0:
                        listener.onSuccess(msg.obj.toString());
                        break;
                    case 1:
                        listener.onFailure(msg.obj.toString());
                        break;
                    default:
                        break;
                }
            };
        };
        HashMap<String, String> map = new HashMap<String, String>();
        map.put("dwID", userID);
        map.put("oldpwd", oldPwd);
        map.put("newpwd", newPwd);
        LogUtils.i(TAG, "resetPasswordE...begin,dwID="+userID+",oldPwd="+oldPwd+",newPwd="+newPwd);
        sendUrl.httpRequestWithParams(map, Constants.CONTEXTPATH + ConstantNet.API_RESET_PASSWORD, Method.GET, new HttpCallBack()
        {
            @Override
            public void onSuccess(String response, ResultBean msg)
            {
                LogUtils.i(TAG, "resetPasswordE...response:"+response);
                if (msg.getResultCode() == 2222)
                {
                    sendHandlerMsg(handler, 0, newPwd);
                }
                else
                {
                    sendHandlerMsg(handler, 1, "失败");
                }
            }

            @Override
            public void onFailure(String error)
            {
                sendHandlerMsg(handler, -1, Constants.NET_WRONG);
            }
        });
    }

}
