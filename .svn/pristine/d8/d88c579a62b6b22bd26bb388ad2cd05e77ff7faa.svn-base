/**
 * 
 */
package cn.sx.decentworld.fragment.main;

import java.util.Map;
import java.util.Map.Entry;

import android.content.Intent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.RelativeLayout;
import android.widget.TextView;
import cn.sx.decentworld.R;
import cn.sx.decentworld.activity.discover.MomentActivity_;
import cn.sx.decentworld.activity.discover.WorksCircleActivity_;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.component.ToastComponent;
import cn.sx.decentworld.engine.MomentEngine;
import cn.sx.decentworld.fragment.BaseFragment;
import cn.sx.decentworld.utils.LogRecord;
import cn.sx.decentworld.utils.LogUtils;
import cn.sx.decentworld.utils.ThreadUtils;

import com.googlecode.androidannotations.annotations.AfterViews;
import com.googlecode.androidannotations.annotations.Bean;
import com.googlecode.androidannotations.annotations.EFragment;
import com.googlecode.androidannotations.annotations.ViewById;
import com.umeng.analytics.MobclickAgent;

/**
 * @ClassName: FindFragment.java
 * @Description:
 * @author: cj
 * @date: 2016年1月11日 上午11:17:09
 */
@EFragment(R.layout.fragment_main_find)
public class FindFragment extends BaseFragment implements OnClickListener
{
    /**
     * 常量
     */
    private static final String TAG = "FindFragment";

    /**
     * 工具类
     */
    @Bean
    ToastComponent toast;

    /**
     * 界面资源
     */
    // 标题
    @ViewById(R.id.tv_header_title)
    TextView tvTitle;
    // 作品圈
    @ViewById(R.id.rl_find_works_circle)
    RelativeLayout rl_find_works_circle;
    // 朋友圈
    @ViewById(R.id.rl_find_friends_circle)
    RelativeLayout rl_find_friends_circle;
    // 兴趣组
    @ViewById(R.id.rl_find_interest_group)
    RelativeLayout rl_find_interest_group;

    /**
     * 变量
     */
    @AfterViews
    void init()
    {
        initVar();
        initListener();
    }

    /**
     * 初始化变量
     */
    private void initVar()
    {
        tvTitle.setText(getResources().getString(R.string.main_bottom_find));
    }

    /**
     * 初始化监听
     */
    private void initListener()
    {
        rl_find_works_circle.setOnClickListener(this);
        rl_find_friends_circle.setOnClickListener(this);
        rl_find_interest_group.setOnClickListener(this);
    }

    @Override
    protected void lazyLoad()
    {
        LogUtils.i(TAG, "lazyLoad");

    }

    @Override
    public void turnToTab(int tab)
    {
        // TODO Auto-generated method stub
    }

    private int count = 0;

    /**
     * 点击事件
     */
    @Override
    public void onClick(View v)
    {
        Intent intent;
        switch (v.getId())
        {
            case R.id.rl_find_works_circle:
                // 作品圈
                // toast.show(Constants.DEVELOPING_NOTIFY);
                intent = new Intent(getActivity() , WorksCircleActivity_.class);
                startActivity(intent);

                // clearMomentEntityData();
                // manualConnect();
                break;
            case R.id.rl_find_friends_circle:
                // 朋友圈
                // toast.show(Constants.DEVELOPING_NOTIFY);
                intent = new Intent(getActivity() , MomentActivity_.class);
                startActivity(intent);
                break;
            case R.id.rl_find_interest_group:
                // 兴趣组
                toast.show(Constants.DEVELOPING_NOTIFY);

                break;
            default:
                break;
        }
    }

    /**
     * 测试代码 ：清除作品圈的缓存数据
     */

    private MomentEngine momentEngine;
    private void clearMomentEntityData()
    {
        momentEngine = new MomentEngine();
        boolean clearCacheData = momentEngine.clearCacheData();
        if (clearCacheData)
        {
            toast.show("清理缓存成功");
        }
        else
        {
            toast.show("清理缓存失败");
        }
    }

    /**
     * 测试代码: 触发手动重连
     */
    private void manualConnect()
    {
        // 判断当前是否断开连接且系统不会再去重连（判断重连线程是否存在）
        ThreadUtils.printAllThreads();

        // 判断原来的线程是否存在，如果不存在，则开启一个重连线程
        // Thread name:Smack Reconnection Manager

        // 否则触发重连
        Map<String, String> threadInfo = ThreadUtils.getThreadInfo();
        for (Entry<String, String> entry : threadInfo.entrySet())
        {
            String key = entry.getKey();
            String value = entry.getValue();
            LogRecord.getInstance().saveGeneralLog(key, value);
        }
        LogRecord.getInstance().sendLogReport();
        // toast.show("报告已经发送");
    }
    
    @Override
    public void onResume()
    {
        super.onResume();
        MobclickAgent.onPageStart(TAG);
    }

    @Override
    public void onPause()
    {
        super.onPause();
        MobclickAgent.onPageEnd(TAG);
    }

}
