/**
 * 
 */
package cn.sx.decentworld.widget;

import cn.sx.decentworld.utils.LogUtils;
import android.content.Context;
import android.os.Handler;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.widget.ScrollView;

/**
 * @ClassName: MyPullToRefreshScrollView.java
 * @Description:
 * @author: cj
 * @date: 2015年12月9日 下午5:40:58
 */
public class CustomScrollView extends ScrollView
{
    private OnScrollListener onScrollListener;
    private ScrollViewListener scrollViewListener;

    /**
     * 主要是用在用户手指离开MyScrollView，MyScrollView还在继续滑动，我们用来保存Y的距离，然后做比较
     */
    private int lastScrollY;

    public CustomScrollView(Context context)
    {
        this(context, null);
    }

    public CustomScrollView(Context context, AttributeSet attrs)
    {
        this(context, attrs, 0);
    }

    public CustomScrollView(Context context, AttributeSet attrs, int defStyle)
    {
        super(context, attrs, defStyle);
    }

    /**
     * 设置滚动接口
     * 
     * @param onScrollListener
     */
    public void setOnScrollListener(OnScrollListener onScrollListener)
    {
        this.onScrollListener = onScrollListener;
    }

    /**
     * Y轴滚动监听
     * @param listener
     */
    public void setScrollViewChangeListener(ScrollViewListener listener)
    {
        this.scrollViewListener = listener;
    }

    /**
     * 用于用户手指离开MyScrollView的时候获取MyScrollView滚动的Y距离，然后回调给onScroll方法中
     */
    private Handler handler = new Handler()
    {
        public void handleMessage(android.os.Message msg)
        {
            int scrollY = CustomScrollView.this.getScrollY();
            // 此时的距离和记录下的距离不相等，在隔5毫秒给handler发送消息
            if (lastScrollY != scrollY)
            {
                LogUtils.i("bm", "lastScrollY--" + lastScrollY + "--scrollY--" + scrollY);
                lastScrollY = scrollY;
                handler.sendMessageDelayed(handler.obtainMessage(), 2);
            }
            if (onScrollListener != null)
            {
                onScrollListener.onScroll(scrollY);
            }

        };

    };

    /**
     * 重写onTouchEvent， 当用户的手在MyScrollView上面的时候，
     * 直接将MyScrollView滑动的Y方向距离回调给onScroll方法中，当用户抬起手的时候，
     * MyScrollView可能还在滑动，所以当用户抬起手我们隔5毫秒给handler发送消息，在handler处理
     * MyScrollView滑动的距离
     */
//    @Override
//    public boolean onTouchEvent(MotionEvent ev)
//    {
//        getParent().requestDisallowInterceptTouchEvent(true);
//        if (onScrollListener != null)
//        {
//            onScrollListener.onScroll(lastScrollY = this.getScrollY());
//        }
//        switch (ev.getAction())
//        {
//            case MotionEvent.ACTION_UP:
//                handler.sendMessageDelayed(handler.obtainMessage(), 2);
//                break;
//        }
//        return super.onTouchEvent(ev);
//    }
    
    

    

    /**
     * 
     * 滚动的回调接口
     * 
     * @author xiaanming
     * 
     */
    public interface OnScrollListener
    {
        /**
         * 回调方法， 返回MyScrollView滑动的Y方向距离
         * 
         * @param scrollY
         *            、
         */
        public void onScroll(int scrollY);
    }

    /**
     * 滚动改变
     */
    @Override
    protected void onScrollChanged(int x, int y, int oldx, int oldy)
    {
        super.onScrollChanged(x, y, oldx, oldy);
        if (scrollViewListener != null)
        {
            scrollViewListener.onYScrolled(y);
        }
    }


    public interface ScrollViewListener
    {
        void onYScrolled(int scrollY);
    }
}
