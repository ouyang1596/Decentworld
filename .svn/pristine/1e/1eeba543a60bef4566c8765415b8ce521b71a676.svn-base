package cn.sx.decentworld.common;

import java.io.IOException;
import java.util.Collection;

import org.apache.harmony.javax.security.sasl.SaslException;
import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.ConnectionConfiguration.SecurityMode;
import org.jivesoftware.smack.PacketCollector;
import org.jivesoftware.smack.SASLAuthentication;
import org.jivesoftware.smack.SmackException;
import org.jivesoftware.smack.SmackException.NotConnectedException;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.filter.PacketFilter;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Packet;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smack.tcp.XMPPTCPConnection;
import org.simple.eventbus.EventBus;

import android.content.Context;
import android.os.Looper;
import cn.sx.decentworld.DWConnectionListener;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.config.AppConfig;
import cn.sx.decentworld.handleMessage.MessageSubject.Subject;
import cn.sx.decentworld.listener.CommCallback;
import cn.sx.decentworld.listener.LoginListener;
import cn.sx.decentworld.logSystem.LogUtils;
import cn.sx.decentworld.task.CollectorThreadStarter;
import cn.sx.decentworld.task.ConnectOpenFireTask;
import cn.sx.decentworld.task.ProcessMessageThread;
import cn.sx.decentworld.task.SubjectPacketFilter;
import cn.sx.decentworld.utils.NetworkUtils;
import cn.sx.decentworld.utils.sputils.UserInfoHelper;

/**
 * @ClassName: XmppHelper.java
 * @Description:
 * @author: cj
 * @date: 2015年10月22日 下午3:58:55
 */
public class XmppHelper
{
    private static final String TAG = "XmppHelper";
    private static XMPPTCPConnection conn = null;

    private XmppHelper()
    {
        //私有化，防止外部通过构造函数新建对象
    }

    /**
     * 获取XMPPTCPConnection
     * 
     * @return
     */
    public static XMPPTCPConnection getConnection()
    {
        if (conn == null)
        {
            try
            {
                LogUtils.v(TAG, "getConnection() ,conn is null,then create it");
                /** 获取Configuration **/
                ConnectionConfiguration connConfig = new ConnectionConfiguration(Constants.HOST_OPEN_FIRE , Constants.PORT_OPEN_FIRE , Constants.SERVER_NAME);
                connConfig.setCompressionEnabled(false);// 不启用压缩 （默认值也是不启用）
                connConfig.setSecurityMode(SecurityMode.enabled);
                connConfig.setSendPresence(false);// 登录不接收离线消息推送，除非登录后收到发送Presence
                connConfig.setReconnectionAllowed(true);
                SASLAuthentication.supportSASLMechanism("PLAIN");
                connConfig.setDebuggerEnabled(AppConfig.XMPP_DEBUGGER_ENABLED);
                /** 创建连接 **/
                conn = new XMPPTCPConnection(connConfig);
                /** 增加包过滤器 **/
                PacketFilter chat_filter = new SubjectPacketFilter(new String[]
                { Subject.CHAT_TEXT_SINGLE.getBody(), Subject.CHAT_TEXT_MULTI.getBody(), Subject.CHAT_VOICE.getBody(), Subject.CHAT_IMAGE.getBody(), Subject.CHAT_CARD_SINGLE.getBody(),
                        Subject.FRIEND_ADD.getBody(), Subject.FRIEND_ACCEPT.getBody(), Subject.FRIEND_REFUSE.getBody(), Subject.FRIEND_DELETE.getBody(), Subject.CHAT_ROOM_ENTER.getBody(),
                        Subject.CHAT_ROOM_LEAVE.getBody(), Subject.ACK_WEALTH.getBody(), Subject.ACK_CONFIRM.getBody(), Subject.ACK_ERROR.getBody(), Subject.MATCH.getBody(),
                        Subject.BROADCAST_BENEFIT.getBody(), Subject.BROADCAST_WORTH_CHANGED.getBody(), Subject.BROADCAST_CHECK.getBody(), Subject.CHECKRESULT.getBody()
                        ,Subject.CommentNotice.getBody(),Subject.WorkCommentNotice.getBody()});
                conn.createPacketCollector(chat_filter, ProcessMessageThread.class);
                /** 建立连接 **/
                conn.connect();
                /** 增加监听，只要不新建连接，那么重连后监听仍然有效 （目前只监听断开连接和被挤下线的消息） **/
                conn.addConnectionListener(new DWConnectionListener());
                /** 开启消息监听 **/
                Collection<PacketCollector> collectors = conn.getPacketCollectors();
                Context context = DecentWorldApp.getGlobalContext();
                for (PacketCollector packetCollector : collectors)
                {
                    Thread t = new CollectorThreadStarter(packetCollector , context);
                    t.setDaemon(true);
                    t.setName("dw");
                    t.start();
                }
            }
            catch (Exception e)
            {
                LogUtils.e(TAG, "getConnection() Exception:" + e.getCause() + "," + e.getMessage());
            }
        }
        return conn;
    }

    /**
     * 关闭连接
     */
    public static void closeConnection()
    {
        LogUtils.i(TAG, "closeConnection()");
        if (conn != null)
        {
            if (conn.isConnected())
            {
                new Thread(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        try
                        {
                            LogUtils.i(TAG, "closeConnection() 即将关系连接，并置为null");
                            conn.disconnect();
                            conn = null;
                        }
                        catch (NotConnectedException e)
                        {
                            LogUtils.e(TAG, "closeConnection() NotConnectedException:" + e.toString());
                        }
                    }
                }).start();
            }
        }
    }

    /**
     * 发送信息
     * 
     * @param message
     */
    public static void sendMessage(Message message)
    {
        sendPacket(message);
    }

    /**
     * 发送信息
     * 
     * @param packet
     */
    public static void sendPacket(final Packet packet)
    {
        // 属于 连接为空、断开连接、没有登录 情况之一都将 重新连接
        if (conn == null || !conn.isConnected() || !conn.isAuthenticated())
        {
            LogUtils.w(TAG, "sendPacket() packet:" + packet.toString() + ",连接异常，Conn:" + conn.toString());
            CommCallback callback = new CommCallback()
            {
                @Override
                public void execute()
                {
                    try
                    {
                        conn.sendPacket(packet);
                    }
                    catch (NotConnectedException e)
                    {
                        LogUtils.e(TAG, "sendPacket() NotConnectedException:" + e.toString());
                    }
                }
            };
            getConnection();
        }
        else
        {
            try
            {
                conn.sendPacket(packet);
            }
            catch (NotConnectedException e)
            {
                LogUtils.e(TAG, "sendPacket() NotConnectedException:" + e.toString());
            }
        }
    }

    /**
     * 发送上线通知
     */
    public static void sendPresence()
    {
        try
        {
            if (DecentWorldApp.getInstance().isMainActivityInit())
            {
                EventBus.getDefault().post(NetworkUtils.RECONNECTION_SUCCESSFUL, NotifyByEventBus.NT_NETWORK_STATE_OF);
                getConnection().sendPacket(new Presence(Presence.Type.available));
                LogUtils.v(TAG, "sendPresence() 会话界面初始化完毕！");
            }
            else
            {
                LogUtils.v(TAG, "sendPresence() 会话列表初始化还没有完成！");
            }
        }
        catch (NotConnectedException e)
        {
            LogUtils.e(TAG, "sendPresence() NotConnectedException:" + e.toString(), true);
        }
    }

    /**
     * 第一次登录
     * 
     * @param dwID
     *            用户ID
     * @param password
     *            密码（加密后）
     * @param listener
     *            回调监听
     */
    public static void firstLogin(final String dwID, final String password, final LoginListener listener)
    {
        Thread loginThread = new Thread(new Runnable()
        {
            public void run()
            {
                try
                {
                    LogUtils.v(TAG, "firstLogin() params[dwID=" + dwID + ",password=" + password + "]");
                    Looper.prepare();
                    XMPPConnection con = getConnection();
                    if (con != null)
                    {
                        con.login(dwID, password, "Smack");
                        listener.onLoginSuccess();
                    }
                    else
                    {
                        LogUtils.e(TAG, "firstLogin() run() con == nulll params[dwID=" + dwID + "]");
                        listener.onLoginFailure(new NullPointerException("the conn is null"));
                    }
                }
                catch (SaslException e)
                {
                    LogUtils.e(TAG, "firstLogin() SaslException:" + e.toString());
                    listener.onLoginFailure(e);
                }
                catch (XMPPException e)
                {
                    // 登录密码错误，提示：XMPPException...casue
                    // by:org.jivesoftware.smack.sasl.SASLErrorException:
                    // SASLError using PLAIN: not-authorized
                    LogUtils.e(TAG, "firstLogin()  XMPPException:" + e.toString());
                    listener.onLoginFailure(e);
                }
                catch (SmackException e)
                {
                    LogUtils.e(TAG, "firstLogin() SmackException:" + e.toString());
                    listener.onLoginFailure(e);
                }
                catch (IOException e)
                {
                    LogUtils.e(TAG, "firstLogin() IOException:" + e.toString());
                    listener.onLoginFailure(e);
                }
            }
        });
        loginThread.setName("loginThread");
        loginThread.start();
    }

    /**
     * 登录openfire
     */
    public static Integer openFireLogin(String dwID, String password)
    {
        try
        {
            XMPPTCPConnection conn = getConnection();
            LogUtils.v(TAG, "openFireLogin() " + conn.toString());
            if (!conn.isConnected())
            {
                LogUtils.v(TAG, "openFireLogin() 没有连接到服务器，开始连接...");
                conn.connect();
            }
            if (!conn.isAuthenticated())
            {
                LogUtils.i(TAG, "openFireLogin() 已经连接到服务器，但是没有授权，开始登录授权...");
                conn.login(dwID, password, "Smack");
            }
            return ConnectOpenFireTask.SUCCESS;
        }
        catch (Exception e)
        {
            LogUtils.e(TAG, "openFireLogin() Exception:" + e.toString());
            return ConnectOpenFireTask.FAILURE;
        }
    }

    /**
     * 手动触发重连，即重新登录
     * 
     * @param listener
     */
    public static void reLogin(final LoginListener listener)
    {
        if (getConnection().isConnected())
        {
            if (UserInfoHelper.isLogined())
            {
                final String dwID = DecentWorldApp.getInstance().getDwID();
                final String password = DecentWorldApp.getInstance().getPassword();
                new Thread(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        if (openFireLogin(dwID, password) == ConnectOpenFireTask.SUCCESS)
                        {
                            listener.onLoginSuccess();
                        }
                        else
                        {
                            listener.onLoginFailure(new Exception("登录失败"));
                        }
                    }
                }).start();
            }
        }
    }

    /**
     * 将连接置为null 1)登录失败后
     */
    public static void setConnNull()
    {
        LogUtils.v(TAG, "setConnNull() 将连接置为 null");
        conn = null;
    }

    /**
     * 测试连接时的测试代码 获取XMPPTCPConnection
     * 
     * @return
     */
    public static XMPPTCPConnection getTestConn()
    {
        LogUtils.d(TAG, "getTestConn()");
        return conn;
    }

}
