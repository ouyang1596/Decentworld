/**
 * 
 */
package cn.sx.decentworld.utils;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Bitmap;
import android.util.Log;
import cn.sx.decentworld.common.CommUtil;
import cn.sx.decentworld.common.Constants;
import cn.sx.decentworld.common.FilePath;

/**
 * 
 * @ClassName: FileUtils.java
 * @Description: 文件管理的工具
 * @author: cj
 * @date: 2016年3月1日 下午4:31:24
 */
public class FileUtils {
	private static final String TAG = "FileUtils";
	private static final int BUFF_SIZE = 1024; // 1k Byte

	/**
	 * 在SD卡上创建文件
	 *
	 * @param fileName
	 * @throws IOException
	 */
	public static File createSDFile(String fileName) throws IOException {
		File file = new File(fileName);
		file.createNewFile();
		return file;
	}

	/**
	 * 在SD卡上创建目录
	 *
	 * @param dirName
	 */
	public static File createSDDir(String dirName) {
		File dir = new File(dirName);
		dir.mkdir();
		return dir;
	}

	/**
	 * 判断SD卡上的文件夹是否存在
	 *
	 * @param fileName
	 * @return
	 */
	public static boolean isFileExist(String fileName) {
		File file = new File(fileName);
		return file.exists();
	}

	/**
	 * 将一个InputStream里面的数据写入到SD卡中
	 *
	 * @param path
	 * @param fileName
	 * @param input
	 * @return
	 */
	public static File writeToSDFromInput(String path, String fileName, InputStream input) {
		File file = null;
		OutputStream output = null;
		try {
			createSDDir(path);
			file = createSDFile(path + fileName);
			output = new FileOutputStream(file);
			byte buffer[] = new byte[4 * 1024];
			while ((input.read(buffer)) != -1) {
				output.write(buffer);
			}
			// 清缓存，将流中的数据保存到文件中
			output.flush();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				output.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return file;
	}

	/**
	 * 将一个InputStream里面的数据写入到SD卡中
	 *
	 * @param path
	 * @param fileName
	 * @param input
	 * @return
	 */
	public static File writeToSDFromInput(String fileName, InputStream input) {
		File file = null;
		OutputStream output = null;
		try {
			file = createSDFile(fileName);// 全路径//绝对路径
			output = new FileOutputStream(file);
			byte buffer[] = new byte[4 * 1024];
			while ((input.read(buffer)) != -1) {
				output.write(buffer);
			}
			// 清缓存，将流中的数据保存到文件中
			output.flush();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				output.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return file;
	}

	// /**
	// * 重命名文件
	// *
	// * @param path
	// * @param oldname
	// * @param newname
	// */
	// public static void renameFile(String path, String oldname, String
	// newname)
	// {
	// if (!oldname.equals(newname))
	// {// 新的文件名和以前文件名不同时,才有必要进行重命名
	// File oldfile = new File(path + "/" + oldname);
	// File newfile = new File(path + "/" + newname);
	// if (!oldfile.exists())
	// {
	// return;// 重命名文件不存在
	// }
	// if (newfile.exists())// 若在该目录下已经有一个文件和新文件名相同，则不允许重命名
	// System.out.println(newname + "已经存在！");
	// else
	// {
	// oldfile.renameTo(newfile);
	// }
	// }
	// else
	// {
	// System.out.println("新文件名和旧文件名相同...");
	// }
	// }

	// public static void renameFile1(File file, String newname)
	// {
	// if (!file.getName().equals(newname))
	// {
	// // 新的文件名和以前文件名不同时,才有必要进行重命名
	// File oldfile = new File(file.getAbsolutePath());
	// File newfile = new File(file.getParent() + "/" + newname);
	// if (!oldfile.exists())
	// {
	// return;// 重命名文件不存在
	// }
	// if (newfile.exists())// 若在该目录下已经有一个文件和新文件名相同，则不允许重命名
	// System.out.println(newname + "已经存在！");
	// else
	// {
	// oldfile.renameTo(newfile);
	// }
	// }
	// else
	// {
	// System.out.println("新文件名和旧文件名相同...");
	// }
	// }

	public static void closeInputStream(InputStream... ins) {
		if (ins == null) {
			return;
		}
		for (InputStream in : ins) {
			if (in != null) {
				try {
					in.close();
				} catch (IOException e) {
					//
				}
			}
		}
	}

	/**
	 * 压缩文件
	 *
	 * @param resFile
	 *            需要压缩的文件（夹）
	 * @param zipout
	 *            压缩的目的文件
	 * @param rootpath
	 *            压缩的文件路径
	 */
	public static void zipFile(File resFile, ZipOutputStream zipout, String rootpath) {
		try {
			if (CommUtil.isBlank(rootpath)) {
				rootpath = resFile.getName();
			} else {
				rootpath = rootpath + (rootpath.endsWith("/") ? Constants.DEFAULT_BLANK : File.separator) + resFile.getName();
			}

			rootpath = new String(rootpath.getBytes("8859_1"), "UTF-8");

			if (resFile.isDirectory()) {
				File[] fileList = resFile.listFiles();
				for (File file : fileList) {
					zipFile(file, zipout, rootpath);
				}
			} else {
				byte buffer[] = new byte[BUFF_SIZE];
				BufferedInputStream in = new BufferedInputStream(new FileInputStream(resFile), BUFF_SIZE);
				zipout.putNextEntry(new ZipEntry(rootpath));
				int realLength;
				while ((realLength = in.read(buffer)) != -1) {
					zipout.write(buffer, 0, realLength);
				}
				in.close();
				zipout.flush();
				zipout.closeEntry();
			}
			Log.d("TAG", "压缩完成");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 处理文件
	 * 
	 * @param filePath
	 * @return
	 */
	public static File handleFile(String filePath) {
		File file = null;
		if (ImageUtils.fileLength(filePath) / 1024 > 100) {// 100kb
			Bitmap bitmap = ImageUtils.scalePic(filePath);
			String picPath = FilePath.TEMP_COMMON;
			ImageUtils.saveBitmap(picPath, bitmap);
			file = new File(picPath);
		} else {
			file = new File(filePath);
		}
		return file;
	}

	/**
	 * 储存是否弹出提示框的状态
	 * */
	public static void savePromptStatus(Context context, String statusName, int status) {
		SharedPreferences preferences = context.getSharedPreferences(Constants.PROMPT, 0);
		Editor edit = preferences.edit();
		edit.putInt(statusName, status);
		edit.commit();
	}

	/**
	 * 获取是否弹出提示框的状态
	 * */
	public static int getPromptStatus(Context context, String statusName) {
		SharedPreferences preferences = context.getSharedPreferences(Constants.PROMPT, 0);
		return preferences.getInt(statusName, -1);
	}

	/**
	 * 储存是否响铃状态
	 * */
	public static void saveIfVoiceRingStatus(Context context, String statusName, int status) {
		SharedPreferences preferences = context.getSharedPreferences(Constants.PROMPT, 0);
		Editor edit = preferences.edit();
		edit.putInt(statusName, status);
		edit.commit();
	}

	/**
	 * 获取是否响铃状态
	 * */
	public static int getIfVoiceRingStatus(Context context, String statusName) {
		SharedPreferences preferences = context.getSharedPreferences(Constants.PROMPT, 0);
		return preferences.getInt(statusName, -1);
	}

	// ///////////////////////////////////////////////////////以下方法已经优化过

	/**
	 * 删除指定文件夹下的所有文件(ok)
	 * 
	 * @param dirPath
	 *            指定的文件夹
	 */
	public static void deleteAllFile(String dirPath) {
		File file = new File(dirPath);
		if (file.exists()) {
			File[] files = file.listFiles();
			if (files != null && files.length > 0) {
				for (File f : files) {
					f.delete();
				}
			}
		}
	}

	/**
	 * 删除指定文件或者文件夹下的所有文件及文件夹
	 * 
	 * @param file
	 *            可以为一个文件，也可以为一个目录
	 */
	public static void deleteFile(File file) {
		if (null == file) {
			return;
		}
		if (file.isFile()) {
			file.delete();
			return;
		}
		if (file.isDirectory()) {
			File[] childFiles = file.listFiles();
			if (childFiles == null || childFiles.length == 0) {
				file.delete();
				return;
			}
			for (File f : childFiles) {
				deleteFile(f);
			}
			file.delete();
		}
	}

	/**
	 * 随机生成文件名（不带后缀）
	 */
	public static String generateFileName() {
		return UUID.randomUUID().toString();
	}

}
