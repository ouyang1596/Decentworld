/**
 * 
 */
package cn.sx.decentworld.utils;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import android.text.format.Time;
import cn.sx.decentworld.common.CommUtil;
import cn.sx.decentworld.config.ConstantConfig;
import cn.sx.decentworld.logSystem.LogUtils;

/**
 * 
 * @ClassName: TimeUtils.java
 * @Description: 时间工具类
 * @author: cj
 * @date: 2016年1月27日 下午3:44:18
 */
public class TimeUtils
{
    /**
     * 常量
     */
    private static final String TAG = "TimeUtils";
    private static SimpleDateFormat formatBuilder;

    /**
     * 时间格式
     */
    public static final String HH11mm11ss = "HH:mm:ss";
    public static final String HH11MM = "HH:MM";
    public static final String MM_dd_HH11mm = "MM-dd-HH:mm";
    public static final String yyyy_MM_dd0HH11mm11ss = "yyyy-MM-dd HH:mm:ss";
    public static final String yyyy年MM月dd日 = "yyyy年MM月dd日";
    public static final String MM月dd日 = "MM月dd日";
    public static final String MM月dd日0HH11MM = "MM月dd日  HH:MM";
    


    /**
     * 获取当前时间,以MM-dd-HH:mm形式返回
     * @return
     */
    public static String getCurrentTime()
    {
        SimpleDateFormat format = new SimpleDateFormat("MM-dd-HH:mm");
        String t = format.format(new Date());
        return t;
    }

    /**
     * 将当前时间以指定格式返回
     * @param format
     * @return
     */
    public static String getCurrentTime(String format)
    {
        formatBuilder = new SimpleDateFormat(format);
        return formatBuilder.format(new Date());
    }


    /**
     * 将指定时间以指定格式返回(有问题，需要调试)
     * @param format
     * @param timeStamp
     * @return
     */
    public static String getFormatTime(long timeStamp,String format)
    {
        formatBuilder = new SimpleDateFormat(format);
        String d = formatBuilder.format(timeStamp);
        Date date = null;
        try
        {
            date = formatBuilder.parse(d);
        }
        catch (ParseException e)
        {
            LogUtils.e(TAG, "getFormatTime() ParseException:"+e.toString());
        }
        return formatBuilder.format(date);
    }


    /**
     * 获取当前时间，以yyyy-MM-dd HH:mm:ss格式返回
     * 
     * @return
     */
    public static String getDateAllMessage()
    {
        return getCurrentTime("yyyy-MM-dd HH:mm:ss");
    }

    /**
     * 是否显示时间
     * @param before
     *            上一条消息的时间
     * @param now
     *            最新一条消息的时间
     * @return
     */
    public static boolean isShowTime(String before, String now)
    {
        if (CommUtil.isBlank(before) || CommUtil.isBlank(now))
        {
            LogUtils.i(TAG, "isShowTime(String before,String now)参数为空");
        }
        long interval = ConstantConfig.INTERVAL_TIME_CHAT_MSG;
        long time1 = Long.valueOf(before);
        long time2 = Long.valueOf(now);
        if (time2 - time1 > interval)
        {
            return true;
        }
        return false;
    }

    /**
     * 显示时间格式为今天、昨天、yyyy年MM月dd日 hh:mm(聊天界面)
     * @param context
     * @param when
     * @return String
     */
    public static String toMsgFormat(long when)
    {
        Time then = new Time();
        then.set(when);
        Time now = new Time();
        now.setToNow();

        String formatStr;
        if (then.year != now.year)
        {
            formatStr = yyyy年MM月dd日;
        }
        else if (then.yearDay != now.yearDay)
        {
            // If it is from a different day than today, show only the date.
            formatStr = MM月dd日0HH11MM;
        }
        else
        {
            // Otherwise, if the message is from today, show the time.
            formatStr = HH11MM;
        }

        if (then.year == now.year && then.yearDay == now.yearDay)
        {
            // 今天
            return getFormatTime(when,HH11mm11ss);
        }
        else if ((then.year == now.year) && ((now.yearDay - then.yearDay) == 1))
        {
            // 昨天
            return "昨天 " + getFormatTime(when,HH11mm11ss);
        }
        else
        {
            SimpleDateFormat sdf = new SimpleDateFormat(formatStr);
            String temp = sdf.format(when);
            if (temp != null && temp.length() == 5 && temp.substring(0, 1).equals("0"))
            {
                temp = temp.substring(1);
            }
            return temp;
        }
    }
    
    /**
     * 会话列表显示
     * @param timeStamp
     * @return
     */
    public static String toConversationFormat(long when)
    {
        Time then = new Time();
        then.set(when);
        Time now = new Time();
        now.setToNow();
        //今年
        if(then.year == now.year )
        {
            if (then.yearDay == now.yearDay)
            {
                // 今天
                return getFormatTime(when,HH11mm11ss);
            }
            else if (((now.yearDay - then.yearDay) == 1))
            {
                // 昨天
                return "昨天 ";
            }
            else
            {
                // If it is from a different day than today, show only the date.
                return getFormatTime(when,MM月dd日);
            }
        }
        else// if (then.year != now.year)
        {
            return getFormatTime(when, yyyy年MM月dd日);
        }
    }

    public static String weekHandle(int WeekOfMonth)
    {
        String week = null;
        switch (WeekOfMonth)
        {
            case 1:
                week = "SUNDAY";
                break;

            case 2:
                week = "MONDAY";
                break;
            case 3:
                week = "TUESDAY";
                break;
            case 4:
                week = "WEDNESDAY";
                break;
            case 5:
                week = "THURSDAY";
                break;
            case 6:
                week = "FRIDAY";
                break;
            case 7:
                week = "SATURDAY";
                break;
        }
        return week;
    }

    /**
     * 将一年中的月份转化成为英文
     * 
     * @param month0fYear
     * @return
     */
    public static String MonthHandle(int month0fYear)
    {
        String month = null;
        switch (month0fYear)
        {
            case 1:
                month = "JAN";
                break;

            case 2:
                month = "FEB";
                break;
            case 3:
                month = "MAR";
                break;
            case 4:
                month = "APR";
                break;
            case 5:
                month = "MAY";
                break;
            case 6:
                month = "JUN";
                break;
            case 7:
                month = "JUL";
                break;
            case 8:
                month = "AUG";
                break;
            case 9:
                month = "SEP";
                break;
            case 10:
                month = "OCT";
                break;
            case 11:
                month = "NOV";
                break;
            case 12:
                month = "DEC";
                break;

        }
        return month;
    }
}
