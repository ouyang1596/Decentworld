/**
 * 
 */
package cn.sx.decentworld.service;

import java.util.Collection;

import org.jivesoftware.smack.ConnectionListener;
import org.jivesoftware.smack.PacketCollector;
import org.jivesoftware.smack.XMPPConnection;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.IBinder;
import cn.sx.decentworld.DecentWorldApp;
import cn.sx.decentworld.task.CollectorThreadStarter;
import cn.sx.decentworld.utils.LogUtils;
import cn.sx.decentworld.utils.XmppHelper;

/**
 * @ClassName: PackageListenerService.java
 * @Description:消息监听服务
 * @author: cj
 * @date: 2015年9月22日 下午4:05:47
 */
public class PacketListenerService extends Service implements
		ConnectionListener {
	public static final String TAG = "PacketListenerService";
	private static final PacketListenerService instance = new PacketListenerService();
	private boolean listening = false;

	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

	@Override
	public void onCreate() {
		super.onCreate();
		LogUtils.i(TAG, "onCreate");
		// EventBus.getDefault().register(this);// 注册订阅事件
		if (XmppHelper.isNewCon()) {
			// conn=null do not connect
			LogUtils.i(TAG, "new conn waiting for notify");
			// 暂时设定如果被关闭进程，xmpphelper清空重建的话，把该监听服务该关闭
			// 日后可以再考虑守护进程之类的，主要是在调用connection.login()方法后，要【通知】该监听服务，开启监听
			// 测试eventBUS通知貌似无效
			stopSelf();
		} else {
			XMPPConnection conn = XmppHelper.getConnection(null);
			Collection<PacketCollector> collectors = conn.getPacketCollectors();
			Context context = DecentWorldApp.getGlobalContext();
			for (PacketCollector packetCollector : collectors) {
				new CollectorThreadStarter(packetCollector, context).start();
			}
			listening = true;
		}
	}

	@Override
	public void onDestroy() {
		LogUtils.i(TAG, "关闭一个Packet监听的服务...onDestroy");
		super.onDestroy();
	}

	@Override
	public void connectionClosed() {
		// TODO Auto-generated method stub
	}

	@Override
	public void connectionClosedOnError(Exception e) {

	}

	@Override
	public void reconnectingIn(int seconds) {
		// TODO Auto-generated method stub

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.jivesoftware.smack.ConnectionListener#reconnectionSuccessful()
	 */
	@Override
	public void reconnectionSuccessful() {
		LogUtils.i(TAG, "连接成功");
		if (!listening) {
			XMPPConnection conn = XmppHelper.getConnection(null);
			Collection<PacketCollector> collectors = conn.getPacketCollectors();
			Context context = DecentWorldApp.getGlobalContext();
			for (PacketCollector packetCollector : collectors) {
				new CollectorThreadStarter(packetCollector, context).start();
			}
			listening = true;
		}
	}

	@Override
	public void reconnectionFailed(Exception e) {

	}

	// private static class LoginThread extends Thread{
	// private XMPPConnection conn;
	// private String username;
	// private String dwID;
	// private String password;
	// private String resource;
	// public LoginThread( String username, String dwID,
	// String password, String resource) {
	// super();
	// this.username = username;
	// this.dwID = dwID;
	// this.password = password;
	// this.resource = resource;
	// }
	//
	//
	// @Override
	// public void run() {
	// try {
	// //connect
	// conn = XmppHelper.getConnection(null);
	// conn.login(username, dwID, password, resource);
	// XmppHelper.setIsNewCon(false);
	// Collection<PacketCollector> collectors = conn.getPacketCollectors();
	// Context context = DecentWorldApp.getGlobalContext();
	// for (PacketCollector packetCollector : collectors) {
	// new CollectorThreadStarter(packetCollector, context).start();
	// }
	// } catch (XMPPException e) {
	// }
	// }
	// }
}
